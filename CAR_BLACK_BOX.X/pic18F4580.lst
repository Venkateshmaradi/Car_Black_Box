

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Thu Jun 15 15:06:38 2023

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og9 
     1                           	processor	18F4580
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    63                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    64                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    65  0000                     
    66                           ; Version 2.36
    67                           ; Generated 28/01/2022 GMT
    68                           ; 
    69                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    70                           ; All rights reserved.
    71                           ; 
    72                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    73                           ; 
    74                           ; Redistribution and use in source and binary forms, with or without modification, are
    75                           ; permitted provided that the following conditions are met:
    76                           ; 
    77                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    78                           ;        conditions and the following disclaimer.
    79                           ; 
    80                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    81                           ;        of conditions and the following disclaimer in the documentation and/or other
    82                           ;        materials provided with the distribution. Publication is not required when
    83                           ;        this file is used in an embedded application.
    84                           ; 
    85                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    86                           ;        software without specific prior written permission.
    87                           ; 
    88                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    89                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    90                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    91                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    92                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    93                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    94                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    95                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    96                           ; 
    97                           ; 
    98                           ; Code-generator required, PIC18F4580 Definitions
    99                           ; 
   100                           ; SFR Addresses
   101  0000                     
   102                           	psect	idataCOMRAM
   103  003000                     __pidataCOMRAM:
   104                           	callstack 0
   105                           
   106                           ;initializer for read_switches@once
   107  003000  01                 	db	1
   108                           
   109                           	psect	idataBANK0
   110  001242                     __pidataBANK0:
   111                           	callstack 0
   112                           
   113                           ;initializer for go_to_menu@F10376
   114  001242  CF                 	db	low STR_17
   115  001243  2F                 	db	high STR_17
   116  001244  92                 	db	low STR_18
   117  001245  2F                 	db	high STR_18
   118  001246  BA                 	db	low STR_19
   119  001247  2F                 	db	high STR_19
   120  001248  3A                 	db	low STR_20
   121  001249  2F                 	db	high STR_20
   122  00124A  D9                 	db	low STR_21
   123  00124B  2F                 	db	high STR_21
   124                           
   125                           ;initializer for set_time@F10423
   126  00124C  00                 	db	0
   127  00124D  00                 	db	0
   128  00124E  3A                 	db	58
   129  00124F  00                 	db	0
   130  001250  00                 	db	0
   131  001251  3A                 	db	58
   132  001252  00                 	db	0
   133  001253  00                 	db	0
   134  001254  00                 	db	0
   135                           
   136                           ;initializer for main@F10408
   137  001255  4E                 	db	78
   138  001256  52                 	db	82
   139  001257  31                 	db	49
   140  001258  32                 	db	50
   141  001259  33                 	db	51
   142  00125A  34                 	db	52
   143  00125B  35                 	db	53
   144  0000                     _RCREG	set	4014
   145  0000                     _TXREG	set	4013
   146  0000                     _SPBRG	set	4015
   147  0000                     _SSPADD	set	4040
   148  0000                     _SSPCON1	set	4038
   149  0000                     _ADRESL	set	4035
   150  0000                     _ADRESH	set	4036
   151  0000                     _ABDOVF	set	32199
   152  0000                     _ACKSTAT	set	32302
   153  0000                     _CKE	set	32318
   154  0000                     _VCFG1	set	32269
   155  0000                     _GODONE	set	32273
   156  0000                     _TRISC	set	3988
   157  0000                     _TRISD	set	3989
   158  0000                     _PORTDbits	set	3971
   159  0000                     _PORTBbits	set	3969
   160  0000                     _ADCON1	set	4033
   161  0000                     _ADCON0	set	4034
   162  0000                     _RCIF	set	31989
   163  0000                     _RCIE	set	31981
   164  0000                     _TXIF	set	31988
   165  0000                     _ABDEN	set	32192
   166  0000                     _WUE	set	32193
   167  0000                     _BRG16	set	32195
   168  0000                     _SCKP	set	32196
   169  0000                     _RCIDL	set	32198
   170  0000                     _RX9D	set	32088
   171  0000                     _OERR	set	32089
   172  0000                     _FERR	set	32090
   173  0000                     _ADDEN	set	32091
   174  0000                     _CREN	set	32092
   175  0000                     _SREN	set	32093
   176  0000                     _RX9	set	32094
   177  0000                     _TX9D	set	32096
   178  0000                     _TRMT	set	32097
   179  0000                     _BRGH	set	32098
   180  0000                     _SENDB	set	32099
   181  0000                     _SYNC	set	32100
   182  0000                     _TXEN	set	32101
   183  0000                     _TX9	set	32102
   184  0000                     _TRISC6	set	31910
   185  0000                     _TRISC7	set	31911
   186  0000                     _ACKEN	set	32300
   187  0000                     _ACKDT	set	32301
   188  0000                     _RCEN	set	32299
   189  0000                     _RSEN	set	32297
   190  0000                     _PEN	set	32298
   191  0000                     _SEN	set	32296
   192  0000                     _SMP	set	32319
   193  0000                     _TRISC4	set	31908
   194  0000                     _GO	set	32273
   195  0000                     _ADON	set	32272
   196  0000                     _VCFG0	set	32268
   197  0000                     _ADCS2	set	32258
   198  0000                     _ADCS1	set	32257
   199  0000                     _ADCS0	set	32256
   200  0000                     _ACQT0	set	32259
   201  0000                     _ACQT1	set	32260
   202  0000                     _ACQT2	set	32261
   203  0000                     _PORTB	set	3969
   204  0000                     _TRISB	set	3987
   205  0000                     _TRISC3	set	31907
   206  0000                     _ADFM	set	32263
   207  0000                     _TXIE	set	31980
   208  0000                     _TRISD7	set	31919
   209  0000                     _SSPIF	set	31987
   210  0000                     _SSPBUF	set	4041
   211  0000                     _RBPU	set	32655
   212  0000                     _BCLIF	set	32011
   213  0000                     _SPEN	set	32095
   214  0000                     _CSRC	set	32103
   215  0000                     _PORTD	set	3971
   216  0000                     _PORTCbits	set	3970
   217                           
   218                           	psect	mediumconst
   219  002E9A                     __pmediumconst:
   220                           	callstack 0
   221  002E9A  00                 	db	0
   222  002E9B                     STR_15:
   223  002E9B  50                 	db	80	;'P'
   224  002E9C  41                 	db	65	;'A'
   225  002E9D  53                 	db	83	;'S'
   226  002E9E  53                 	db	83	;'S'
   227  002E9F  57                 	db	87	;'W'
   228  002EA0  4F                 	db	79	;'O'
   229  002EA1  52                 	db	82	;'R'
   230  002EA2  44                 	db	68	;'D'
   231  002EA3  20                 	db	32
   232  002EA4  4E                 	db	78	;'N'
   233  002EA5  4F                 	db	79	;'O'
   234  002EA6  54                 	db	84	;'T'
   235  002EA7  20                 	db	32
   236  002EA8  4D                 	db	77	;'M'
   237  002EA9  41                 	db	65	;'A'
   238  002EAA  54                 	db	84	;'T'
   239  002EAB  43                 	db	67	;'C'
   240  002EAC  48                 	db	72	;'H'
   241  002EAD  49                 	db	73	;'I'
   242  002EAE  4E                 	db	78	;'N'
   243  002EAF  47                 	db	71	;'G'
   244  002EB0  00                 	db	0
   245  002EB1                     STR_11:
   246  002EB1  45                 	db	69	;'E'
   247  002EB2  4E                 	db	78	;'N'
   248  002EB3  54                 	db	84	;'T'
   249  002EB4  45                 	db	69	;'E'
   250  002EB5  52                 	db	82	;'R'
   251  002EB6  20                 	db	32
   252  002EB7  4E                 	db	78	;'N'
   253  002EB8  45                 	db	69	;'E'
   254  002EB9  57                 	db	87	;'W'
   255  002EBA  20                 	db	32
   256  002EBB  50                 	db	80	;'P'
   257  002EBC  41                 	db	65	;'A'
   258  002EBD  53                 	db	83	;'S'
   259  002EBE  53                 	db	83	;'S'
   260  002EBF  57                 	db	87	;'W'
   261  002EC0  4F                 	db	79	;'O'
   262  002EC1  52                 	db	82	;'R'
   263  002EC2  44                 	db	68	;'D'
   264  002EC3  00                 	db	0
   265  002EC4                     STR_12:
   266  002EC4  52                 	db	82	;'R'
   267  002EC5  45                 	db	69	;'E'
   268  002EC6  2D                 	db	45
   269  002EC7  45                 	db	69	;'E'
   270  002EC8  4E                 	db	78	;'N'
   271  002EC9  54                 	db	84	;'T'
   272  002ECA  45                 	db	69	;'E'
   273  002ECB  52                 	db	82	;'R'
   274  002ECC  20                 	db	32
   275  002ECD  50                 	db	80	;'P'
   276  002ECE  41                 	db	65	;'A'
   277  002ECF  53                 	db	83	;'S'
   278  002ED0  53                 	db	83	;'S'
   279  002ED1  57                 	db	87	;'W'
   280  002ED2  4F                 	db	79	;'O'
   281  002ED3  52                 	db	82	;'R'
   282  002ED4  44                 	db	68	;'D'
   283  002ED5  52                 	db	82	;'R'
   284  002ED6  00                 	db	0
   285  002ED7                     STR_27:
   286  002ED7  54                 	db	84	;'T'
   287  002ED8  49                 	db	73	;'I'
   288  002ED9  4D                 	db	77	;'M'
   289  002EDA  45                 	db	69	;'E'
   290  002EDB  20                 	db	32
   291  002EDC  20                 	db	32
   292  002EDD  20                 	db	32
   293  002EDE  20                 	db	32
   294  002EDF  20                 	db	32
   295  002EE0  45                 	db	69	;'E'
   296  002EE1  56                 	db	86	;'V'
   297  002EE2  20                 	db	32
   298  002EE3  20                 	db	32
   299  002EE4  52                 	db	82	;'R'
   300  002EE5  50                 	db	80	;'P'
   301  002EE6  4D                 	db	77	;'M'
   302  002EE7  00                 	db	0
   303  002EE8                     STR_22:
   304  002EE8  4E                 	db	78	;'N'
   305  002EE9  4F                 	db	79	;'O'
   306  002EEA  20                 	db	32
   307  002EEB  4C                 	db	76	;'L'
   308  002EEC  4F                 	db	79	;'O'
   309  002EED  47                 	db	71	;'G'
   310  002EEE  53                 	db	83	;'S'
   311  002EEF  20                 	db	32
   312  002EF0  54                 	db	84	;'T'
   313  002EF1  4F                 	db	79	;'O'
   314  002EF2  20                 	db	32
   315  002EF3  50                 	db	80	;'P'
   316  002EF4  52                 	db	82	;'R'
   317  002EF5  49                 	db	73	;'I'
   318  002EF6  4E                 	db	78	;'N'
   319  002EF7  54                 	db	84	;'T'
   320  002EF8  00                 	db	0
   321  002EF9                     STR_10:
   322  002EF9  20                 	db	32
   323  002EFA  20                 	db	32
   324  002EFB  20                 	db	32
   325  002EFC  20                 	db	32
   326  002EFD  20                 	db	32
   327  002EFE  20                 	db	32
   328  002EFF  20                 	db	32
   329  002F00  20                 	db	32
   330  002F01  20                 	db	32
   331  002F02  20                 	db	32
   332  002F03  20                 	db	32
   333  002F04  20                 	db	32
   334  002F05  20                 	db	32
   335  002F06  20                 	db	32
   336  002F07  20                 	db	32
   337  002F08  20                 	db	32
   338  002F09  00                 	db	0
   339  002F0A                     STR_7:
   340  002F0A  59                 	db	89	;'Y'
   341  002F0B  4F                 	db	79	;'O'
   342  002F0C  55                 	db	85	;'U'
   343  002F0D  20                 	db	32
   344  002F0E  41                 	db	65	;'A'
   345  002F0F  52                 	db	82	;'R'
   346  002F10  45                 	db	69	;'E'
   347  002F11  20                 	db	32
   348  002F12  42                 	db	66	;'B'
   349  002F13  4C                 	db	76	;'L'
   350  002F14  4F                 	db	79	;'O'
   351  002F15  43                 	db	67	;'C'
   352  002F16  4B                 	db	75	;'K'
   353  002F17  45                 	db	69	;'E'
   354  002F18  44                 	db	68	;'D'
   355  002F19  20                 	db	32
   356  002F1A  00                 	db	0
   357  002F1B                     STR_13:
   358  002F1B  50                 	db	80	;'P'
   359  002F1C  41                 	db	65	;'A'
   360  002F1D  53                 	db	83	;'S'
   361  002F1E  53                 	db	83	;'S'
   362  002F1F  57                 	db	87	;'W'
   363  002F20  4F                 	db	79	;'O'
   364  002F21  52                 	db	82	;'R'
   365  002F22  44                 	db	68	;'D'
   366  002F23  20                 	db	32
   367  002F24  53                 	db	83	;'S'
   368  002F25  54                 	db	84	;'T'
   369  002F26  4F                 	db	79	;'O'
   370  002F27  52                 	db	82	;'R'
   371  002F28  45                 	db	69	;'E'
   372  002F29  44                 	db	68	;'D'
   373  002F2A  00                 	db	0
   374  002F2B                     STR_29:
   375  002F2B  45                 	db	69	;'E'
   376  002F2C  6E                 	db	110	;'n'
   377  002F2D  74                 	db	116	;'t'
   378  002F2E  65                 	db	101	;'e'
   379  002F2F  72                 	db	114	;'r'
   380  002F30  20                 	db	32
   381  002F31  4E                 	db	78	;'N'
   382  002F32  65                 	db	101	;'e'
   383  002F33  77                 	db	119	;'w'
   384  002F34  20                 	db	32
   385  002F35  54                 	db	84	;'T'
   386  002F36  69                 	db	105	;'i'
   387  002F37  6D                 	db	109	;'m'
   388  002F38  65                 	db	101	;'e'
   389  002F39  00                 	db	0
   390  002F3A                     STR_20:
   391  002F3A  43                 	db	67	;'C'
   392  002F3B  48                 	db	72	;'H'
   393  002F3C  41                 	db	65	;'A'
   394  002F3D  4E                 	db	78	;'N'
   395  002F3E  47                 	db	71	;'G'
   396  002F3F  45                 	db	69	;'E'
   397  002F40  50                 	db	80	;'P'
   398  002F41  41                 	db	65	;'A'
   399  002F42  53                 	db	83	;'S'
   400  002F43  53                 	db	83	;'S'
   401  002F44  57                 	db	87	;'W'
   402  002F45  4F                 	db	79	;'O'
   403  002F46  52                 	db	82	;'R'
   404  002F47  44                 	db	68	;'D'
   405  002F48  00                 	db	0
   406  002F49                     STR_6:
   407  002F49  41                 	db	65	;'A'
   408  002F4A  54                 	db	84	;'T'
   409  002F4B  54                 	db	84	;'T'
   410  002F4C  45                 	db	69	;'E'
   411  002F4D  4D                 	db	77	;'M'
   412  002F4E  50                 	db	80	;'P'
   413  002F4F  54                 	db	84	;'T'
   414  002F50  53                 	db	83	;'S'
   415  002F51  20                 	db	32
   416  002F52  4C                 	db	76	;'L'
   417  002F53  45                 	db	69	;'E'
   418  002F54  46                 	db	70	;'F'
   419  002F55  54                 	db	84	;'T'
   420  002F56  3A                 	db	58	;':'
   421  002F57  00                 	db	0
   422  002F58                     STR_2:
   423  002F58  45                 	db	69	;'E'
   424  002F59  4E                 	db	78	;'N'
   425  002F5A  54                 	db	84	;'T'
   426  002F5B  45                 	db	69	;'E'
   427  002F5C  52                 	db	82	;'R'
   428  002F5D  20                 	db	32
   429  002F5E  50                 	db	80	;'P'
   430  002F5F  41                 	db	65	;'A'
   431  002F60  53                 	db	83	;'S'
   432  002F61  53                 	db	83	;'S'
   433  002F62  57                 	db	87	;'W'
   434  002F63  4F                 	db	79	;'O'
   435  002F64  52                 	db	82	;'R'
   436  002F65  44                 	db	68	;'D'
   437  002F66  00                 	db	0
   438  002F67                     STR_16:
   439  002F67  52                 	db	82	;'R'
   440  002F68  45                 	db	69	;'E'
   441  002F69  54                 	db	84	;'T'
   442  002F6A  52                 	db	82	;'R'
   443  002F6B  59                 	db	89	;'Y'
   444  002F6C  20                 	db	32
   445  002F6D  45                 	db	69	;'E'
   446  002F6E  4E                 	db	78	;'N'
   447  002F6F  54                 	db	84	;'T'
   448  002F70  45                 	db	69	;'E'
   449  002F71  52                 	db	82	;'R'
   450  002F72  49                 	db	73	;'I'
   451  002F73  4E                 	db	78	;'N'
   452  002F74  47                 	db	71	;'G'
   453  002F75  00                 	db	0
   454  002F76                     STR_30:
   455  002F76  54                 	db	84	;'T'
   456  002F77  49                 	db	73	;'I'
   457  002F78  4D                 	db	77	;'M'
   458  002F79  45                 	db	69	;'E'
   459  002F7A  20                 	db	32
   460  002F7B  55                 	db	85	;'U'
   461  002F7C  50                 	db	80	;'P'
   462  002F7D  44                 	db	68	;'D'
   463  002F7E  41                 	db	65	;'A'
   464  002F7F  54                 	db	84	;'T'
   465  002F80  45                 	db	69	;'E'
   466  002F81  44                 	db	68	;'D'
   467  002F82  21                 	db	33
   468  002F83  00                 	db	0
   469  002F84                     STR_25:
   470  002F84  4C                 	db	76	;'L'
   471  002F85  4F                 	db	79	;'O'
   472  002F86  47                 	db	71	;'G'
   473  002F87  53                 	db	83	;'S'
   474  002F88  20                 	db	32
   475  002F89  43                 	db	67	;'C'
   476  002F8A  4C                 	db	76	;'L'
   477  002F8B  45                 	db	69	;'E'
   478  002F8C  41                 	db	65	;'A'
   479  002F8D  52                 	db	82	;'R'
   480  002F8E  45                 	db	69	;'E'
   481  002F8F  44                 	db	68	;'D'
   482  002F90  21                 	db	33
   483  002F91  00                 	db	0
   484  002F92                     STR_18:
   485  002F92  44                 	db	68	;'D'
   486  002F93  4F                 	db	79	;'O'
   487  002F94  57                 	db	87	;'W'
   488  002F95  4E                 	db	78	;'N'
   489  002F96  4C                 	db	76	;'L'
   490  002F97  4F                 	db	79	;'O'
   491  002F98  41                 	db	65	;'A'
   492  002F99  44                 	db	68	;'D'
   493  002F9A  20                 	db	32
   494  002F9B  4C                 	db	76	;'L'
   495  002F9C  4F                 	db	79	;'O'
   496  002F9D  47                 	db	71	;'G'
   497  002F9E  53                 	db	83	;'S'
   498  002F9F  00                 	db	0
   499  002FA0                     STR_14:
   500  002FA0  53                 	db	83	;'S'
   501  002FA1  55                 	db	85	;'U'
   502  002FA2  43                 	db	67	;'C'
   503  002FA3  43                 	db	67	;'C'
   504  002FA4  45                 	db	69	;'E'
   505  002FA5  53                 	db	83	;'S'
   506  002FA6  53                 	db	83	;'S'
   507  002FA7  46                 	db	70	;'F'
   508  002FA8  55                 	db	85	;'U'
   509  002FA9  4C                 	db	76	;'L'
   510  002FAA  4C                 	db	76	;'L'
   511  002FAB  59                 	db	89	;'Y'
   512  002FAC  21                 	db	33
   513  002FAD  00                 	db	0
   514  002FAE                     STR_23:
   515  002FAE  44                 	db	68	;'D'
   516  002FAF  4F                 	db	79	;'O'
   517  002FB0  57                 	db	87	;'W'
   518  002FB1  4E                 	db	78	;'N'
   519  002FB2  4C                 	db	76	;'L'
   520  002FB3  4F                 	db	79	;'O'
   521  002FB4  41                 	db	65	;'A'
   522  002FB5  44                 	db	68	;'D'
   523  002FB6  49                 	db	73	;'I'
   524  002FB7  4E                 	db	78	;'N'
   525  002FB8  47                 	db	71	;'G'
   526  002FB9  00                 	db	0
   527  002FBA                     STR_19:
   528  002FBA  43                 	db	67	;'C'
   529  002FBB  4C                 	db	76	;'L'
   530  002FBC  45                 	db	69	;'E'
   531  002FBD  41                 	db	65	;'A'
   532  002FBE  52                 	db	82	;'R'
   533  002FBF  20                 	db	32
   534  002FC0  4C                 	db	76	;'L'
   535  002FC1  4F                 	db	79	;'O'
   536  002FC2  47                 	db	71	;'G'
   537  002FC3  53                 	db	83	;'S'
   538  002FC4  00                 	db	0
   539  002FC5                     STR_24:
   540  002FC5  4C                 	db	76	;'L'
   541  002FC6  4F                 	db	79	;'O'
   542  002FC7  47                 	db	71	;'G'
   543  002FC8  53                 	db	83	;'S'
   544  002FC9  2E                 	db	46
   545  002FCA  2E                 	db	46
   546  002FCB  2E                 	db	46
   547  002FCC  2E                 	db	46
   548  002FCD  2E                 	db	46
   549  002FCE  00                 	db	0
   550  002FCF                     STR_17:
   551  002FCF  56                 	db	86	;'V'
   552  002FD0  49                 	db	73	;'I'
   553  002FD1  45                 	db	69	;'E'
   554  002FD2  57                 	db	87	;'W'
   555  002FD3  20                 	db	32
   556  002FD4  4C                 	db	76	;'L'
   557  002FD5  4F                 	db	79	;'O'
   558  002FD6  47                 	db	71	;'G'
   559  002FD7  53                 	db	83	;'S'
   560  002FD8  00                 	db	0
   561  002FD9                     STR_21:
   562  002FD9  53                 	db	83	;'S'
   563  002FDA  45                 	db	69	;'E'
   564  002FDB  54                 	db	84	;'T'
   565  002FDC  20                 	db	32
   566  002FDD  54                 	db	84	;'T'
   567  002FDE  49                 	db	73	;'I'
   568  002FDF  4D                 	db	77	;'M'
   569  002FE0  45                 	db	69	;'E'
   570  002FE1  00                 	db	0
   571  002FE2                     STR_5:
   572  002FE2  46                 	db	70	;'F'
   573  002FE3  41                 	db	65	;'A'
   574  002FE4  49                 	db	73	;'I'
   575  002FE5  4C                 	db	76	;'L'
   576  002FE6  45                 	db	69	;'E'
   577  002FE7  44                 	db	68	;'D'
   578  002FE8  21                 	db	33
   579  002FE9  00                 	db	0
   580  002FEA                     STR_8:
   581  002FEA  57                 	db	87	;'W'
   582  002FEB  41                 	db	65	;'A'
   583  002FEC  49                 	db	73	;'I'
   584  002FED  54                 	db	84	;'T'
   585  002FEE  2E                 	db	46
   586  002FEF  2E                 	db	46
   587  002FF0  00                 	db	0
   588  002FF1                     STR_1:
   589  002FF1  4C                 	db	76	;'L'
   590  002FF2  4F                 	db	79	;'O'
   591  002FF3  47                 	db	71	;'G'
   592  002FF4  53                 	db	83	;'S'
   593  002FF5  3A                 	db	58	;':'
   594  002FF6  00                 	db	0
   595  002FF7                     STR_28:
   596  002FF7  20                 	db	32
   597  002FF8  43                 	db	67	;'C'
   598  002FF9  00                 	db	0
   599  002FFA                     STR_26:
   600  002FFA  4F                 	db	79	;'O'
   601  002FFB  4E                 	db	78	;'N'
   602  002FFC  00                 	db	0
   603  002FFD                     STR_3:
   604  002FFD  2A                 	db	42
   605  002FFE  00                 	db	0
   606  002FFF  00                 	db	0	; dummy byte at the end
   607  0000                     
   608                           ; #config settings
   609                           
   610                           	psect	cinit
   611  00161C                     __pcinit:
   612                           	callstack 0
   613  00161C                     start_initialization:
   614                           	callstack 0
   615  00161C                     __initialization:
   616                           	callstack 0
   617                           
   618                           ; Initialize objects allocated to BANK0 (26 bytes)
   619                           ; load TBLPTR registers with __pidataBANK0
   620  00161C  0E42               	movlw	low __pidataBANK0
   621  00161E  6EF6               	movwf	tblptrl,c
   622  001620  0E12               	movlw	high __pidataBANK0
   623  001622  6EF7               	movwf	tblptrh,c
   624  001624  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   625  001626  6EF8               	movwf	tblptru,c
   626  001628  EE00  F07C         	lfsr	0,__pdataBANK0
   627  00162C  EE10 F01A          	lfsr	1,26
   628  001630                     copy_data0:
   629  001630  0009               	tblrd		*+
   630  001632  CFF5 FFEE          	movff	tablat,postinc0
   631  001636  50E5               	movf	postdec1,w,c
   632  001638  50E1               	movf	fsr1l,w,c
   633  00163A  E1FA               	bnz	copy_data0
   634                           
   635                           ; Initialize objects allocated to COMRAM (1 bytes)
   636                           ; load TBLPTR registers with __pidataCOMRAM
   637  00163C  0E00               	movlw	low __pidataCOMRAM
   638  00163E  6EF6               	movwf	tblptrl,c
   639  001640  0E30               	movlw	high __pidataCOMRAM
   640  001642  6EF7               	movwf	tblptrh,c
   641  001644  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   642  001646  6EF8               	movwf	tblptru,c
   643  001648  0009               	tblrd		*+	;fetch initializer
   644  00164A  CFF5 F05D          	movff	tablat,__pdataCOMRAM
   645                           
   646                           ; Clear objects allocated to BANK0 (28 bytes)
   647  00164E  EE00  F060         	lfsr	0,__pbssBANK0
   648  001652  0E1C               	movlw	28
   649  001654                     clear_0:
   650  001654  6AEE               	clrf	postinc0,c
   651  001656  06E8               	decf	wreg,f,c
   652  001658  E1FD               	bnz	clear_0
   653                           
   654                           ; Clear objects allocated to COMRAM (24 bytes)
   655  00165A  EE00  F045         	lfsr	0,__pbssCOMRAM
   656  00165E  0E18               	movlw	24
   657  001660                     clear_1:
   658  001660  6AEE               	clrf	postinc0,c
   659  001662  06E8               	decf	wreg,f,c
   660  001664  E1FD               	bnz	clear_1
   661  001666                     end_of_initialization:
   662                           	callstack 0
   663  001666                     __end_of__initialization:
   664                           	callstack 0
   665  001666  0E00               	movlw	low (__Lmediumconst shr (0+16))
   666  001668  6EF8               	movwf	tblptru,c
   667  00166A  0100               	movlb	0
   668  00166C  EFA0  F00F         	goto	_main	;jump to C main() function
   669                           
   670                           	psect	bssCOMRAM
   671  000045                     __pbssCOMRAM:
   672                           	callstack 0
   673  000045                     set_time@clock_reg:
   674                           	callstack 0
   675  000045                     	ds	3
   676  000048                     get_time@clock_reg:
   677                           	callstack 0
   678  000048                     	ds	3
   679  00004B                     _log_total_saved:
   680                           	callstack 0
   681  00004B                     	ds	2
   682  00004D                     _log_iter:
   683                           	callstack 0
   684  00004D                     	ds	2
   685  00004F                     read_switches@key:
   686                           	callstack 0
   687  00004F                     	ds	1
   688  000050                     get_password@flag:
   689                           	callstack 0
   690  000050                     	ds	1
   691  000051                     _time:
   692                           	callstack 0
   693  000051                     	ds	9
   694  00005A                     _speed:
   695                           	callstack 0
   696  00005A                     	ds	3
   697                           
   698                           	psect	dataCOMRAM
   699  00005D                     __pdataCOMRAM:
   700                           	callstack 0
   701  00005D                     read_switches@once:
   702                           	callstack 0
   703  00005D                     	ds	1
   704                           
   705                           	psect	bssBANK0
   706  000060                     __pbssBANK0:
   707                           	callstack 0
   708  000060                     	ds	16
   709  000070                     	ds	4
   710  000074                     	ds	4
   711  000078                     	ds	4
   712                           
   713                           	psect	dataBANK0
   714  00007C                     __pdataBANK0:
   715                           	callstack 0
   716  00007C                     go_to_menu@F10376:
   717                           	callstack 0
   718  00007C                     	ds	10
   719  000086                     set_time@F10423:
   720                           	callstack 0
   721  000086                     	ds	9
   722  00008F                     main@F10408:
   723                           	callstack 0
   724  00008F                     	ds	7
   725                           
   726                           	psect	cstackCOMRAM
   727  000001                     __pcstackCOMRAM:
   728                           	callstack 0
   729  000001                     ?_read_adc:
   730                           	callstack 0
   731  000001                     ?___awdiv:
   732                           	callstack 0
   733  000001                     ?___lwdiv:
   734                           	callstack 0
   735  000001                     ?___lwmod:
   736                           	callstack 0
   737  000001                     ?___ftpack:
   738                           	callstack 0
   739  000001                     i2c_write@data:
   740                           	callstack 0
   741  000001                     read_switches@detection_type:
   742                           	callstack 0
   743  000001                     clcd_write@control_bit:
   744                           	callstack 0
   745  000001                     putch@byte:
   746                           	callstack 0
   747  000001                     ___lbdiv@divisor:
   748                           	callstack 0
   749  000001                     delay@ms:
   750                           	callstack 0
   751  000001                     ___awdiv@dividend:
   752                           	callstack 0
   753  000001                     ___lwdiv@dividend:
   754                           	callstack 0
   755  000001                     ___lwmod@dividend:
   756                           	callstack 0
   757  000001                     ___ftpack@arg:
   758                           	callstack 0
   759                           
   760                           ; 3 bytes @ 0x0
   761  000001                     	ds	1
   762  000002                     read_ds1307@address:
   763                           	callstack 0
   764  000002                     write_external_eeprom@data:
   765                           	callstack 0
   766  000002                     read_external_eeprom@address:
   767                           	callstack 0
   768  000002                     clcd_write@byte:
   769                           	callstack 0
   770  000002                     ___lbdiv@dividend:
   771                           	callstack 0
   772                           
   773                           ; 1 bytes @ 0x1
   774  000002                     	ds	1
   775  000003                     ??_delay:
   776  000003                     ??_read_adc:
   777  000003                     read_ds1307@data:
   778                           	callstack 0
   779  000003                     read_external_eeprom@data:
   780                           	callstack 0
   781  000003                     ___lbdiv@counter:
   782                           	callstack 0
   783  000003                     write_external_eeprom@wait:
   784                           	callstack 0
   785  000003                     clcd_print@data:
   786                           	callstack 0
   787  000003                     ___awdiv@divisor:
   788                           	callstack 0
   789  000003                     ___lwdiv@divisor:
   790                           	callstack 0
   791  000003                     ___lwmod@divisor:
   792                           	callstack 0
   793                           
   794                           ; 2 bytes @ 0x2
   795  000003                     	ds	1
   796  000004                     ___ftpack@exp:
   797                           	callstack 0
   798  000004                     ___lbdiv@quotient:
   799                           	callstack 0
   800  000004                     print_to_console@iter:
   801                           	callstack 0
   802  000004                     delay@wait:
   803                           	callstack 0
   804                           
   805                           ; 2 bytes @ 0x3
   806  000004                     	ds	1
   807  000005                     write_external_eeprom@address:
   808                           	callstack 0
   809  000005                     clcd_print@addr:
   810                           	callstack 0
   811  000005                     ___awdiv@counter:
   812                           	callstack 0
   813  000005                     ___ftpack@sign:
   814                           	callstack 0
   815  000005                     ___lbmod@divisor:
   816                           	callstack 0
   817  000005                     ___lwmod@counter:
   818                           	callstack 0
   819  000005                     read_adc@reg_val:
   820                           	callstack 0
   821  000005                     ___lwdiv@quotient:
   822                           	callstack 0
   823                           
   824                           ; 2 bytes @ 0x4
   825  000005                     	ds	1
   826  000006                     ??___ftpack:
   827  000006                     ___awdiv@sign:
   828                           	callstack 0
   829  000006                     ___lbmod@dividend:
   830                           	callstack 0
   831  000006                     delay@i:
   832                           	callstack 0
   833                           
   834                           ; 2 bytes @ 0x5
   835  000006                     	ds	1
   836  000007                     read_adc@channel:
   837                           	callstack 0
   838  000007                     ___lbmod@counter:
   839                           	callstack 0
   840  000007                     ___lwdiv@counter:
   841                           	callstack 0
   842  000007                     ___awdiv@quotient:
   843                           	callstack 0
   844                           
   845                           ; 2 bytes @ 0x6
   846  000007                     	ds	1
   847  000008                     ___lbmod@rem:
   848                           	callstack 0
   849                           
   850                           ; 1 bytes @ 0x7
   851  000008                     	ds	1
   852  000009                     ?___awmod:
   853                           	callstack 0
   854  000009                     ?___lwtoft:
   855                           	callstack 0
   856  000009                     clcd_putch@addr:
   857                           	callstack 0
   858  000009                     ___awmod@dividend:
   859                           	callstack 0
   860  000009                     ___lwtoft@c:
   861                           	callstack 0
   862                           
   863                           ; 2 bytes @ 0x8
   864  000009                     	ds	1
   865  00000A                     clcd_putch@data:
   866                           	callstack 0
   867                           
   868                           ; 1 bytes @ 0x9
   869  00000A                     	ds	1
   870  00000B                     ??_get_password:
   871  00000B                     print_log_to_clcd@iter:
   872                           	callstack 0
   873  00000B                     ___awmod@divisor:
   874                           	callstack 0
   875                           
   876                           ; 2 bytes @ 0xA
   877  00000B                     	ds	1
   878  00000C                     ?___ftdiv:
   879                           	callstack 0
   880  00000C                     print_log_to_clcd@LINE:
   881                           	callstack 0
   882  00000C                     ___ftdiv@f1:
   883                           	callstack 0
   884                           
   885                           ; 3 bytes @ 0xB
   886  00000C                     	ds	1
   887  00000D                     ??_view_log:
   888  00000D                     ___awmod@counter:
   889                           	callstack 0
   890  00000D                     get_password@entered_password:
   891                           	callstack 0
   892  00000D                     change_password@confirm:
   893                           	callstack 0
   894                           
   895                           ; 4 bytes @ 0xC
   896  00000D                     	ds	1
   897  00000E                     ___awmod@sign:
   898                           	callstack 0
   899  00000E                     view_log@string:
   900                           	callstack 0
   901                           
   902                           ; 16 bytes @ 0xD
   903  00000E                     	ds	1
   904  00000F                     write_ds1307@data:
   905                           	callstack 0
   906  00000F                     store_key_log@gear:
   907                           	callstack 0
   908  00000F                     ___ftdiv@f2:
   909                           	callstack 0
   910                           
   911                           ; 3 bytes @ 0xE
   912  00000F                     	ds	1
   913  000010                     write_ds1307@address:
   914                           	callstack 0
   915                           
   916                           ; 1 bytes @ 0xF
   917  000010                     	ds	1
   918  000011                     ??_set_time:
   919  000011                     init_ds1307@dummy:
   920                           	callstack 0
   921  000011                     get_password@delay:
   922                           	callstack 0
   923  000011                     change_password@wait:
   924                           	callstack 0
   925                           
   926                           ; 2 bytes @ 0x10
   927  000011                     	ds	1
   928  000012                     ??___ftdiv:
   929  000012                     
   930                           ; 1 bytes @ 0x11
   931  000012                     	ds	1
   932  000013                     get_password@wait:
   933                           	callstack 0
   934  000013                     set_time@blinker:
   935                           	callstack 0
   936  000013                     change_password@password:
   937                           	callstack 0
   938                           
   939                           ; 4 bytes @ 0x12
   940  000013                     	ds	2
   941  000015                     ___ftdiv@cntr:
   942                           	callstack 0
   943  000015                     get_password@wait_187:
   944                           	callstack 0
   945  000015                     set_time@time_buffer:
   946                           	callstack 0
   947                           
   948                           ; 9 bytes @ 0x14
   949  000015                     	ds	1
   950  000016                     ___ftdiv@f3:
   951                           	callstack 0
   952                           
   953                           ; 3 bytes @ 0x15
   954  000016                     	ds	1
   955  000017                     change_password@exit_flag:
   956                           	callstack 0
   957  000017                     get_password@count:
   958                           	callstack 0
   959                           
   960                           ; 2 bytes @ 0x16
   961  000017                     	ds	1
   962  000018                     change_password@j_210:
   963                           	callstack 0
   964                           
   965                           ; 2 bytes @ 0x17
   966  000018                     	ds	1
   967  000019                     get_password@key_pressed:
   968                           	callstack 0
   969  000019                     ___ftdiv@exp:
   970                           	callstack 0
   971                           
   972                           ; 1 bytes @ 0x18
   973  000019                     	ds	1
   974  00001A                     ___ftdiv@sign:
   975                           	callstack 0
   976  00001A                     change_password@j:
   977                           	callstack 0
   978  00001A                     get_password@c:
   979                           	callstack 0
   980                           
   981                           ; 4 bytes @ 0x19
   982  00001A                     	ds	1
   983  00001B                     ?___ftmul:
   984                           	callstack 0
   985  00001B                     ___ftmul@f1:
   986                           	callstack 0
   987                           
   988                           ; 3 bytes @ 0x1A
   989  00001B                     	ds	1
   990  00001C                     change_password@j_205:
   991                           	callstack 0
   992                           
   993                           ; 2 bytes @ 0x1B
   994  00001C                     	ds	2
   995  00001E                     change_password@i:
   996                           	callstack 0
   997  00001E                     set_time@exit_flag:
   998                           	callstack 0
   999  00001E                     view_log@exit_flag:
  1000                           	callstack 0
  1001  00001E                     get_password@total_attempts:
  1002                           	callstack 0
  1003  00001E                     ___ftmul@f2:
  1004                           	callstack 0
  1005                           
  1006                           ; 3 bytes @ 0x1D
  1007  00001E                     	ds	1
  1008  00001F                     set_time@dummy:
  1009                           	callstack 0
  1010                           
  1011                           ; 1 bytes @ 0x1E
  1012  00001F                     	ds	1
  1013  000020                     view_log@i:
  1014                           	callstack 0
  1015  000020                     get_password@p:
  1016                           	callstack 0
  1017  000020                     set_time@field_select:
  1018                           	callstack 0
  1019                           
  1020                           ; 2 bytes @ 0x1F
  1021  000020                     	ds	1
  1022  000021                     ??___ftmul:
  1023                           
  1024                           ; 1 bytes @ 0x20
  1025  000021                     	ds	1
  1026  000022                     get_password@j:
  1027                           	callstack 0
  1028  000022                     set_time@hour:
  1029                           	callstack 0
  1030                           
  1031                           ; 2 bytes @ 0x21
  1032  000022                     	ds	2
  1033  000024                     get_password@k:
  1034                           	callstack 0
  1035  000024                     ___ftmul@exp:
  1036                           	callstack 0
  1037  000024                     set_time@min:
  1038                           	callstack 0
  1039                           
  1040                           ; 2 bytes @ 0x23
  1041  000024                     	ds	1
  1042  000025                     get_password@i:
  1043                           	callstack 0
  1044  000025                     ___ftmul@f3_as_product:
  1045                           	callstack 0
  1046                           
  1047                           ; 3 bytes @ 0x24
  1048  000025                     	ds	1
  1049  000026                     set_time@seconds:
  1050                           	callstack 0
  1051                           
  1052                           ; 2 bytes @ 0x25
  1053  000026                     	ds	2
  1054  000028                     ??_go_to_menu:
  1055  000028                     ___ftmul@cntr:
  1056                           	callstack 0
  1057                           
  1058                           ; 1 bytes @ 0x27
  1059  000028                     	ds	1
  1060  000029                     ___ftmul@sign:
  1061                           	callstack 0
  1062                           
  1063                           ; 1 bytes @ 0x28
  1064  000029                     	ds	1
  1065  00002A                     ?___fttol:
  1066                           	callstack 0
  1067  00002A                     ___fttol@f1:
  1068                           	callstack 0
  1069  00002A                     go_to_menu@menu:
  1070                           	callstack 0
  1071                           
  1072                           ; 10 bytes @ 0x29
  1073  00002A                     	ds	4
  1074  00002E                     ??___fttol:
  1075                           
  1076                           ; 1 bytes @ 0x2D
  1077  00002E                     	ds	5
  1078  000033                     ___fttol@sign1:
  1079                           	callstack 0
  1080                           
  1081                           ; 1 bytes @ 0x32
  1082  000033                     	ds	1
  1083  000034                     go_to_menu@exit_flag:
  1084                           	callstack 0
  1085  000034                     ___fttol@lval:
  1086                           	callstack 0
  1087                           
  1088                           ; 4 bytes @ 0x33
  1089  000034                     	ds	2
  1090  000036                     go_to_menu@i_247:
  1091                           	callstack 0
  1092                           
  1093                           ; 2 bytes @ 0x35
  1094  000036                     	ds	2
  1095  000038                     ___fttol@exp1:
  1096                           	callstack 0
  1097  000038                     go_to_menu@pos:
  1098                           	callstack 0
  1099                           
  1100                           ; 2 bytes @ 0x37
  1101  000038                     	ds	1
  1102  000039                     get_speed@adc_reg_val:
  1103                           	callstack 0
  1104                           
  1105                           ; 2 bytes @ 0x38
  1106  000039                     	ds	1
  1107  00003A                     go_to_menu@i:
  1108                           	callstack 0
  1109                           
  1110                           ; 2 bytes @ 0x39
  1111  00003A                     	ds	2
  1112  00003C                     main@gear:
  1113                           	callstack 0
  1114                           
  1115                           ; 7 bytes @ 0x3B
  1116  00003C                     	ds	7
  1117  000043                     main@gear_iter:
  1118                           	callstack 0
  1119                           
  1120                           ; 2 bytes @ 0x42
  1121  000043                     	ds	2
  1122                           
  1123 ;;
  1124 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1125 ;;
  1126 ;; *************** function _main *****************
  1127 ;; Defined at:
  1128 ;;		line 39 in file "main.c"
  1129 ;; Parameters:    Size  Location     Type
  1130 ;;		None
  1131 ;; Auto vars:     Size  Location     Type
  1132 ;;  gear            7   59[COMRAM] unsigned char [7]
  1133 ;;  gear_iter       2   66[COMRAM] int 
  1134 ;; Return value:  Size  Location     Type
  1135 ;;                  1    wreg      void 
  1136 ;; Registers used:
  1137 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1138 ;; Tracked objects:
  1139 ;;		On entry : 0/0
  1140 ;;		On exit  : 0/0
  1141 ;;		Unchanged: 0/0
  1142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1143 ;;      Params:         0       0       0       0       0       0       0
  1144 ;;      Locals:         9       0       0       0       0       0       0
  1145 ;;      Temps:          0       0       0       0       0       0       0
  1146 ;;      Totals:         9       0       0       0       0       0       0
  1147 ;;Total ram usage:        9 bytes
  1148 ;; Hardware stack levels required when called: 7
  1149 ;; This function calls:
  1150 ;;		_clcd_print
  1151 ;;		_clcd_putch
  1152 ;;		_delay
  1153 ;;		_get_password
  1154 ;;		_get_speed
  1155 ;;		_get_time
  1156 ;;		_go_to_menu
  1157 ;;		_init_config
  1158 ;;		_read_switches
  1159 ;;		_store_key_log
  1160 ;; This function is called by:
  1161 ;;		Startup code after reset
  1162 ;; This function uses a non-reentrant model
  1163 ;;
  1164                           
  1165                           	psect	text0
  1166  001F40                     __ptext0:
  1167                           	callstack 0
  1168  001F40                     _main:
  1169                           	callstack 24
  1170                           
  1171                           ;main.c: 41: char gear[7] = {'N', 'R', '1', '2', '3', '4','5'};
  1172                           
  1173                           ;incstack = 0
  1174  001F40  EE20  F08F         	lfsr	2,main@F10408
  1175  001F44  EE10  F03C         	lfsr	1,main@gear
  1176  001F48  0E06               	movlw	6
  1177  001F4A                     u2641:
  1178  001F4A  CFDB FFE3          	movff	plusw2,plusw1
  1179  001F4E  06E8               	decf	wreg,f,c
  1180  001F50  E2FC               	bc	u2641
  1181                           
  1182                           ;main.c: 42: int gear_iter = 0;
  1183  001F52  0E00               	movlw	0
  1184  001F54  6E44               	movwf	(main@gear_iter+1)^0,c
  1185  001F56  0E00               	movlw	0
  1186  001F58  6E43               	movwf	main@gear_iter^0,c
  1187                           
  1188                           ;main.c: 43: init_config();
  1189  001F5A  ECA0  F00A         	call	_init_config	;wreg free
  1190                           
  1191                           ;main.c: 45: clcd_print("ON", (0xC0 + (9)));
  1192  001F5E  0EFA               	movlw	low STR_26
  1193  001F60  6E03               	movwf	clcd_print@data^0,c
  1194  001F62  0E2F               	movlw	high STR_26
  1195  001F64  6E04               	movwf	(clcd_print@data+1)^0,c
  1196  001F66  0EC9               	movlw	201
  1197  001F68  6E05               	movwf	clcd_print@addr^0,c
  1198  001F6A  EC66  F00B         	call	_clcd_print	;wreg free
  1199                           
  1200                           ;main.c: 46: get_time();
  1201  001F6E  EC38  F00B         	call	_get_time	;wreg free
  1202                           
  1203                           ;main.c: 47: get_speed();
  1204  001F72  EC4C  F00C         	call	_get_speed	;wreg free
  1205                           
  1206                           ;main.c: 48: store_key_log('O');
  1207  001F76  0E4F               	movlw	79
  1208  001F78  EC50  F010         	call	_store_key_log
  1209  001F7C                     l3978:
  1210                           
  1211                           ;main.c: 51: {;main.c: 52: clcd_print("TIME     EV  RPM", (0x80 + (0)));
  1212  001F7C  0ED7               	movlw	low STR_27
  1213  001F7E  6E03               	movwf	clcd_print@data^0,c
  1214  001F80  0E2E               	movlw	high STR_27
  1215  001F82  6E04               	movwf	(clcd_print@data+1)^0,c
  1216  001F84  0E80               	movlw	128
  1217  001F86  6E05               	movwf	clcd_print@addr^0,c
  1218  001F88  EC66  F00B         	call	_clcd_print	;wreg free
  1219                           
  1220                           ;main.c: 54: get_time();
  1221  001F8C  EC38  F00B         	call	_get_time	;wreg free
  1222                           
  1223                           ;main.c: 55: get_speed();
  1224  001F90  EC4C  F00C         	call	_get_speed	;wreg free
  1225                           
  1226                           ;main.c: 57: clcd_print(time, (0xC0 + (0)));
  1227  001F94  0E51               	movlw	low _time
  1228  001F96  6E03               	movwf	clcd_print@data^0,c
  1229  001F98  6A04               	clrf	(clcd_print@data+1)^0,c
  1230  001F9A  0EC0               	movlw	192
  1231  001F9C  6E05               	movwf	clcd_print@addr^0,c
  1232  001F9E  EC66  F00B         	call	_clcd_print	;wreg free
  1233                           
  1234                           ;main.c: 58: clcd_print(speed, (0xC0 + (14)));
  1235  001FA2  0E5A               	movlw	low _speed
  1236  001FA4  6E03               	movwf	clcd_print@data^0,c
  1237  001FA6  6A04               	clrf	(clcd_print@data+1)^0,c
  1238  001FA8  0ECE               	movlw	206
  1239  001FAA  6E05               	movwf	clcd_print@addr^0,c
  1240  001FAC  EC66  F00B         	call	_clcd_print	;wreg free
  1241                           
  1242                           ;main.c: 60: switch (read_switches(1))
  1243  001FB0  D067               	goto	l4026
  1244  001FB2                     l3988:
  1245                           
  1246                           ;main.c: 63: {;main.c: 64: store_key_log(gear[gear_iter]);
  1247  001FB2  5043               	movf	main@gear_iter^0,w,c
  1248  001FB4  0F3C               	addlw	low main@gear
  1249  001FB6  6ED9               	movwf	fsr2l,c
  1250  001FB8  6ADA               	clrf	fsr2h,c
  1251  001FBA  50DF               	movf	indf2,w,c
  1252  001FBC  EC50  F010         	call	_store_key_log
  1253                           
  1254                           ;main.c: 66: clcd_putch('G', (0xC0 + (9)));
  1255  001FC0  0EC9               	movlw	201
  1256  001FC2  6E09               	movwf	clcd_putch@addr^0,c
  1257  001FC4  0E47               	movlw	71
  1258  001FC6  EC15  F009         	call	_clcd_putch
  1259                           
  1260                           ;main.c: 67: clcd_putch(gear[gear_iter], (0xC0 + (10)));
  1261  001FCA  0ECA               	movlw	202
  1262  001FCC  6E09               	movwf	clcd_putch@addr^0,c
  1263  001FCE  5043               	movf	main@gear_iter^0,w,c
  1264  001FD0  0F3C               	addlw	low main@gear
  1265  001FD2  6ED9               	movwf	fsr2l,c
  1266  001FD4  6ADA               	clrf	fsr2h,c
  1267  001FD6  50DF               	movf	indf2,w,c
  1268  001FD8  EC15  F009         	call	_clcd_putch
  1269                           
  1270                           ;main.c: 68: if (++gear_iter > 6)
  1271  001FDC  4A43               	infsnz	main@gear_iter^0,f,c
  1272  001FDE  2A44               	incf	(main@gear_iter+1)^0,f,c
  1273  001FE0  BE44               	btfsc	(main@gear_iter+1)^0,7,c
  1274  001FE2  D7CC               	goto	l3978
  1275  001FE4  5044               	movf	(main@gear_iter+1)^0,w,c
  1276  001FE6  E104               	bnz	u2650
  1277  001FE8  0E07               	movlw	7
  1278  001FEA  5C43               	subwf	main@gear_iter^0,w,c
  1279  001FEC  A0D8               	btfss	status,0,c
  1280  001FEE  D7C6               	goto	l3978
  1281  001FF0                     u2650:
  1282                           
  1283                           ;main.c: 69: gear_iter = 6;
  1284  001FF0  0E00               	movlw	0
  1285  001FF2  6E44               	movwf	(main@gear_iter+1)^0,c
  1286  001FF4  0E06               	movlw	6
  1287  001FF6  D01D               	goto	L1
  1288  001FF8                     l3998:
  1289                           
  1290                           ;main.c: 73: {;main.c: 74: store_key_log(gear[gear_iter]);
  1291  001FF8  5043               	movf	main@gear_iter^0,w,c
  1292  001FFA  0F3C               	addlw	low main@gear
  1293  001FFC  6ED9               	movwf	fsr2l,c
  1294  001FFE  6ADA               	clrf	fsr2h,c
  1295  002000  50DF               	movf	indf2,w,c
  1296  002002  EC50  F010         	call	_store_key_log
  1297                           
  1298                           ;main.c: 76: clcd_putch('G', (0xC0 + (9)));
  1299  002006  0EC9               	movlw	201
  1300  002008  6E09               	movwf	clcd_putch@addr^0,c
  1301  00200A  0E47               	movlw	71
  1302  00200C  EC15  F009         	call	_clcd_putch
  1303                           
  1304                           ;main.c: 77: clcd_putch(gear[gear_iter], (0xC0 + (10)));
  1305  002010  0ECA               	movlw	202
  1306  002012  6E09               	movwf	clcd_putch@addr^0,c
  1307  002014  5043               	movf	main@gear_iter^0,w,c
  1308  002016  0F3C               	addlw	low main@gear
  1309  002018  6ED9               	movwf	fsr2l,c
  1310  00201A  6ADA               	clrf	fsr2h,c
  1311  00201C  50DF               	movf	indf2,w,c
  1312  00201E  EC15  F009         	call	_clcd_putch
  1313                           
  1314                           ;main.c: 78: if (--gear_iter < 0)
  1315  002022  0643               	decf	main@gear_iter^0,f,c
  1316  002024  A0D8               	btfss	status,0,c
  1317  002026  0644               	decf	(main@gear_iter+1)^0,f,c
  1318  002028  AE44               	btfss	(main@gear_iter+1)^0,7,c
  1319  00202A  D7A8               	goto	l3978
  1320                           
  1321                           ;main.c: 79: gear_iter = 0;
  1322  00202C  0E00               	movlw	0
  1323  00202E  6E44               	movwf	(main@gear_iter+1)^0,c
  1324  002030  0E00               	movlw	0
  1325  002032                     L1:
  1326  002032  6E43               	movwf	main@gear_iter^0,c
  1327  002034  D7A3               	goto	l3978
  1328  002036                     l4008:
  1329                           
  1330                           ;main.c: 83: {;main.c: 84: store_key_log('C');
  1331  002036  0E43               	movlw	67
  1332  002038  EC50  F010         	call	_store_key_log
  1333                           
  1334                           ;main.c: 85: clcd_print(" C", (0xC0 + (9)));
  1335  00203C  0EF7               	movlw	low STR_28
  1336  00203E  6E03               	movwf	clcd_print@data^0,c
  1337  002040  0E2F               	movlw	high STR_28
  1338  002042  6E04               	movwf	(clcd_print@data+1)^0,c
  1339  002044  0EC9               	movlw	201
  1340  002046  6E05               	movwf	clcd_print@addr^0,c
  1341  002048  EC66  F00B         	call	_clcd_print	;wreg free
  1342                           
  1343                           ;main.c: 86: };main.c: 87: break;
  1344  00204C  D797               	goto	l3978
  1345  00204E                     l4012:
  1346                           
  1347                           ;main.c: 89: {;main.c: 90: delay(2);
  1348  00204E  0E00               	movlw	0
  1349  002050  6E02               	movwf	(delay@ms+1)^0,c
  1350  002052  0E02               	movlw	2
  1351  002054  6E01               	movwf	delay@ms^0,c
  1352  002056  EC23  F00A         	call	_delay	;wreg free
  1353                           
  1354                           ;main.c: 92: store_key_log('P');
  1355  00205A  0E50               	movlw	80
  1356  00205C  EC50  F010         	call	_store_key_log
  1357                           
  1358                           ;main.c: 93: if (get_password() == 0)
  1359  002060  EC54  F012         	call	_get_password	;wreg free
  1360  002064  0900               	iorlw	0
  1361  002066  A4D8               	btfss	status,2,c
  1362  002068  D003               	goto	l4020
  1363                           
  1364                           ;main.c: 94: {;main.c: 95: go_to_menu();
  1365  00206A  ECBE  F013         	call	_go_to_menu	;wreg free
  1366                           
  1367                           ;main.c: 96: }
  1368  00206E  D786               	goto	l3978
  1369  002070                     l4020:
  1370                           
  1371                           ;main.c: 97: else if(get_password()==1)
  1372  002070  EC54  F012         	call	_get_password	;wreg free
  1373  002074  06E8               	decf	wreg,f,c
  1374  002076  A4D8               	btfss	status,2,c
  1375  002078  D781               	goto	l3978
  1376                           
  1377                           ;main.c: 98: {;main.c: 99: get_password();
  1378  00207A  EC54  F012         	call	_get_password	;wreg free
  1379  00207E  D77E               	goto	l3978
  1380  002080                     l4026:
  1381  002080  0E01               	movlw	1
  1382  002082  EC41  F00A         	call	_read_switches
  1383                           
  1384                           ; Switch size 1, requested type "simple"
  1385                           ; Number of cases is 4, Range of values is 1 to 4
  1386                           ; switch strategies available:
  1387                           ; Name         Instructions Cycles
  1388                           ; simple_byte           13     7 (average)
  1389                           ;	Chosen strategy is simple_byte
  1390  002086  0A01               	xorlw	1	; case 1
  1391  002088  B4D8               	btfsc	status,2,c
  1392  00208A  D7D5               	goto	l4008
  1393  00208C  0A03               	xorlw	3	; case 2
  1394  00208E  B4D8               	btfsc	status,2,c
  1395  002090  D790               	goto	l3988
  1396  002092  0A01               	xorlw	1	; case 3
  1397  002094  B4D8               	btfsc	status,2,c
  1398  002096  D7B0               	goto	l3998
  1399  002098  0A07               	xorlw	7	; case 4
  1400  00209A  B4D8               	btfsc	status,2,c
  1401  00209C  D7D8               	goto	l4012
  1402  00209E  D76E               	goto	l3978
  1403  0020A0                     __end_of_main:
  1404                           	callstack 0
  1405                           
  1406 ;; *************** function _init_config *****************
  1407 ;; Defined at:
  1408 ;;		line 19 in file "main.c"
  1409 ;; Parameters:    Size  Location     Type
  1410 ;;		None
  1411 ;; Auto vars:     Size  Location     Type
  1412 ;;		None
  1413 ;; Return value:  Size  Location     Type
  1414 ;;                  1    wreg      void 
  1415 ;; Registers used:
  1416 ;;		wreg, status,2, status,0, cstack
  1417 ;; Tracked objects:
  1418 ;;		On entry : 0/0
  1419 ;;		On exit  : 0/0
  1420 ;;		Unchanged: 0/0
  1421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1422 ;;      Params:         0       0       0       0       0       0       0
  1423 ;;      Locals:         0       0       0       0       0       0       0
  1424 ;;      Temps:          0       0       0       0       0       0       0
  1425 ;;      Totals:         0       0       0       0       0       0       0
  1426 ;;Total ram usage:        0 bytes
  1427 ;; Hardware stack levels used: 1
  1428 ;; Hardware stack levels required when called: 5
  1429 ;; This function calls:
  1430 ;;		_init_adc
  1431 ;;		_init_clcd
  1432 ;;		_init_ds1307
  1433 ;;		_init_i2c
  1434 ;;		_init_matrix_keypad
  1435 ;;		_init_uart
  1436 ;;		_write_external_eeprom
  1437 ;; This function is called by:
  1438 ;;		_main
  1439 ;; This function uses a non-reentrant model
  1440 ;;
  1441                           
  1442                           	psect	text1
  1443  001540                     __ptext1:
  1444                           	callstack 0
  1445  001540                     _init_config:
  1446                           	callstack 25
  1447                           
  1448                           ;main.c: 21: init_clcd();
  1449                           
  1450                           ;incstack = 0
  1451  001540  ECCD  F009         	call	_init_clcd	;wreg free
  1452                           
  1453                           ;main.c: 22: init_matrix_keypad();
  1454  001544  EC01  F009         	call	_init_matrix_keypad	;wreg free
  1455                           
  1456                           ;main.c: 23: init_adc();
  1457  001548  EC3D  F009         	call	_init_adc	;wreg free
  1458                           
  1459                           ;main.c: 24: init_i2c();
  1460  00154C  EC0A  F009         	call	_init_i2c	;wreg free
  1461                           
  1462                           ;main.c: 25: init_ds1307();
  1463  001550  ECC1  F00A         	call	_init_ds1307	;wreg free
  1464                           
  1465                           ;main.c: 26: init_uart();
  1466  001554  EC60  F00A         	call	_init_uart	;wreg free
  1467                           
  1468                           ;main.c: 29: write_external_eeprom(100, 0);
  1469  001558  0E00               	movlw	0
  1470  00155A  6E02               	movwf	write_external_eeprom@data^0,c
  1471  00155C  0E64               	movlw	100
  1472  00155E  ECB2  F009         	call	_write_external_eeprom
  1473                           
  1474                           ;main.c: 30: write_external_eeprom(101, 0);
  1475  001562  0E00               	movlw	0
  1476  001564  6E02               	movwf	write_external_eeprom@data^0,c
  1477  001566  0E65               	movlw	101
  1478  001568  ECB2  F009         	call	_write_external_eeprom
  1479                           
  1480                           ;main.c: 31: write_external_eeprom(102, 0);
  1481  00156C  0E00               	movlw	0
  1482  00156E  6E02               	movwf	write_external_eeprom@data^0,c
  1483  001570  0E66               	movlw	102
  1484  001572  ECB2  F009         	call	_write_external_eeprom
  1485                           
  1486                           ;main.c: 32: write_external_eeprom(103, 0);
  1487  001576  0E00               	movlw	0
  1488  001578  6E02               	movwf	write_external_eeprom@data^0,c
  1489  00157A  0E67               	movlw	103
  1490  00157C  ECB2  F009         	call	_write_external_eeprom
  1491  001580  0012               	return		;funcret
  1492  001582                     __end_of_init_config:
  1493                           	callstack 0
  1494                           
  1495 ;; *************** function _init_uart *****************
  1496 ;; Defined at:
  1497 ;;		line 12 in file "uart.c"
  1498 ;; Parameters:    Size  Location     Type
  1499 ;;		None
  1500 ;; Auto vars:     Size  Location     Type
  1501 ;;		None
  1502 ;; Return value:  Size  Location     Type
  1503 ;;                  1    wreg      void 
  1504 ;; Registers used:
  1505 ;;		wreg, status,2
  1506 ;; Tracked objects:
  1507 ;;		On entry : 0/0
  1508 ;;		On exit  : 0/0
  1509 ;;		Unchanged: 0/0
  1510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1511 ;;      Params:         0       0       0       0       0       0       0
  1512 ;;      Locals:         0       0       0       0       0       0       0
  1513 ;;      Temps:          0       0       0       0       0       0       0
  1514 ;;      Totals:         0       0       0       0       0       0       0
  1515 ;;Total ram usage:        0 bytes
  1516 ;; Hardware stack levels used: 1
  1517 ;; This function calls:
  1518 ;;		Nothing
  1519 ;; This function is called by:
  1520 ;;		_init_config
  1521 ;; This function uses a non-reentrant model
  1522 ;;
  1523                           
  1524                           	psect	text2
  1525  0014C0                     __ptext2:
  1526                           	callstack 0
  1527  0014C0                     _init_uart:
  1528                           	callstack 29
  1529                           
  1530                           ;uart.c: 15: TRISC7 = 1;
  1531                           
  1532                           ;incstack = 0
  1533  0014C0  8E94               	bsf	3988,7,c	;volatile
  1534                           
  1535                           ;uart.c: 16: TRISC6 = 0;
  1536  0014C2  9C94               	bcf	3988,6,c	;volatile
  1537                           
  1538                           ;uart.c: 21: CSRC = 0;
  1539  0014C4  9EAC               	bcf	4012,7,c	;volatile
  1540                           
  1541                           ;uart.c: 23: TX9 = 0;
  1542  0014C6  9CAC               	bcf	4012,6,c	;volatile
  1543                           
  1544                           ;uart.c: 25: TXEN = 1;
  1545  0014C8  8AAC               	bsf	4012,5,c	;volatile
  1546                           
  1547                           ;uart.c: 28: SYNC = 0;
  1548  0014CA  98AC               	bcf	4012,4,c	;volatile
  1549                           
  1550                           ;uart.c: 30: SENDB = 0;
  1551  0014CC  96AC               	bcf	4012,3,c	;volatile
  1552                           
  1553                           ;uart.c: 33: BRGH = 1;
  1554  0014CE  84AC               	bsf	4012,2,c	;volatile
  1555                           
  1556                           ;uart.c: 35: TRMT = 0;
  1557  0014D0  92AC               	bcf	4012,1,c	;volatile
  1558                           
  1559                           ;uart.c: 37: TX9D = 0;
  1560  0014D2  90AC               	bcf	4012,0,c	;volatile
  1561                           
  1562                           ;uart.c: 42: SPEN = 1;
  1563  0014D4  8EAB               	bsf	4011,7,c	;volatile
  1564                           
  1565                           ;uart.c: 44: RX9 = 0;
  1566  0014D6  9CAB               	bcf	4011,6,c	;volatile
  1567                           
  1568                           ;uart.c: 46: SREN = 0;
  1569  0014D8  9AAB               	bcf	4011,5,c	;volatile
  1570                           
  1571                           ;uart.c: 48: CREN = 1;
  1572  0014DA  88AB               	bsf	4011,4,c	;volatile
  1573                           
  1574                           ;uart.c: 50: ADDEN = 0;
  1575  0014DC  96AB               	bcf	4011,3,c	;volatile
  1576                           
  1577                           ;uart.c: 52: FERR = 0;
  1578  0014DE  94AB               	bcf	4011,2,c	;volatile
  1579                           
  1580                           ;uart.c: 54: OERR = 0;
  1581  0014E0  92AB               	bcf	4011,1,c	;volatile
  1582                           
  1583                           ;uart.c: 56: RX9D = 0;
  1584  0014E2  90AB               	bcf	4011,0,c	;volatile
  1585                           
  1586                           ;uart.c: 61: ABDOVF = 0;
  1587  0014E4  9EB8               	bcf	4024,7,c	;volatile
  1588                           
  1589                           ;uart.c: 63: RCIDL = 1;
  1590  0014E6  8CB8               	bsf	4024,6,c	;volatile
  1591                           
  1592                           ;uart.c: 65: SCKP = 0;
  1593  0014E8  98B8               	bcf	4024,4,c	;volatile
  1594                           
  1595                           ;uart.c: 67: BRG16 = 0;
  1596  0014EA  96B8               	bcf	4024,3,c	;volatile
  1597                           
  1598                           ;uart.c: 69: WUE = 0;
  1599  0014EC  92B8               	bcf	4024,1,c	;volatile
  1600                           
  1601                           ;uart.c: 71: ABDEN = 0;
  1602  0014EE  90B8               	bcf	4024,0,c	;volatile
  1603                           
  1604                           ;uart.c: 75: SPBRG = 129;
  1605  0014F0  0E81               	movlw	129
  1606  0014F2  6EAF               	movwf	175,c	;volatile
  1607                           
  1608                           ;uart.c: 78: TXIE = 1;
  1609  0014F4  889D               	bsf	3997,4,c	;volatile
  1610                           
  1611                           ;uart.c: 80: TXIF = 0;
  1612  0014F6  989E               	bcf	3998,4,c	;volatile
  1613                           
  1614                           ;uart.c: 82: RCIE = 1;
  1615  0014F8  8A9D               	bsf	3997,5,c	;volatile
  1616                           
  1617                           ;uart.c: 84: RCIF = 0;
  1618  0014FA  9A9E               	bcf	3998,5,c	;volatile
  1619  0014FC  0012               	return		;funcret
  1620  0014FE                     __end_of_init_uart:
  1621                           	callstack 0
  1622                           
  1623 ;; *************** function _init_matrix_keypad *****************
  1624 ;; Defined at:
  1625 ;;		line 12 in file "matrix_keypad.c"
  1626 ;; Parameters:    Size  Location     Type
  1627 ;;		None
  1628 ;; Auto vars:     Size  Location     Type
  1629 ;;		None
  1630 ;; Return value:  Size  Location     Type
  1631 ;;                  1    wreg      void 
  1632 ;; Registers used:
  1633 ;;		wreg, status,2, status,0
  1634 ;; Tracked objects:
  1635 ;;		On entry : 0/0
  1636 ;;		On exit  : 0/0
  1637 ;;		Unchanged: 0/0
  1638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1639 ;;      Params:         0       0       0       0       0       0       0
  1640 ;;      Locals:         0       0       0       0       0       0       0
  1641 ;;      Temps:          0       0       0       0       0       0       0
  1642 ;;      Totals:         0       0       0       0       0       0       0
  1643 ;;Total ram usage:        0 bytes
  1644 ;; Hardware stack levels used: 1
  1645 ;; This function calls:
  1646 ;;		Nothing
  1647 ;; This function is called by:
  1648 ;;		_init_config
  1649 ;; This function uses a non-reentrant model
  1650 ;;
  1651                           
  1652                           	psect	text3
  1653  001202                     __ptext3:
  1654                           	callstack 0
  1655  001202                     _init_matrix_keypad:
  1656                           	callstack 29
  1657                           
  1658                           ;matrix_keypad.c: 15: ADCON1 = 0x0F;
  1659                           
  1660                           ;incstack = 0
  1661  001202  0E0F               	movlw	15
  1662  001204  6EC1               	movwf	193,c	;volatile
  1663                           
  1664                           ;matrix_keypad.c: 18: TRISB = 0x1E;
  1665  001206  0E1E               	movlw	30
  1666  001208  6E93               	movwf	147,c	;volatile
  1667                           
  1668                           ;matrix_keypad.c: 21: RBPU = 0;
  1669  00120A  9EF1               	bcf	4081,7,c	;volatile
  1670                           
  1671                           ;matrix_keypad.c: 23: PORTB = PORTB | 0xE0;
  1672  00120C  5081               	movf	129,w,c	;volatile
  1673  00120E  09E0               	iorlw	224
  1674  001210  6E81               	movwf	129,c	;volatile
  1675  001212  0012               	return		;funcret
  1676  001214                     __end_of_init_matrix_keypad:
  1677                           	callstack 0
  1678                           
  1679 ;; *************** function _init_i2c *****************
  1680 ;; Defined at:
  1681 ;;		line 11 in file "i2c.c"
  1682 ;; Parameters:    Size  Location     Type
  1683 ;;		None
  1684 ;; Auto vars:     Size  Location     Type
  1685 ;;		None
  1686 ;; Return value:  Size  Location     Type
  1687 ;;                  1    wreg      void 
  1688 ;; Registers used:
  1689 ;;		wreg, status,2
  1690 ;; Tracked objects:
  1691 ;;		On entry : 0/0
  1692 ;;		On exit  : 0/0
  1693 ;;		Unchanged: 0/0
  1694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1695 ;;      Params:         0       0       0       0       0       0       0
  1696 ;;      Locals:         0       0       0       0       0       0       0
  1697 ;;      Temps:          0       0       0       0       0       0       0
  1698 ;;      Totals:         0       0       0       0       0       0       0
  1699 ;;Total ram usage:        0 bytes
  1700 ;; Hardware stack levels used: 1
  1701 ;; This function calls:
  1702 ;;		Nothing
  1703 ;; This function is called by:
  1704 ;;		_init_config
  1705 ;; This function uses a non-reentrant model
  1706 ;;
  1707                           
  1708                           	psect	text4
  1709  001214                     __ptext4:
  1710                           	callstack 0
  1711  001214                     _init_i2c:
  1712                           	callstack 29
  1713                           
  1714                           ;i2c.c: 14: TRISC3 = 1;
  1715                           
  1716                           ;incstack = 0
  1717  001214  8694               	bsf	3988,3,c	;volatile
  1718                           
  1719                           ;i2c.c: 15: TRISC4 = 1;
  1720  001216  8894               	bsf	3988,4,c	;volatile
  1721                           
  1722                           ;i2c.c: 17: SSPCON1 = 0x28;
  1723  001218  0E28               	movlw	40
  1724  00121A  6EC6               	movwf	198,c	;volatile
  1725                           
  1726                           ;i2c.c: 19: SSPADD = 0x31;
  1727  00121C  0E31               	movlw	49
  1728  00121E  6EC8               	movwf	200,c	;volatile
  1729                           
  1730                           ;i2c.c: 21: CKE = 0;
  1731  001220  9CC7               	bcf	4039,6,c	;volatile
  1732                           
  1733                           ;i2c.c: 23: SMP = 1;
  1734  001222  8EC7               	bsf	4039,7,c	;volatile
  1735                           
  1736                           ;i2c.c: 25: SSPIF = 0;
  1737  001224  969E               	bcf	3998,3,c	;volatile
  1738                           
  1739                           ;i2c.c: 27: BCLIF = 0;
  1740  001226  96A1               	bcf	4001,3,c	;volatile
  1741  001228  0012               	return		;funcret
  1742  00122A                     __end_of_init_i2c:
  1743                           	callstack 0
  1744                           
  1745 ;; *************** function _init_ds1307 *****************
  1746 ;; Defined at:
  1747 ;;		line 20 in file "ds1307.c"
  1748 ;; Parameters:    Size  Location     Type
  1749 ;;		None
  1750 ;; Auto vars:     Size  Location     Type
  1751 ;;  dummy           1   16[COMRAM] unsigned char 
  1752 ;; Return value:  Size  Location     Type
  1753 ;;                  1    wreg      void 
  1754 ;; Registers used:
  1755 ;;		wreg, status,2, status,0, cstack
  1756 ;; Tracked objects:
  1757 ;;		On entry : 0/0
  1758 ;;		On exit  : 0/0
  1759 ;;		Unchanged: 0/0
  1760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1761 ;;      Params:         0       0       0       0       0       0       0
  1762 ;;      Locals:         1       0       0       0       0       0       0
  1763 ;;      Temps:          0       0       0       0       0       0       0
  1764 ;;      Totals:         1       0       0       0       0       0       0
  1765 ;;Total ram usage:        1 bytes
  1766 ;; Hardware stack levels used: 1
  1767 ;; Hardware stack levels required when called: 4
  1768 ;; This function calls:
  1769 ;;		_read_ds1307
  1770 ;;		_write_ds1307
  1771 ;; This function is called by:
  1772 ;;		_init_config
  1773 ;; This function uses a non-reentrant model
  1774 ;;
  1775                           
  1776                           	psect	text5
  1777  001582                     __ptext5:
  1778                           	callstack 0
  1779  001582                     _init_ds1307:
  1780                           	callstack 25
  1781                           
  1782                           ;ds1307.c: 22: unsigned char dummy;;ds1307.c: 25: dummy = read_ds1307(0x00);
  1783                           
  1784                           ;incstack = 0
  1785  001582  0E00               	movlw	0
  1786  001584  EC9D  F009         	call	_read_ds1307
  1787  001588  6E11               	movwf	init_ds1307@dummy^0,c
  1788                           
  1789                           ;ds1307.c: 26: write_ds1307(0x00, dummy | 0x80);
  1790  00158A  5011               	movf	init_ds1307@dummy^0,w,c
  1791  00158C  0980               	iorlw	128
  1792  00158E  6E0F               	movwf	write_ds1307@data^0,c
  1793  001590  0E00               	movlw	0
  1794  001592  EC2E  F009         	call	_write_ds1307
  1795                           
  1796                           ;ds1307.c: 34: dummy = read_ds1307(0x02);
  1797  001596  0E02               	movlw	2
  1798  001598  EC9D  F009         	call	_read_ds1307
  1799  00159C  6E11               	movwf	init_ds1307@dummy^0,c
  1800                           
  1801                           ;ds1307.c: 35: write_ds1307(0x02, dummy & 0xBF);
  1802  00159E  5011               	movf	init_ds1307@dummy^0,w,c
  1803  0015A0  0BBF               	andlw	191
  1804  0015A2  6E0F               	movwf	write_ds1307@data^0,c
  1805  0015A4  0E02               	movlw	2
  1806  0015A6  EC2E  F009         	call	_write_ds1307
  1807                           
  1808                           ;ds1307.c: 50: write_ds1307(0x07, 0x93);
  1809  0015AA  0E93               	movlw	147
  1810  0015AC  6E0F               	movwf	write_ds1307@data^0,c
  1811  0015AE  0E07               	movlw	7
  1812  0015B0  EC2E  F009         	call	_write_ds1307
  1813                           
  1814                           ;ds1307.c: 53: dummy = read_ds1307(0x00);
  1815  0015B4  0E00               	movlw	0
  1816  0015B6  EC9D  F009         	call	_read_ds1307
  1817  0015BA  6E11               	movwf	init_ds1307@dummy^0,c
  1818                           
  1819                           ;ds1307.c: 54: write_ds1307(0x00, dummy & 0x7F);
  1820  0015BC  5011               	movf	init_ds1307@dummy^0,w,c
  1821  0015BE  0B7F               	andlw	127
  1822  0015C0  6E0F               	movwf	write_ds1307@data^0,c
  1823  0015C2  0E00               	movlw	0
  1824  0015C4  EC2E  F009         	call	_write_ds1307
  1825  0015C8  0012               	return		;funcret
  1826  0015CA                     __end_of_init_ds1307:
  1827                           	callstack 0
  1828                           
  1829 ;; *************** function _init_clcd *****************
  1830 ;; Defined at:
  1831 ;;		line 35 in file "clcd.c"
  1832 ;; Parameters:    Size  Location     Type
  1833 ;;		None
  1834 ;; Auto vars:     Size  Location     Type
  1835 ;;		None
  1836 ;; Return value:  Size  Location     Type
  1837 ;;                  1    wreg      void 
  1838 ;; Registers used:
  1839 ;;		wreg, status,2, status,0, cstack
  1840 ;; Tracked objects:
  1841 ;;		On entry : 0/0
  1842 ;;		On exit  : 0/0
  1843 ;;		Unchanged: 0/0
  1844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1845 ;;      Params:         0       0       0       0       0       0       0
  1846 ;;      Locals:         0       0       0       0       0       0       0
  1847 ;;      Temps:          0       0       0       0       0       0       0
  1848 ;;      Totals:         0       0       0       0       0       0       0
  1849 ;;Total ram usage:        0 bytes
  1850 ;; Hardware stack levels used: 1
  1851 ;; Hardware stack levels required when called: 1
  1852 ;; This function calls:
  1853 ;;		_clcd_write
  1854 ;; This function is called by:
  1855 ;;		_init_config
  1856 ;; This function uses a non-reentrant model
  1857 ;;
  1858                           
  1859                           	psect	text6
  1860  00139A                     __ptext6:
  1861                           	callstack 0
  1862  00139A                     _init_clcd:
  1863                           	callstack 28
  1864                           
  1865                           ;clcd.c: 38: TRISD = 0x00;
  1866                           
  1867                           ;incstack = 0
  1868  00139A  0E00               	movlw	0
  1869  00139C  6E95               	movwf	149,c	;volatile
  1870                           
  1871                           ;clcd.c: 40: TRISC = TRISC & 0xF8;
  1872  00139E  5094               	movf	148,w,c	;volatile
  1873  0013A0  0BF8               	andlw	248
  1874  0013A2  6E94               	movwf	148,c	;volatile
  1875                           
  1876                           ;clcd.c: 42: PORTCbits.RC0 = 0;
  1877  0013A4  9082               	bcf	130,0,c	;volatile
  1878                           
  1879                           ;clcd.c: 44: clcd_write(0x02, 0);
  1880  0013A6  0E00               	movlw	0
  1881  0013A8  6E01               	movwf	clcd_write@control_bit^0,c
  1882  0013AA  0E02               	movlw	2
  1883  0013AC  EC5F  F009         	call	_clcd_write
  1884                           
  1885                           ;clcd.c: 45: clcd_write(0x38, 0);
  1886  0013B0  0E00               	movlw	0
  1887  0013B2  6E01               	movwf	clcd_write@control_bit^0,c
  1888  0013B4  0E38               	movlw	56
  1889  0013B6  EC5F  F009         	call	_clcd_write
  1890                           
  1891                           ;clcd.c: 46: clcd_write(0x0C, 0);
  1892  0013BA  0E00               	movlw	0
  1893  0013BC  6E01               	movwf	clcd_write@control_bit^0,c
  1894  0013BE  0E0C               	movlw	12
  1895  0013C0  EC5F  F009         	call	_clcd_write
  1896                           
  1897                           ;clcd.c: 47: clcd_write(0x01, 0);
  1898  0013C4  0E00               	movlw	0
  1899  0013C6  6E01               	movwf	clcd_write@control_bit^0,c
  1900  0013C8  0E01               	movlw	1
  1901  0013CA  EC5F  F009         	call	_clcd_write
  1902  0013CE  0012               	return		;funcret
  1903  0013D0                     __end_of_init_clcd:
  1904                           	callstack 0
  1905                           
  1906 ;; *************** function _init_adc *****************
  1907 ;; Defined at:
  1908 ;;		line 12 in file "adc.c"
  1909 ;; Parameters:    Size  Location     Type
  1910 ;;		None
  1911 ;; Auto vars:     Size  Location     Type
  1912 ;;		None
  1913 ;; Return value:  Size  Location     Type
  1914 ;;                  1    wreg      void 
  1915 ;; Registers used:
  1916 ;;		wreg, status,2
  1917 ;; Tracked objects:
  1918 ;;		On entry : 0/0
  1919 ;;		On exit  : 0/0
  1920 ;;		Unchanged: 0/0
  1921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1922 ;;      Params:         0       0       0       0       0       0       0
  1923 ;;      Locals:         0       0       0       0       0       0       0
  1924 ;;      Temps:          0       0       0       0       0       0       0
  1925 ;;      Totals:         0       0       0       0       0       0       0
  1926 ;;Total ram usage:        0 bytes
  1927 ;; Hardware stack levels used: 1
  1928 ;; This function calls:
  1929 ;;		Nothing
  1930 ;; This function is called by:
  1931 ;;		_init_config
  1932 ;; This function uses a non-reentrant model
  1933 ;;
  1934                           
  1935                           	psect	text7
  1936  00127A                     __ptext7:
  1937                           	callstack 0
  1938  00127A                     _init_adc:
  1939                           	callstack 29
  1940                           
  1941                           ;adc.c: 15: ADFM = 1;
  1942                           
  1943                           ;incstack = 0
  1944  00127A  8EC0               	bsf	4032,7,c	;volatile
  1945                           
  1946                           ;adc.c: 21: ACQT2 = 1;
  1947  00127C  8AC0               	bsf	4032,5,c	;volatile
  1948                           
  1949                           ;adc.c: 22: ACQT1 = 0;
  1950  00127E  98C0               	bcf	4032,4,c	;volatile
  1951                           
  1952                           ;adc.c: 23: ACQT0 = 0;
  1953  001280  96C0               	bcf	4032,3,c	;volatile
  1954                           
  1955                           ;adc.c: 29: ADCS0 = 0;
  1956  001282  90C0               	bcf	4032,0,c	;volatile
  1957                           
  1958                           ;adc.c: 30: ADCS1 = 1;
  1959  001284  82C0               	bsf	4032,1,c	;volatile
  1960                           
  1961                           ;adc.c: 31: ADCS2 = 0;
  1962  001286  94C0               	bcf	4032,2,c	;volatile
  1963                           
  1964                           ;adc.c: 34: GODONE = 0;
  1965  001288  92C2               	bcf	4034,1,c	;volatile
  1966                           
  1967                           ;adc.c: 40: VCFG1 = 0;
  1968  00128A  9AC1               	bcf	4033,5,c	;volatile
  1969                           
  1970                           ;adc.c: 42: VCFG0 = 0;
  1971  00128C  98C1               	bcf	4033,4,c	;volatile
  1972                           
  1973                           ;adc.c: 45: ADRESH = 0;
  1974  00128E  0E00               	movlw	0
  1975  001290  6EC4               	movwf	196,c	;volatile
  1976                           
  1977                           ;adc.c: 46: ADRESL = 0;
  1978  001292  0E00               	movlw	0
  1979  001294  6EC3               	movwf	195,c	;volatile
  1980                           
  1981                           ;adc.c: 49: ADON = 1;
  1982  001296  80C2               	bsf	4034,0,c	;volatile
  1983  001298  0012               	return		;funcret
  1984  00129A                     __end_of_init_adc:
  1985                           	callstack 0
  1986                           
  1987 ;; *************** function _go_to_menu *****************
  1988 ;; Defined at:
  1989 ;;		line 17 in file "menu.c"
  1990 ;; Parameters:    Size  Location     Type
  1991 ;;		None
  1992 ;; Auto vars:     Size  Location     Type
  1993 ;;  i               2   53[COMRAM] int 
  1994 ;;  menu           10   41[COMRAM] PTR const unsigned char 
  1995 ;;		 -> STR_21(9), STR_20(15), STR_19(11), STR_18(14), 
  1996 ;;		 -> STR_17(10), 
  1997 ;;  i               2   57[COMRAM] int 
  1998 ;;  pos             2   55[COMRAM] int 
  1999 ;;  exit_flag       2   51[COMRAM] int 
  2000 ;;  seconds         2    0        int 
  2001 ;;  once            2    0        int 
  2002 ;;  ret_value       2    0        int 
  2003 ;; Return value:  Size  Location     Type
  2004 ;;                  1    wreg      void 
  2005 ;; Registers used:
  2006 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2007 ;; Tracked objects:
  2008 ;;		On entry : 0/0
  2009 ;;		On exit  : 0/0
  2010 ;;		Unchanged: 0/0
  2011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2012 ;;      Params:         0       0       0       0       0       0       0
  2013 ;;      Locals:        18       0       0       0       0       0       0
  2014 ;;      Temps:          2       0       0       0       0       0       0
  2015 ;;      Totals:        20       0       0       0       0       0       0
  2016 ;;Total ram usage:       20 bytes
  2017 ;; Hardware stack levels used: 1
  2018 ;; Hardware stack levels required when called: 6
  2019 ;; This function calls:
  2020 ;;		_change_password
  2021 ;;		_clcd_print
  2022 ;;		_clcd_putch
  2023 ;;		_clcd_write
  2024 ;;		_delay
  2025 ;;		_print_to_console
  2026 ;;		_putch
  2027 ;;		_read_switches
  2028 ;;		_set_time
  2029 ;;		_store_key_log
  2030 ;;		_view_log
  2031 ;; This function is called by:
  2032 ;;		_main
  2033 ;; This function uses a non-reentrant model
  2034 ;;
  2035                           
  2036                           	psect	text8
  2037  00277C                     __ptext8:
  2038                           	callstack 0
  2039  00277C                     _go_to_menu:
  2040                           	callstack 24
  2041                           
  2042                           ;menu.c: 19: const char *menu[] = {"VIEW LOGS", "DOWNLOAD LOGS", "CLEAR LOGS", "CHANGEPA
      +                          SSWORD", "SET TIME"};
  2043                           
  2044                           ;incstack = 0
  2045  00277C  EE20  F07C         	lfsr	2,go_to_menu@F10376
  2046  002780  EE10  F02A         	lfsr	1,go_to_menu@menu
  2047  002784  0E09               	movlw	9
  2048  002786                     u2521:
  2049  002786  CFDB FFE3          	movff	plusw2,plusw1
  2050  00278A  06E8               	decf	wreg,f,c
  2051  00278C  E2FC               	bc	u2521
  2052                           
  2053                           ;menu.c: 20: int i = 0, pos = 0, once = 0, ret_value, seconds = 0, exit_flag = 0;
  2054  00278E  0E00               	movlw	0
  2055  002790  6E3B               	movwf	(go_to_menu@i+1)^0,c
  2056  002792  0E00               	movlw	0
  2057  002794  6E3A               	movwf	go_to_menu@i^0,c
  2058  002796  0E00               	movlw	0
  2059  002798  6E39               	movwf	(go_to_menu@pos+1)^0,c
  2060  00279A  0E00               	movlw	0
  2061  00279C  6E38               	movwf	go_to_menu@pos^0,c
  2062  00279E  0E00               	movlw	0
  2063  0027A0  6E35               	movwf	(go_to_menu@exit_flag+1)^0,c
  2064  0027A2  0E00               	movlw	0
  2065  0027A4  D131               	goto	L2
  2066  0027A6                     l3804:
  2067                           
  2068                           ;menu.c: 23: {;menu.c: 24: if (pos == 0)
  2069  0027A6  5038               	movf	go_to_menu@pos^0,w,c
  2070  0027A8  1039               	iorwf	(go_to_menu@pos+1)^0,w,c
  2071  0027AA  A4D8               	btfss	status,2,c
  2072  0027AC  D006               	goto	l3808
  2073                           
  2074                           ;menu.c: 25: clcd_putch('*', (0x80 + (0)));
  2075  0027AE  0E80               	movlw	128
  2076  0027B0  6E09               	movwf	clcd_putch@addr^0,c
  2077  0027B2  0E2A               	movlw	42
  2078  0027B4  EC15  F009         	call	_clcd_putch
  2079  0027B8  D005               	goto	l3810
  2080  0027BA                     l3808:
  2081                           
  2082                           ;menu.c: 26: else;menu.c: 27: clcd_putch('*', (0xC0 + (0)));
  2083  0027BA  0EC0               	movlw	192
  2084  0027BC  6E09               	movwf	clcd_putch@addr^0,c
  2085  0027BE  0E2A               	movlw	42
  2086  0027C0  EC15  F009         	call	_clcd_putch
  2087  0027C4                     l3810:
  2088                           
  2089                           ;menu.c: 29: clcd_print(menu[i], (0x80 + (2)));
  2090  0027C4  503A               	movf	go_to_menu@i^0,w,c
  2091  0027C6  0D02               	mullw	2
  2092  0027C8  50F3               	movf	243,w,c
  2093  0027CA  0F2A               	addlw	low go_to_menu@menu
  2094  0027CC  6ED9               	movwf	fsr2l,c
  2095  0027CE  6ADA               	clrf	fsr2h,c
  2096  0027D0  CFDE F003          	movff	postinc2,clcd_print@data
  2097  0027D4  CFDD F004          	movff	postdec2,clcd_print@data+1
  2098  0027D8  0E82               	movlw	130
  2099  0027DA  6E05               	movwf	clcd_print@addr^0,c
  2100  0027DC  EC66  F00B         	call	_clcd_print	;wreg free
  2101                           
  2102                           ;menu.c: 30: clcd_print(menu[i + 1], (0xC0 + (2)));
  2103  0027E0  503A               	movf	go_to_menu@i^0,w,c
  2104  0027E2  0D02               	mullw	2
  2105  0027E4  CFF3 F028          	movff	prodl,??_go_to_menu
  2106  0027E8  0E02               	movlw	2
  2107  0027EA  2628               	addwf	??_go_to_menu^0,f,c
  2108  0027EC  5028               	movf	??_go_to_menu^0,w,c
  2109  0027EE  0F2A               	addlw	low go_to_menu@menu
  2110  0027F0  6ED9               	movwf	fsr2l,c
  2111  0027F2  6ADA               	clrf	fsr2h,c
  2112  0027F4  CFDE F003          	movff	postinc2,clcd_print@data
  2113  0027F8  CFDD F004          	movff	postdec2,clcd_print@data+1
  2114  0027FC  0EC2               	movlw	194
  2115  0027FE  6E05               	movwf	clcd_print@addr^0,c
  2116  002800  EC66  F00B         	call	_clcd_print	;wreg free
  2117                           
  2118                           ;menu.c: 32: switch (read_switches(1))
  2119  002804  D121               	goto	l3916
  2120  002806                     l3814:
  2121                           
  2122                           ;menu.c: 35: {;menu.c: 36: delay(5);
  2123  002806  0E00               	movlw	0
  2124  002808  6E02               	movwf	(delay@ms+1)^0,c
  2125  00280A  0E05               	movlw	5
  2126  00280C  6E01               	movwf	delay@ms^0,c
  2127  00280E  EC23  F00A         	call	_delay	;wreg free
  2128                           
  2129                           ;menu.c: 38: if (read_switches(0) == 4)
  2130  002812  0E00               	movlw	0
  2131  002814  EC41  F00A         	call	_read_switches
  2132  002818  0A04               	xorlw	4
  2133  00281A  B4D8               	btfsc	status,2,c
  2134  00281C  D0B3               	goto	l3888
  2135  00281E  D0CD               	goto	l3890
  2136  002820                     l3818:
  2137                           
  2138                           ;menu.c: 43: {;menu.c: 44: store_key_log('V');
  2139  002820  0E56               	movlw	86
  2140  002822  EC50  F010         	call	_store_key_log
  2141                           
  2142                           ;menu.c: 45: clcd_write(0x01, 0);
  2143  002826  0E00               	movlw	0
  2144  002828  6E01               	movwf	clcd_write@control_bit^0,c
  2145  00282A  0E01               	movlw	1
  2146  00282C  EC5F  F009         	call	_clcd_write
  2147                           
  2148                           ;menu.c: 46: if (log_total_saved > 0)
  2149  002830  BE4C               	btfsc	(_log_total_saved+1)^0,7,c
  2150  002832  D008               	goto	l3826
  2151  002834  504C               	movf	(_log_total_saved+1)^0,w,c
  2152  002836  E103               	bnz	u2550
  2153  002838  044B               	decf	_log_total_saved^0,w,c
  2154  00283A  A0D8               	btfss	status,0,c
  2155  00283C  D003               	goto	l3826
  2156  00283E                     u2550:
  2157                           
  2158                           ;menu.c: 47: {;menu.c: 48: view_log();
  2159  00283E  EC2B  F00E         	call	_view_log	;wreg free
  2160                           
  2161                           ;menu.c: 49: }
  2162  002842  D008               	goto	l3828
  2163  002844                     l3826:
  2164                           
  2165                           ;menu.c: 50: else;menu.c: 51: clcd_print("NO LOGS TO PRINT", (0x80 + (0)));
  2166  002844  0EE8               	movlw	low STR_22
  2167  002846  6E03               	movwf	clcd_print@data^0,c
  2168  002848  0E2E               	movlw	high STR_22
  2169  00284A  6E04               	movwf	(clcd_print@data+1)^0,c
  2170  00284C  0E80               	movlw	128
  2171  00284E  6E05               	movwf	clcd_print@addr^0,c
  2172  002850  EC66  F00B         	call	_clcd_print	;wreg free
  2173  002854                     l3828:
  2174                           
  2175                           ;menu.c: 53: delay(10);
  2176  002854  0E00               	movlw	0
  2177  002856  6E02               	movwf	(delay@ms+1)^0,c
  2178  002858  0E0A               	movlw	10
  2179  00285A  6E01               	movwf	delay@ms^0,c
  2180  00285C  EC23  F00A         	call	_delay	;wreg free
  2181                           
  2182                           ;menu.c: 55: clcd_write(0x01, 0);
  2183  002860  0E00               	movlw	0
  2184  002862  6E01               	movwf	clcd_write@control_bit^0,c
  2185  002864  0E01               	movlw	1
  2186  002866  EC5F  F009         	call	_clcd_write
  2187                           
  2188                           ;menu.c: 56: };menu.c: 57: break;
  2189  00286A  D0F7               	goto	l337
  2190  00286C                     l3832:
  2191                           
  2192                           ;menu.c: 59: {;menu.c: 60: store_key_log('D');
  2193  00286C  0E44               	movlw	68
  2194  00286E  EC50  F010         	call	_store_key_log
  2195                           
  2196                           ;menu.c: 61: clcd_write(0x01, 0);
  2197  002872  0E00               	movlw	0
  2198  002874  6E01               	movwf	clcd_write@control_bit^0,c
  2199  002876  0E01               	movlw	1
  2200  002878  EC5F  F009         	call	_clcd_write
  2201                           
  2202                           ;menu.c: 62: clcd_print("DOWNLOADING", (0x80 + (2)));
  2203  00287C  0EAE               	movlw	low STR_23
  2204  00287E  6E03               	movwf	clcd_print@data^0,c
  2205  002880  0E2F               	movlw	high STR_23
  2206  002882  6E04               	movwf	(clcd_print@data+1)^0,c
  2207  002884  0E82               	movlw	130
  2208  002886  6E05               	movwf	clcd_print@addr^0,c
  2209  002888  EC66  F00B         	call	_clcd_print	;wreg free
  2210                           
  2211                           ;menu.c: 63: clcd_print("LOGS.....", (0xC0 + (3)));
  2212  00288C  0EC5               	movlw	low STR_24
  2213  00288E  6E03               	movwf	clcd_print@data^0,c
  2214  002890  0E2F               	movlw	high STR_24
  2215  002892  6E04               	movwf	(clcd_print@data+1)^0,c
  2216  002894  0EC3               	movlw	195
  2217  002896  6E05               	movwf	clcd_print@addr^0,c
  2218  002898  EC66  F00B         	call	_clcd_print	;wreg free
  2219                           
  2220                           ;menu.c: 64: delay(5);
  2221  00289C  0E00               	movlw	0
  2222  00289E  6E02               	movwf	(delay@ms+1)^0,c
  2223  0028A0  0E05               	movlw	5
  2224  0028A2  6E01               	movwf	delay@ms^0,c
  2225  0028A4  EC23  F00A         	call	_delay	;wreg free
  2226                           
  2227                           ;menu.c: 66: for (int i = 0; i < log_total_saved && i < 10; i++)
  2228  0028A8  0E00               	movlw	0
  2229  0028AA  6E37               	movwf	(go_to_menu@i_247+1)^0,c
  2230  0028AC  0E00               	movlw	0
  2231  0028AE  6E36               	movwf	go_to_menu@i_247^0,c
  2232  0028B0  D00B               	goto	l3850
  2233  0028B2                     l3844:
  2234                           
  2235                           ;menu.c: 67: {;menu.c: 68: putch('\r');
  2236  0028B2  0E0D               	movlw	13
  2237  0028B4  ECFB  F008         	call	_putch
  2238                           
  2239                           ;menu.c: 69: print_to_console(i);
  2240  0028B8  C036  F004         	movff	go_to_menu@i_247,print_to_console@iter
  2241  0028BC  C037  F005         	movff	go_to_menu@i_247+1,print_to_console@iter+1
  2242  0028C0  ECF1  F00C         	call	_print_to_console	;wreg free
  2243  0028C4  4A36               	infsnz	go_to_menu@i_247^0,f,c
  2244  0028C6  2A37               	incf	(go_to_menu@i_247+1)^0,f,c
  2245  0028C8                     l3850:
  2246  0028C8  504B               	movf	_log_total_saved^0,w,c
  2247  0028CA  5C36               	subwf	go_to_menu@i_247^0,w,c
  2248  0028CC  5037               	movf	(go_to_menu@i_247+1)^0,w,c
  2249  0028CE  0A80               	xorlw	128
  2250  0028D0  6E28               	movwf	??_go_to_menu^0,c
  2251  0028D2  504C               	movf	(_log_total_saved+1)^0,w,c
  2252  0028D4  0A80               	xorlw	128
  2253  0028D6  5828               	subwfb	??_go_to_menu^0,w,c
  2254  0028D8  B0D8               	btfsc	status,0,c
  2255  0028DA  D008               	goto	u2570
  2256  0028DC  BE37               	btfsc	(go_to_menu@i_247+1)^0,7,c
  2257  0028DE  D7E9               	goto	l3844
  2258  0028E0  5037               	movf	(go_to_menu@i_247+1)^0,w,c
  2259  0028E2  E104               	bnz	u2570
  2260  0028E4  0E0A               	movlw	10
  2261  0028E6  5C36               	subwf	go_to_menu@i_247^0,w,c
  2262  0028E8  A0D8               	btfss	status,0,c
  2263  0028EA  D7E3               	goto	l3844
  2264  0028EC                     u2570:
  2265                           
  2266                           ;menu.c: 70: };menu.c: 72: clcd_write(0x01, 0);
  2267  0028EC  0E00               	movlw	0
  2268  0028EE  6E01               	movwf	clcd_write@control_bit^0,c
  2269  0028F0  0E01               	movlw	1
  2270  0028F2  EC5F  F009         	call	_clcd_write
  2271                           
  2272                           ;menu.c: 73: };menu.c: 74: break;
  2273  0028F6  D0B1               	goto	l337
  2274  0028F8                     l3856:
  2275                           
  2276                           ;menu.c: 77: {;menu.c: 78: store_key_log('X');
  2277  0028F8  0E58               	movlw	88
  2278  0028FA  EC50  F010         	call	_store_key_log
  2279                           
  2280                           ;menu.c: 79: log_iter = 0;
  2281  0028FE  0E00               	movlw	0
  2282  002900  6E4E               	movwf	(_log_iter+1)^0,c
  2283  002902  0E00               	movlw	0
  2284  002904  6E4D               	movwf	_log_iter^0,c
  2285                           
  2286                           ;menu.c: 80: log_total_saved = 0;
  2287  002906  0E00               	movlw	0
  2288  002908  6E4C               	movwf	(_log_total_saved+1)^0,c
  2289  00290A  0E00               	movlw	0
  2290  00290C  6E4B               	movwf	_log_total_saved^0,c
  2291                           
  2292                           ;menu.c: 81: clcd_write(0x01, 0);
  2293  00290E  0E00               	movlw	0
  2294  002910  6E01               	movwf	clcd_write@control_bit^0,c
  2295  002912  0E01               	movlw	1
  2296  002914  EC5F  F009         	call	_clcd_write
  2297                           
  2298                           ;menu.c: 82: clcd_print("LOGS CLEARED!", (0x80 + (0)));
  2299  002918  0E84               	movlw	low STR_25
  2300  00291A  6E03               	movwf	clcd_print@data^0,c
  2301  00291C  0E2F               	movlw	high STR_25
  2302  00291E  6E04               	movwf	(clcd_print@data+1)^0,c
  2303  002920  0E80               	movlw	128
  2304  002922  6E05               	movwf	clcd_print@addr^0,c
  2305  002924  EC66  F00B         	call	_clcd_print	;wreg free
  2306                           
  2307                           ;menu.c: 83: delay(10);
  2308  002928  0E00               	movlw	0
  2309  00292A  6E02               	movwf	(delay@ms+1)^0,c
  2310  00292C  0E0A               	movlw	10
  2311  00292E  6E01               	movwf	delay@ms^0,c
  2312  002930  EC23  F00A         	call	_delay	;wreg free
  2313                           
  2314                           ;menu.c: 84: clcd_write(0x01, 0);
  2315  002934  0E00               	movlw	0
  2316  002936  6E01               	movwf	clcd_write@control_bit^0,c
  2317  002938  0E01               	movlw	1
  2318  00293A  EC5F  F009         	call	_clcd_write
  2319                           
  2320                           ;menu.c: 85: };menu.c: 86: break;
  2321  00293E  D08D               	goto	l337
  2322  002940                     l3870:
  2323                           
  2324                           ;menu.c: 88: {;menu.c: 89: store_key_log('W');
  2325  002940  0E57               	movlw	87
  2326  002942  EC50  F010         	call	_store_key_log
  2327                           
  2328                           ;menu.c: 90: change_password();
  2329  002946  EC45  F011         	call	_change_password	;wreg free
  2330                           
  2331                           ;menu.c: 91: };menu.c: 92: break;
  2332  00294A  D087               	goto	l337
  2333  00294C                     l3874:
  2334                           
  2335                           ;menu.c: 94: {;menu.c: 95: clcd_write(0x01, 0);
  2336  00294C  0E00               	movlw	0
  2337  00294E  6E01               	movwf	clcd_write@control_bit^0,c
  2338  002950  0E01               	movlw	1
  2339  002952  EC5F  F009         	call	_clcd_write
  2340                           
  2341                           ;menu.c: 96: set_time();
  2342  002956  EC32  F015         	call	_set_time	;wreg free
  2343                           
  2344                           ;menu.c: 97: clcd_write(0x01, 0);
  2345  00295A  0E00               	movlw	0
  2346  00295C  6E01               	movwf	clcd_write@control_bit^0,c
  2347  00295E  0E01               	movlw	1
  2348  002960  EC5F  F009         	call	_clcd_write
  2349                           
  2350                           ;menu.c: 98: clcd_putch(' ',(0xC0 + (8)));
  2351  002964  0EC8               	movlw	200
  2352  002966  6E09               	movwf	clcd_putch@addr^0,c
  2353  002968  0E20               	movlw	32
  2354  00296A  EC15  F009         	call	_clcd_putch
  2355                           
  2356                           ;menu.c: 99: clcd_putch(' ',(0xC0 + (9)));
  2357  00296E  0EC9               	movlw	201
  2358  002970  6E09               	movwf	clcd_putch@addr^0,c
  2359  002972  0E20               	movlw	32
  2360  002974  EC15  F009         	call	_clcd_putch
  2361                           
  2362                           ;menu.c: 100: clcd_write(0x01, 0);
  2363  002978  0E00               	movlw	0
  2364  00297A  6E01               	movwf	clcd_write@control_bit^0,c
  2365  00297C  0E01               	movlw	1
  2366  00297E  EC5F  F009         	call	_clcd_write
  2367                           
  2368                           ;menu.c: 101: };menu.c: 102: break;
  2369  002982  D06B               	goto	l337
  2370  002984                     l3888:
  2371  002984  503A               	movf	go_to_menu@i^0,w,c
  2372  002986  2438               	addwf	go_to_menu@pos^0,w,c
  2373  002988  6E28               	movwf	??_go_to_menu^0,c
  2374  00298A  503B               	movf	(go_to_menu@i+1)^0,w,c
  2375  00298C  2039               	addwfc	(go_to_menu@pos+1)^0,w,c
  2376  00298E  6E29               	movwf	(??_go_to_menu+1)^0,c
  2377                           
  2378                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2379                           ; Switch size 1, requested type "simple"
  2380                           ; Number of cases is 1, Range of values is 0 to 0
  2381                           ; switch strategies available:
  2382                           ; Name         Instructions Cycles
  2383                           ; simple_byte            4     3 (average)
  2384                           ;	Chosen strategy is simple_byte
  2385  002990  5029               	movf	(??_go_to_menu+1)^0,w,c
  2386  002992  0A00               	xorlw	0	; case 0
  2387  002994  A4D8               	btfss	status,2,c
  2388  002996  D061               	goto	l337
  2389                           
  2390                           ; Switch size 1, requested type "simple"
  2391                           ; Number of cases is 5, Range of values is 0 to 4
  2392                           ; switch strategies available:
  2393                           ; Name         Instructions Cycles
  2394                           ; simple_byte           16     9 (average)
  2395                           ;	Chosen strategy is simple_byte
  2396  002998  5028               	movf	??_go_to_menu^0,w,c
  2397  00299A  0A00               	xorlw	0	; case 0
  2398  00299C  B4D8               	btfsc	status,2,c
  2399  00299E  D740               	goto	l3818
  2400  0029A0  0A01               	xorlw	1	; case 1
  2401  0029A2  B4D8               	btfsc	status,2,c
  2402  0029A4  D763               	goto	l3832
  2403  0029A6  0A03               	xorlw	3	; case 2
  2404  0029A8  B4D8               	btfsc	status,2,c
  2405  0029AA  D7A6               	goto	l3856
  2406  0029AC  0A01               	xorlw	1	; case 3
  2407  0029AE  B4D8               	btfsc	status,2,c
  2408  0029B0  D7C7               	goto	l3870
  2409  0029B2  0A07               	xorlw	7	; case 4
  2410  0029B4  B4D8               	btfsc	status,2,c
  2411  0029B6  D7CA               	goto	l3874
  2412  0029B8  D050               	goto	l337
  2413  0029BA                     l3890:
  2414                           
  2415                           ;menu.c: 105: else;menu.c: 106: {;menu.c: 107: if (i > 0)
  2416  0029BA  BE3B               	btfsc	(go_to_menu@i+1)^0,7,c
  2417  0029BC  D04E               	goto	l337
  2418  0029BE  503B               	movf	(go_to_menu@i+1)^0,w,c
  2419  0029C0  E103               	bnz	u2580
  2420  0029C2  043A               	decf	go_to_menu@i^0,w,c
  2421  0029C4  A0D8               	btfss	status,0,c
  2422  0029C6  D049               	goto	l337
  2423  0029C8                     u2580:
  2424                           
  2425                           ;menu.c: 108: {;menu.c: 109: clcd_write(0x01, 0);
  2426  0029C8  0E00               	movlw	0
  2427  0029CA  6E01               	movwf	clcd_write@control_bit^0,c
  2428  0029CC  0E01               	movlw	1
  2429  0029CE  EC5F  F009         	call	_clcd_write
  2430                           
  2431                           ;menu.c: 110: if (--pos < 0)
  2432  0029D2  0638               	decf	go_to_menu@pos^0,f,c
  2433  0029D4  A0D8               	btfss	status,0,c
  2434  0029D6  0639               	decf	(go_to_menu@pos+1)^0,f,c
  2435  0029D8  AE39               	btfss	(go_to_menu@pos+1)^0,7,c
  2436  0029DA  D03F               	goto	l337
  2437                           
  2438                           ;menu.c: 111: {;menu.c: 112: i--;
  2439  0029DC  063A               	decf	go_to_menu@i^0,f,c
  2440  0029DE  A0D8               	btfss	status,0,c
  2441  0029E0  063B               	decf	(go_to_menu@i+1)^0,f,c
  2442                           
  2443                           ;menu.c: 113: pos = 0;
  2444  0029E2  0E00               	movlw	0
  2445  0029E4  6E39               	movwf	(go_to_menu@pos+1)^0,c
  2446  0029E6  0E00               	movlw	0
  2447  0029E8  D02D               	goto	L3
  2448  0029EA                     l3900:
  2449                           
  2450                           ;menu.c: 120: {;menu.c: 121: delay(5);
  2451  0029EA  0E00               	movlw	0
  2452  0029EC  6E02               	movwf	(delay@ms+1)^0,c
  2453  0029EE  0E05               	movlw	5
  2454  0029F0  6E01               	movwf	delay@ms^0,c
  2455  0029F2  EC23  F00A         	call	_delay	;wreg free
  2456                           
  2457                           ;menu.c: 123: if (read_switches(0) == 5)
  2458  0029F6  0E00               	movlw	0
  2459  0029F8  EC41  F00A         	call	_read_switches
  2460  0029FC  0A05               	xorlw	5
  2461  0029FE  A4D8               	btfss	status,2,c
  2462  002A00  D005               	goto	l3904
  2463                           
  2464                           ;menu.c: 124: exit_flag = 1;
  2465  002A02  0E00               	movlw	0
  2466  002A04  6E35               	movwf	(go_to_menu@exit_flag+1)^0,c
  2467  002A06  0E01               	movlw	1
  2468  002A08                     L2:
  2469  002A08  6E34               	movwf	go_to_menu@exit_flag^0,c
  2470  002A0A  D027               	goto	l337
  2471  002A0C                     l3904:
  2472                           
  2473                           ;menu.c: 125: else;menu.c: 126: {;menu.c: 127: if (i < 3)
  2474  002A0C  BE3B               	btfsc	(go_to_menu@i+1)^0,7,c
  2475  002A0E  D006               	goto	u2610
  2476  002A10  503B               	movf	(go_to_menu@i+1)^0,w,c
  2477  002A12  E123               	bnz	l3918
  2478  002A14  0E03               	movlw	3
  2479  002A16  5C3A               	subwf	go_to_menu@i^0,w,c
  2480  002A18  B0D8               	btfsc	status,0,c
  2481  002A1A  D01F               	goto	l337
  2482  002A1C                     u2610:
  2483                           
  2484                           ;menu.c: 128: {;menu.c: 129: clcd_write(0x01, 0);
  2485  002A1C  0E00               	movlw	0
  2486  002A1E  6E01               	movwf	clcd_write@control_bit^0,c
  2487  002A20  0E01               	movlw	1
  2488  002A22  EC5F  F009         	call	_clcd_write
  2489                           
  2490                           ;menu.c: 130: if (++pos >= 2)
  2491  002A26  4A38               	infsnz	go_to_menu@pos^0,f,c
  2492  002A28  2A39               	incf	(go_to_menu@pos+1)^0,f,c
  2493  002A2A  BE39               	btfsc	(go_to_menu@pos+1)^0,7,c
  2494  002A2C  D016               	goto	l337
  2495  002A2E  5039               	movf	(go_to_menu@pos+1)^0,w,c
  2496  002A30  E104               	bnz	u2620
  2497  002A32  0E02               	movlw	2
  2498  002A34  5C38               	subwf	go_to_menu@pos^0,w,c
  2499  002A36  A0D8               	btfss	status,0,c
  2500  002A38  D010               	goto	l337
  2501  002A3A                     u2620:
  2502                           
  2503                           ;menu.c: 131: {;menu.c: 132: i++;
  2504  002A3A  4A3A               	infsnz	go_to_menu@i^0,f,c
  2505  002A3C  2A3B               	incf	(go_to_menu@i+1)^0,f,c
  2506                           
  2507                           ;menu.c: 133: pos = 1;
  2508  002A3E  0E00               	movlw	0
  2509  002A40  6E39               	movwf	(go_to_menu@pos+1)^0,c
  2510  002A42  0E01               	movlw	1
  2511  002A44                     L3:
  2512  002A44  6E38               	movwf	go_to_menu@pos^0,c
  2513  002A46  D009               	goto	l337
  2514  002A48                     l3916:
  2515  002A48  0E01               	movlw	1
  2516  002A4A  EC41  F00A         	call	_read_switches
  2517                           
  2518                           ; Switch size 1, requested type "simple"
  2519                           ; Number of cases is 2, Range of values is 4 to 5
  2520                           ; switch strategies available:
  2521                           ; Name         Instructions Cycles
  2522                           ; simple_byte            7     4 (average)
  2523                           ;	Chosen strategy is simple_byte
  2524  002A4E  0A04               	xorlw	4	; case 4
  2525  002A50  B4D8               	btfsc	status,2,c
  2526  002A52  D6D9               	goto	l3814
  2527  002A54  0A01               	xorlw	1	; case 5
  2528  002A56  B4D8               	btfsc	status,2,c
  2529  002A58  D7C8               	goto	l3900
  2530  002A5A                     l337:
  2531  002A5A                     l3918:
  2532  002A5A  5034               	movf	go_to_menu@exit_flag^0,w,c
  2533  002A5C  1035               	iorwf	(go_to_menu@exit_flag+1)^0,w,c
  2534  002A5E  A4D8               	btfss	status,2,c
  2535  002A60  0012               	return	
  2536  002A62  D6A1               	goto	l3804
  2537  002A64                     __end_of_go_to_menu:
  2538                           	callstack 0
  2539                           
  2540 ;; *************** function _view_log *****************
  2541 ;; Defined at:
  2542 ;;		line 115 in file "event_logger.c"
  2543 ;; Parameters:    Size  Location     Type
  2544 ;;		None
  2545 ;; Auto vars:     Size  Location     Type
  2546 ;;  string         16   13[COMRAM] unsigned char [16]
  2547 ;;  i               2   31[COMRAM] int 
  2548 ;;  exit_flag       2   29[COMRAM] int 
  2549 ;; Return value:  Size  Location     Type
  2550 ;;                  1    wreg      void 
  2551 ;; Registers used:
  2552 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2553 ;; Tracked objects:
  2554 ;;		On entry : 0/0
  2555 ;;		On exit  : 0/0
  2556 ;;		Unchanged: 0/0
  2557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2558 ;;      Params:         0       0       0       0       0       0       0
  2559 ;;      Locals:        20       0       0       0       0       0       0
  2560 ;;      Temps:          1       0       0       0       0       0       0
  2561 ;;      Totals:        21       0       0       0       0       0       0
  2562 ;;Total ram usage:       21 bytes
  2563 ;; Hardware stack levels used: 1
  2564 ;; Hardware stack levels required when called: 5
  2565 ;; This function calls:
  2566 ;;		_clcd_print
  2567 ;;		_clcd_putch
  2568 ;;		_clcd_write
  2569 ;;		_delay
  2570 ;;		_print_log_to_clcd
  2571 ;;		_read_switches
  2572 ;; This function is called by:
  2573 ;;		_go_to_menu
  2574 ;; This function uses a non-reentrant model
  2575 ;;
  2576                           
  2577                           	psect	text9
  2578  001C56                     __ptext9:
  2579                           	callstack 0
  2580  001C56                     _view_log:
  2581                           	callstack 24
  2582                           
  2583                           ;event_logger.c: 117: int i = 0, exit_flag = 0;
  2584                           
  2585                           ;incstack = 0
  2586  001C56  0E00               	movlw	0
  2587  001C58  6E21               	movwf	(view_log@i+1)^0,c
  2588  001C5A  0E00               	movlw	0
  2589  001C5C  6E20               	movwf	view_log@i^0,c
  2590  001C5E  0E00               	movlw	0
  2591  001C60  6E1F               	movwf	(view_log@exit_flag+1)^0,c
  2592  001C62  0E00               	movlw	0
  2593  001C64  6E1E               	movwf	view_log@exit_flag^0,c
  2594                           
  2595                           ;event_logger.c: 118: char string[16] = {0};
  2596  001C66  EE20  F00E         	lfsr	2,view_log@string
  2597  001C6A  0E0F               	movlw	15
  2598  001C6C                     u1901:
  2599  001C6C  6ADE               	clrf	postinc2,c
  2600  001C6E  06E8               	decf	wreg,f,c
  2601  001C70  E2FD               	bc	u1901
  2602                           
  2603                           ;event_logger.c: 120: while (!exit_flag)
  2604  001C72  D05C               	goto	l3200
  2605  001C74                     l3172:
  2606                           
  2607                           ;event_logger.c: 121: {;event_logger.c: 122: clcd_print("LOGS:", (0x80 + (0)));
  2608  001C74  0EF1               	movlw	low STR_1
  2609  001C76  6E03               	movwf	clcd_print@data^0,c
  2610  001C78  0E2F               	movlw	high STR_1
  2611  001C7A  6E04               	movwf	(clcd_print@data+1)^0,c
  2612  001C7C  0E80               	movlw	128
  2613  001C7E  6E05               	movwf	clcd_print@addr^0,c
  2614  001C80  EC66  F00B         	call	_clcd_print	;wreg free
  2615                           
  2616                           ;event_logger.c: 123: clcd_putch('0' + i, (0xC0 + (0)));
  2617  001C84  0EC0               	movlw	192
  2618  001C86  6E09               	movwf	clcd_putch@addr^0,c
  2619  001C88  5020               	movf	view_log@i^0,w,c
  2620  001C8A  0F30               	addlw	48
  2621  001C8C  EC15  F009         	call	_clcd_putch
  2622                           
  2623                           ;event_logger.c: 124: clcd_putch('.', (0xC0 + (1)));
  2624  001C90  0EC1               	movlw	193
  2625  001C92  6E09               	movwf	clcd_putch@addr^0,c
  2626  001C94  0E2E               	movlw	46
  2627  001C96  EC15  F009         	call	_clcd_putch
  2628                           
  2629                           ;event_logger.c: 125: print_log_to_clcd(0xC0, i);
  2630  001C9A  C020  F00B         	movff	view_log@i,print_log_to_clcd@iter
  2631  001C9E  0EC0               	movlw	192
  2632  001CA0  EC1A  F00F         	call	_print_log_to_clcd
  2633                           
  2634                           ;event_logger.c: 127: switch (read_switches(1))
  2635  001CA4  D03A               	goto	l3198
  2636  001CA6                     l3180:
  2637                           
  2638                           ;event_logger.c: 130: {;event_logger.c: 131: if (i > 0)
  2639  001CA6  BE21               	btfsc	(view_log@i+1)^0,7,c
  2640  001CA8  D041               	goto	l3200
  2641  001CAA  5021               	movf	(view_log@i+1)^0,w,c
  2642  001CAC  E103               	bnz	u1910
  2643  001CAE  0420               	decf	view_log@i^0,w,c
  2644  001CB0  A0D8               	btfss	status,0,c
  2645  001CB2  D03C               	goto	l3200
  2646  001CB4                     u1910:
  2647                           
  2648                           ;event_logger.c: 132: i--;
  2649  001CB4  0620               	decf	view_log@i^0,f,c
  2650  001CB6  A0D8               	btfss	status,0,c
  2651  001CB8  0621               	decf	(view_log@i+1)^0,f,c
  2652  001CBA  D038               	goto	l3200
  2653  001CBC                     l3184:
  2654                           
  2655                           ;event_logger.c: 136: {;event_logger.c: 137: delay(5);
  2656  001CBC  0E00               	movlw	0
  2657  001CBE  6E02               	movwf	(delay@ms+1)^0,c
  2658  001CC0  0E05               	movlw	5
  2659  001CC2  6E01               	movwf	delay@ms^0,c
  2660  001CC4  EC23  F00A         	call	_delay	;wreg free
  2661                           
  2662                           ;event_logger.c: 139: if (read_switches(0) == 5)
  2663  001CC8  0E00               	movlw	0
  2664  001CCA  EC41  F00A         	call	_read_switches
  2665  001CCE  0A05               	xorlw	5
  2666  001CD0  A4D8               	btfss	status,2,c
  2667  001CD2  D005               	goto	l3188
  2668                           
  2669                           ;event_logger.c: 140: exit_flag = 1;
  2670  001CD4  0E00               	movlw	0
  2671  001CD6  6E1F               	movwf	(view_log@exit_flag+1)^0,c
  2672  001CD8  0E01               	movlw	1
  2673  001CDA  6E1E               	movwf	view_log@exit_flag^0,c
  2674  001CDC  D027               	goto	l3200
  2675  001CDE                     l3188:
  2676                           
  2677                           ;event_logger.c: 141: else if (log_total_saved > 9)
  2678  001CDE  BE4C               	btfsc	(_log_total_saved+1)^0,7,c
  2679  001CE0  D011               	goto	l3194
  2680  001CE2  504C               	movf	(_log_total_saved+1)^0,w,c
  2681  001CE4  E104               	bnz	u1930
  2682  001CE6  0E0A               	movlw	10
  2683  001CE8  5C4B               	subwf	_log_total_saved^0,w,c
  2684  001CEA  A0D8               	btfss	status,0,c
  2685  001CEC  D00B               	goto	l3194
  2686  001CEE                     u1930:
  2687                           
  2688                           ;event_logger.c: 142: {;event_logger.c: 143: if (i < 9)
  2689  001CEE  BE21               	btfsc	(view_log@i+1)^0,7,c
  2690  001CF0  D006               	goto	u1940
  2691  001CF2  5021               	movf	(view_log@i+1)^0,w,c
  2692  001CF4  E11B               	bnz	l3200
  2693  001CF6  0E09               	movlw	9
  2694  001CF8  5C20               	subwf	view_log@i^0,w,c
  2695  001CFA  B0D8               	btfsc	status,0,c
  2696  001CFC  D017               	goto	l3200
  2697  001CFE                     u1940:
  2698                           
  2699                           ;event_logger.c: 144: i++;
  2700  001CFE  4A20               	infsnz	view_log@i^0,f,c
  2701  001D00  2A21               	incf	(view_log@i+1)^0,f,c
  2702  001D02  D014               	goto	l3200
  2703  001D04                     l3194:
  2704                           
  2705                           ;event_logger.c: 146: else if (i < log_iter)
  2706  001D04  504D               	movf	_log_iter^0,w,c
  2707  001D06  5C20               	subwf	view_log@i^0,w,c
  2708  001D08  5021               	movf	(view_log@i+1)^0,w,c
  2709  001D0A  0A80               	xorlw	128
  2710  001D0C  6E0D               	movwf	??_view_log^0,c
  2711  001D0E  504E               	movf	(_log_iter+1)^0,w,c
  2712  001D10  0A80               	xorlw	128
  2713  001D12  580D               	subwfb	??_view_log^0,w,c
  2714  001D14  A0D8               	btfss	status,0,c
  2715  001D16  D7F3               	goto	u1940
  2716  001D18  D009               	goto	l3200
  2717  001D1A                     l3198:
  2718  001D1A  0E01               	movlw	1
  2719  001D1C  EC41  F00A         	call	_read_switches
  2720                           
  2721                           ; Switch size 1, requested type "simple"
  2722                           ; Number of cases is 2, Range of values is 4 to 5
  2723                           ; switch strategies available:
  2724                           ; Name         Instructions Cycles
  2725                           ; simple_byte            7     4 (average)
  2726                           ;	Chosen strategy is simple_byte
  2727  001D20  0A04               	xorlw	4	; case 4
  2728  001D22  B4D8               	btfsc	status,2,c
  2729  001D24  D7C0               	goto	l3180
  2730  001D26  0A01               	xorlw	1	; case 5
  2731  001D28  B4D8               	btfsc	status,2,c
  2732  001D2A  D7C8               	goto	l3184
  2733  001D2C                     l3200:
  2734  001D2C  501E               	movf	view_log@exit_flag^0,w,c
  2735  001D2E  101F               	iorwf	(view_log@exit_flag+1)^0,w,c
  2736  001D30  B4D8               	btfsc	status,2,c
  2737  001D32  D7A0               	goto	l3172
  2738                           
  2739                           ;event_logger.c: 150: };event_logger.c: 151: clcd_write(0x01, 0);
  2740  001D34  0E00               	movlw	0
  2741  001D36  6E01               	movwf	clcd_write@control_bit^0,c
  2742  001D38  0E01               	movlw	1
  2743  001D3A  EC5F  F009         	call	_clcd_write
  2744  001D3E  0012               	return		;funcret
  2745  001D40                     __end_of_view_log:
  2746                           	callstack 0
  2747                           
  2748 ;; *************** function _print_log_to_clcd *****************
  2749 ;; Defined at:
  2750 ;;		line 97 in file "event_logger.c"
  2751 ;; Parameters:    Size  Location     Type
  2752 ;;  LINE            1    wreg     unsigned char 
  2753 ;;  iter            1   10[COMRAM] unsigned char 
  2754 ;; Auto vars:     Size  Location     Type
  2755 ;;  LINE            1   11[COMRAM] unsigned char 
  2756 ;; Return value:  Size  Location     Type
  2757 ;;                  1    wreg      void 
  2758 ;; Registers used:
  2759 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2760 ;; Tracked objects:
  2761 ;;		On entry : 0/0
  2762 ;;		On exit  : 0/0
  2763 ;;		Unchanged: 0/0
  2764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2765 ;;      Params:         1       0       0       0       0       0       0
  2766 ;;      Locals:         1       0       0       0       0       0       0
  2767 ;;      Temps:          0       0       0       0       0       0       0
  2768 ;;      Totals:         2       0       0       0       0       0       0
  2769 ;;Total ram usage:        2 bytes
  2770 ;; Hardware stack levels used: 1
  2771 ;; Hardware stack levels required when called: 4
  2772 ;; This function calls:
  2773 ;;		_clcd_putch
  2774 ;;		_read_external_eeprom
  2775 ;; This function is called by:
  2776 ;;		_view_log
  2777 ;; This function uses a non-reentrant model
  2778 ;;
  2779                           
  2780                           	psect	text10
  2781  001E34                     __ptext10:
  2782                           	callstack 0
  2783  001E34                     _print_log_to_clcd:
  2784                           	callstack 24
  2785                           
  2786                           ;incstack = 0
  2787                           ;print_log_to_clcd@LINE stored from wreg
  2788  001E34  6E0C               	movwf	print_log_to_clcd@LINE^0,c
  2789                           
  2790                           ;event_logger.c: 99: clcd_putch(read_external_eeprom(iter * 10 + 0), LINE + 2);
  2791  001E36  500C               	movf	print_log_to_clcd@LINE^0,w,c
  2792  001E38  0F02               	addlw	2
  2793  001E3A  6E09               	movwf	clcd_putch@addr^0,c
  2794  001E3C  500B               	movf	print_log_to_clcd@iter^0,w,c
  2795  001E3E  0D0A               	mullw	10
  2796  001E40  50F3               	movf	243,w,c
  2797  001E42  EC88  F009         	call	_read_external_eeprom
  2798  001E46  EC15  F009         	call	_clcd_putch
  2799                           
  2800                           ;event_logger.c: 100: clcd_putch(read_external_eeprom(iter * 10 + 1), LINE + 3);
  2801  001E4A  500C               	movf	print_log_to_clcd@LINE^0,w,c
  2802  001E4C  0F03               	addlw	3
  2803  001E4E  6E09               	movwf	clcd_putch@addr^0,c
  2804  001E50  500B               	movf	print_log_to_clcd@iter^0,w,c
  2805  001E52  0D0A               	mullw	10
  2806  001E54  28F3               	incf	243,w,c
  2807  001E56  EC88  F009         	call	_read_external_eeprom
  2808  001E5A  EC15  F009         	call	_clcd_putch
  2809                           
  2810                           ;event_logger.c: 101: clcd_putch(':', LINE + 4);
  2811  001E5E  500C               	movf	print_log_to_clcd@LINE^0,w,c
  2812  001E60  0F04               	addlw	4
  2813  001E62  6E09               	movwf	clcd_putch@addr^0,c
  2814  001E64  0E3A               	movlw	58
  2815  001E66  EC15  F009         	call	_clcd_putch
  2816                           
  2817                           ;event_logger.c: 102: clcd_putch(read_external_eeprom(iter * 10 + 2), LINE + 5);
  2818  001E6A  500C               	movf	print_log_to_clcd@LINE^0,w,c
  2819  001E6C  0F05               	addlw	5
  2820  001E6E  6E09               	movwf	clcd_putch@addr^0,c
  2821  001E70  500B               	movf	print_log_to_clcd@iter^0,w,c
  2822  001E72  0D0A               	mullw	10
  2823  001E74  50F3               	movf	243,w,c
  2824  001E76  0F02               	addlw	2
  2825  001E78  EC88  F009         	call	_read_external_eeprom
  2826  001E7C  EC15  F009         	call	_clcd_putch
  2827                           
  2828                           ;event_logger.c: 103: clcd_putch(read_external_eeprom(iter * 10 + 3), LINE + 6);
  2829  001E80  500C               	movf	print_log_to_clcd@LINE^0,w,c
  2830  001E82  0F06               	addlw	6
  2831  001E84  6E09               	movwf	clcd_putch@addr^0,c
  2832  001E86  500B               	movf	print_log_to_clcd@iter^0,w,c
  2833  001E88  0D0A               	mullw	10
  2834  001E8A  50F3               	movf	243,w,c
  2835  001E8C  0F03               	addlw	3
  2836  001E8E  EC88  F009         	call	_read_external_eeprom
  2837  001E92  EC15  F009         	call	_clcd_putch
  2838                           
  2839                           ;event_logger.c: 104: clcd_putch(':', LINE + 7);
  2840  001E96  500C               	movf	print_log_to_clcd@LINE^0,w,c
  2841  001E98  0F07               	addlw	7
  2842  001E9A  6E09               	movwf	clcd_putch@addr^0,c
  2843  001E9C  0E3A               	movlw	58
  2844  001E9E  EC15  F009         	call	_clcd_putch
  2845                           
  2846                           ;event_logger.c: 105: clcd_putch(read_external_eeprom(iter * 10 + 4), LINE + 8);
  2847  001EA2  500C               	movf	print_log_to_clcd@LINE^0,w,c
  2848  001EA4  0F08               	addlw	8
  2849  001EA6  6E09               	movwf	clcd_putch@addr^0,c
  2850  001EA8  500B               	movf	print_log_to_clcd@iter^0,w,c
  2851  001EAA  0D0A               	mullw	10
  2852  001EAC  50F3               	movf	243,w,c
  2853  001EAE  0F04               	addlw	4
  2854  001EB0  EC88  F009         	call	_read_external_eeprom
  2855  001EB4  EC15  F009         	call	_clcd_putch
  2856                           
  2857                           ;event_logger.c: 106: clcd_putch(read_external_eeprom(iter * 10 + 5), LINE + 9);
  2858  001EB8  500C               	movf	print_log_to_clcd@LINE^0,w,c
  2859  001EBA  0F09               	addlw	9
  2860  001EBC  6E09               	movwf	clcd_putch@addr^0,c
  2861  001EBE  500B               	movf	print_log_to_clcd@iter^0,w,c
  2862  001EC0  0D0A               	mullw	10
  2863  001EC2  50F3               	movf	243,w,c
  2864  001EC4  0F05               	addlw	5
  2865  001EC6  EC88  F009         	call	_read_external_eeprom
  2866  001ECA  EC15  F009         	call	_clcd_putch
  2867                           
  2868                           ;event_logger.c: 107: clcd_putch(' ', LINE + 10);
  2869  001ECE  500C               	movf	print_log_to_clcd@LINE^0,w,c
  2870  001ED0  0F0A               	addlw	10
  2871  001ED2  6E09               	movwf	clcd_putch@addr^0,c
  2872  001ED4  0E20               	movlw	32
  2873  001ED6  EC15  F009         	call	_clcd_putch
  2874                           
  2875                           ;event_logger.c: 108: clcd_putch(read_external_eeprom(iter * 10 + 6), LINE + 11);
  2876  001EDA  500C               	movf	print_log_to_clcd@LINE^0,w,c
  2877  001EDC  0F0B               	addlw	11
  2878  001EDE  6E09               	movwf	clcd_putch@addr^0,c
  2879  001EE0  500B               	movf	print_log_to_clcd@iter^0,w,c
  2880  001EE2  0D0A               	mullw	10
  2881  001EE4  50F3               	movf	243,w,c
  2882  001EE6  0F06               	addlw	6
  2883  001EE8  EC88  F009         	call	_read_external_eeprom
  2884  001EEC  EC15  F009         	call	_clcd_putch
  2885                           
  2886                           ;event_logger.c: 109: clcd_putch(read_external_eeprom(iter * 10 + 7), LINE + 12);
  2887  001EF0  500C               	movf	print_log_to_clcd@LINE^0,w,c
  2888  001EF2  0F0C               	addlw	12
  2889  001EF4  6E09               	movwf	clcd_putch@addr^0,c
  2890  001EF6  500B               	movf	print_log_to_clcd@iter^0,w,c
  2891  001EF8  0D0A               	mullw	10
  2892  001EFA  50F3               	movf	243,w,c
  2893  001EFC  0F07               	addlw	7
  2894  001EFE  EC88  F009         	call	_read_external_eeprom
  2895  001F02  EC15  F009         	call	_clcd_putch
  2896                           
  2897                           ;event_logger.c: 110: clcd_putch(' ', LINE + 13);
  2898  001F06  500C               	movf	print_log_to_clcd@LINE^0,w,c
  2899  001F08  0F0D               	addlw	13
  2900  001F0A  6E09               	movwf	clcd_putch@addr^0,c
  2901  001F0C  0E20               	movlw	32
  2902  001F0E  EC15  F009         	call	_clcd_putch
  2903                           
  2904                           ;event_logger.c: 111: clcd_putch(read_external_eeprom(iter * 10 + 8), LINE + 14);
  2905  001F12  500C               	movf	print_log_to_clcd@LINE^0,w,c
  2906  001F14  0F0E               	addlw	14
  2907  001F16  6E09               	movwf	clcd_putch@addr^0,c
  2908  001F18  500B               	movf	print_log_to_clcd@iter^0,w,c
  2909  001F1A  0D0A               	mullw	10
  2910  001F1C  50F3               	movf	243,w,c
  2911  001F1E  0F08               	addlw	8
  2912  001F20  EC88  F009         	call	_read_external_eeprom
  2913  001F24  EC15  F009         	call	_clcd_putch
  2914                           
  2915                           ;event_logger.c: 112: clcd_putch(read_external_eeprom(iter * 10 + 9), LINE + 15);
  2916  001F28  500C               	movf	print_log_to_clcd@LINE^0,w,c
  2917  001F2A  0F0F               	addlw	15
  2918  001F2C  6E09               	movwf	clcd_putch@addr^0,c
  2919  001F2E  500B               	movf	print_log_to_clcd@iter^0,w,c
  2920  001F30  0D0A               	mullw	10
  2921  001F32  50F3               	movf	243,w,c
  2922  001F34  0F09               	addlw	9
  2923  001F36  EC88  F009         	call	_read_external_eeprom
  2924  001F3A  EC15  F009         	call	_clcd_putch
  2925  001F3E  0012               	return		;funcret
  2926  001F40                     __end_of_print_log_to_clcd:
  2927                           	callstack 0
  2928                           
  2929 ;; *************** function _store_key_log *****************
  2930 ;; Defined at:
  2931 ;;		line 21 in file "event_logger.c"
  2932 ;; Parameters:    Size  Location     Type
  2933 ;;  gear            1    wreg     unsigned char 
  2934 ;; Auto vars:     Size  Location     Type
  2935 ;;  gear            1   14[COMRAM] unsigned char 
  2936 ;; Return value:  Size  Location     Type
  2937 ;;                  1    wreg      void 
  2938 ;; Registers used:
  2939 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2940 ;; Tracked objects:
  2941 ;;		On entry : 0/0
  2942 ;;		On exit  : 0/0
  2943 ;;		Unchanged: 0/0
  2944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2945 ;;      Params:         0       0       0       0       0       0       0
  2946 ;;      Locals:         1       0       0       0       0       0       0
  2947 ;;      Temps:          0       0       0       0       0       0       0
  2948 ;;      Totals:         1       0       0       0       0       0       0
  2949 ;;Total ram usage:        1 bytes
  2950 ;; Hardware stack levels used: 1
  2951 ;; Hardware stack levels required when called: 3
  2952 ;; This function calls:
  2953 ;;		___awmod
  2954 ;;		_write_external_eeprom
  2955 ;; This function is called by:
  2956 ;;		_go_to_menu
  2957 ;;		_main
  2958 ;; This function uses a non-reentrant model
  2959 ;;
  2960                           
  2961                           	psect	text11
  2962  0020A0                     __ptext11:
  2963                           	callstack 0
  2964  0020A0                     _store_key_log:
  2965                           	callstack 27
  2966                           
  2967                           ;incstack = 0
  2968                           ;store_key_log@gear stored from wreg
  2969  0020A0  6E0F               	movwf	store_key_log@gear^0,c
  2970                           
  2971                           ;event_logger.c: 23: write_external_eeprom(log_iter * 10 + 0, time[0]);
  2972  0020A2  C051  F002         	movff	_time,write_external_eeprom@data
  2973  0020A6  504D               	movf	_log_iter^0,w,c
  2974  0020A8  0D0A               	mullw	10
  2975  0020AA  50F3               	movf	243,w,c
  2976  0020AC  ECB2  F009         	call	_write_external_eeprom
  2977                           
  2978                           ;event_logger.c: 24: write_external_eeprom(log_iter * 10 + 1, time[1]);
  2979  0020B0  C052  F002         	movff	_time+1,write_external_eeprom@data
  2980  0020B4  504D               	movf	_log_iter^0,w,c
  2981  0020B6  0D0A               	mullw	10
  2982  0020B8  28F3               	incf	243,w,c
  2983  0020BA  ECB2  F009         	call	_write_external_eeprom
  2984                           
  2985                           ;event_logger.c: 25: write_external_eeprom(log_iter * 10 + 2, time[3]);
  2986  0020BE  C054  F002         	movff	_time+3,write_external_eeprom@data
  2987  0020C2  504D               	movf	_log_iter^0,w,c
  2988  0020C4  0D0A               	mullw	10
  2989  0020C6  50F3               	movf	243,w,c
  2990  0020C8  0F02               	addlw	2
  2991  0020CA  ECB2  F009         	call	_write_external_eeprom
  2992                           
  2993                           ;event_logger.c: 26: write_external_eeprom(log_iter * 10 + 3, time[4]);
  2994  0020CE  C055  F002         	movff	_time+4,write_external_eeprom@data
  2995  0020D2  504D               	movf	_log_iter^0,w,c
  2996  0020D4  0D0A               	mullw	10
  2997  0020D6  50F3               	movf	243,w,c
  2998  0020D8  0F03               	addlw	3
  2999  0020DA  ECB2  F009         	call	_write_external_eeprom
  3000                           
  3001                           ;event_logger.c: 27: write_external_eeprom(log_iter * 10 + 4, time[6]);
  3002  0020DE  C057  F002         	movff	_time+6,write_external_eeprom@data
  3003  0020E2  504D               	movf	_log_iter^0,w,c
  3004  0020E4  0D0A               	mullw	10
  3005  0020E6  50F3               	movf	243,w,c
  3006  0020E8  0F04               	addlw	4
  3007  0020EA  ECB2  F009         	call	_write_external_eeprom
  3008                           
  3009                           ;event_logger.c: 28: write_external_eeprom(log_iter * 10 + 5, time[7]);
  3010  0020EE  C058  F002         	movff	_time+7,write_external_eeprom@data
  3011  0020F2  504D               	movf	_log_iter^0,w,c
  3012  0020F4  0D0A               	mullw	10
  3013  0020F6  50F3               	movf	243,w,c
  3014  0020F8  0F05               	addlw	5
  3015  0020FA  ECB2  F009         	call	_write_external_eeprom
  3016                           
  3017                           ;event_logger.c: 30: if (gear == 'C')
  3018  0020FE  0E43               	movlw	67
  3019  002100  180F               	xorwf	store_key_log@gear^0,w,c
  3020  002102  A4D8               	btfss	status,2,c
  3021  002104  D011               	goto	l3118
  3022                           
  3023                           ;event_logger.c: 31: {;event_logger.c: 32: write_external_eeprom(log_iter * 10 + 6, ' ')
      +                          ;
  3024  002106  0E20               	movlw	32
  3025  002108  6E02               	movwf	write_external_eeprom@data^0,c
  3026  00210A  504D               	movf	_log_iter^0,w,c
  3027  00210C  0D0A               	mullw	10
  3028  00210E  50F3               	movf	243,w,c
  3029  002110  0F06               	addlw	6
  3030  002112  ECB2  F009         	call	_write_external_eeprom
  3031                           
  3032                           ;event_logger.c: 33: write_external_eeprom(log_iter * 10 + 7, 'C');
  3033  002116  0E43               	movlw	67
  3034  002118  6E02               	movwf	write_external_eeprom@data^0,c
  3035  00211A  504D               	movf	_log_iter^0,w,c
  3036  00211C  0D0A               	mullw	10
  3037  00211E  50F3               	movf	243,w,c
  3038  002120  0F07               	addlw	7
  3039  002122  ECB2  F009         	call	_write_external_eeprom
  3040                           
  3041                           ;event_logger.c: 34: }
  3042  002126  D08E               	goto	l156
  3043  002128                     l3118:
  3044                           
  3045                           ;event_logger.c: 35: else if (gear == 'O')
  3046  002128  0E4F               	movlw	79
  3047  00212A  180F               	xorwf	store_key_log@gear^0,w,c
  3048  00212C  A4D8               	btfss	status,2,c
  3049  00212E  D011               	goto	l3122
  3050                           
  3051                           ;event_logger.c: 36: {;event_logger.c: 37: write_external_eeprom(log_iter * 10 + 6, 'O')
      +                          ;
  3052  002130  0E4F               	movlw	79
  3053  002132  6E02               	movwf	write_external_eeprom@data^0,c
  3054  002134  504D               	movf	_log_iter^0,w,c
  3055  002136  0D0A               	mullw	10
  3056  002138  50F3               	movf	243,w,c
  3057  00213A  0F06               	addlw	6
  3058  00213C  ECB2  F009         	call	_write_external_eeprom
  3059                           
  3060                           ;event_logger.c: 38: write_external_eeprom(log_iter * 10 + 7, 'N');
  3061  002140  0E4E               	movlw	78
  3062  002142  6E02               	movwf	write_external_eeprom@data^0,c
  3063  002144  504D               	movf	_log_iter^0,w,c
  3064  002146  0D0A               	mullw	10
  3065  002148  50F3               	movf	243,w,c
  3066  00214A  0F07               	addlw	7
  3067  00214C  ECB2  F009         	call	_write_external_eeprom
  3068                           
  3069                           ;event_logger.c: 39: }
  3070  002150  D079               	goto	l156
  3071  002152                     l3122:
  3072                           
  3073                           ;event_logger.c: 40: else if(gear == 'P')
  3074  002152  0E50               	movlw	80
  3075  002154  180F               	xorwf	store_key_log@gear^0,w,c
  3076  002156  A4D8               	btfss	status,2,c
  3077  002158  D011               	goto	l3126
  3078                           
  3079                           ;event_logger.c: 41: {;event_logger.c: 42: write_external_eeprom(log_iter * 10 + 6, 'P')
      +                          ;
  3080  00215A  0E50               	movlw	80
  3081  00215C  6E02               	movwf	write_external_eeprom@data^0,c
  3082  00215E  504D               	movf	_log_iter^0,w,c
  3083  002160  0D0A               	mullw	10
  3084  002162  50F3               	movf	243,w,c
  3085  002164  0F06               	addlw	6
  3086  002166  ECB2  F009         	call	_write_external_eeprom
  3087                           
  3088                           ;event_logger.c: 43: write_external_eeprom(log_iter * 10 + 7, 'A');
  3089  00216A  0E41               	movlw	65
  3090  00216C  6E02               	movwf	write_external_eeprom@data^0,c
  3091  00216E  504D               	movf	_log_iter^0,w,c
  3092  002170  0D0A               	mullw	10
  3093  002172  50F3               	movf	243,w,c
  3094  002174  0F07               	addlw	7
  3095  002176  ECB2  F009         	call	_write_external_eeprom
  3096                           
  3097                           ;event_logger.c: 44: }
  3098  00217A  D064               	goto	l156
  3099  00217C                     l3126:
  3100                           
  3101                           ;event_logger.c: 45: else if(gear == 'V')
  3102  00217C  0E56               	movlw	86
  3103  00217E  180F               	xorwf	store_key_log@gear^0,w,c
  3104  002180  A4D8               	btfss	status,2,c
  3105  002182  D011               	goto	l3130
  3106                           
  3107                           ;event_logger.c: 46: {;event_logger.c: 47: write_external_eeprom(log_iter * 10 + 6, 'V')
      +                          ;
  3108  002184  0E56               	movlw	86
  3109  002186  6E02               	movwf	write_external_eeprom@data^0,c
  3110  002188  504D               	movf	_log_iter^0,w,c
  3111  00218A  0D0A               	mullw	10
  3112  00218C  50F3               	movf	243,w,c
  3113  00218E  0F06               	addlw	6
  3114  002190  ECB2  F009         	call	_write_external_eeprom
  3115                           
  3116                           ;event_logger.c: 48: write_external_eeprom(log_iter * 10 + 7, 'L');
  3117  002194  0E4C               	movlw	76
  3118  002196  6E02               	movwf	write_external_eeprom@data^0,c
  3119  002198  504D               	movf	_log_iter^0,w,c
  3120  00219A  0D0A               	mullw	10
  3121  00219C  50F3               	movf	243,w,c
  3122  00219E  0F07               	addlw	7
  3123  0021A0  ECB2  F009         	call	_write_external_eeprom
  3124                           
  3125                           ;event_logger.c: 49: }
  3126  0021A4  D04F               	goto	l156
  3127  0021A6                     l3130:
  3128                           
  3129                           ;event_logger.c: 50: else if(gear == 'D')
  3130  0021A6  0E44               	movlw	68
  3131  0021A8  180F               	xorwf	store_key_log@gear^0,w,c
  3132  0021AA  A4D8               	btfss	status,2,c
  3133  0021AC  D011               	goto	l3134
  3134                           
  3135                           ;event_logger.c: 51: {;event_logger.c: 52: write_external_eeprom(log_iter * 10 + 6, 'D')
      +                          ;
  3136  0021AE  0E44               	movlw	68
  3137  0021B0  6E02               	movwf	write_external_eeprom@data^0,c
  3138  0021B2  504D               	movf	_log_iter^0,w,c
  3139  0021B4  0D0A               	mullw	10
  3140  0021B6  50F3               	movf	243,w,c
  3141  0021B8  0F06               	addlw	6
  3142  0021BA  ECB2  F009         	call	_write_external_eeprom
  3143                           
  3144                           ;event_logger.c: 53: write_external_eeprom(log_iter * 10 + 7, 'L');
  3145  0021BE  0E4C               	movlw	76
  3146  0021C0  6E02               	movwf	write_external_eeprom@data^0,c
  3147  0021C2  504D               	movf	_log_iter^0,w,c
  3148  0021C4  0D0A               	mullw	10
  3149  0021C6  50F3               	movf	243,w,c
  3150  0021C8  0F07               	addlw	7
  3151  0021CA  ECB2  F009         	call	_write_external_eeprom
  3152                           
  3153                           ;event_logger.c: 54: }
  3154  0021CE  D03A               	goto	l156
  3155  0021D0                     l3134:
  3156                           
  3157                           ;event_logger.c: 55: else if(gear == 'X')
  3158  0021D0  0E58               	movlw	88
  3159  0021D2  180F               	xorwf	store_key_log@gear^0,w,c
  3160  0021D4  A4D8               	btfss	status,2,c
  3161  0021D6  D011               	goto	l3138
  3162                           
  3163                           ;event_logger.c: 56: {;event_logger.c: 57: write_external_eeprom(log_iter * 10 + 6, 'C')
      +                          ;
  3164  0021D8  0E43               	movlw	67
  3165  0021DA  6E02               	movwf	write_external_eeprom@data^0,c
  3166  0021DC  504D               	movf	_log_iter^0,w,c
  3167  0021DE  0D0A               	mullw	10
  3168  0021E0  50F3               	movf	243,w,c
  3169  0021E2  0F06               	addlw	6
  3170  0021E4  ECB2  F009         	call	_write_external_eeprom
  3171                           
  3172                           ;event_logger.c: 58: write_external_eeprom(log_iter * 10 + 7, 'L');
  3173  0021E8  0E4C               	movlw	76
  3174  0021EA  6E02               	movwf	write_external_eeprom@data^0,c
  3175  0021EC  504D               	movf	_log_iter^0,w,c
  3176  0021EE  0D0A               	mullw	10
  3177  0021F0  50F3               	movf	243,w,c
  3178  0021F2  0F07               	addlw	7
  3179  0021F4  ECB2  F009         	call	_write_external_eeprom
  3180                           
  3181                           ;event_logger.c: 59: }
  3182  0021F8  D025               	goto	l156
  3183  0021FA                     l3138:
  3184                           
  3185                           ;event_logger.c: 60: else if(gear == 'W')
  3186  0021FA  0E57               	movlw	87
  3187  0021FC  180F               	xorwf	store_key_log@gear^0,w,c
  3188  0021FE  A4D8               	btfss	status,2,c
  3189  002200  D011               	goto	l3142
  3190                           
  3191                           ;event_logger.c: 61: {;event_logger.c: 62: write_external_eeprom(log_iter * 10 + 6, 'C')
      +                          ;
  3192  002202  0E43               	movlw	67
  3193  002204  6E02               	movwf	write_external_eeprom@data^0,c
  3194  002206  504D               	movf	_log_iter^0,w,c
  3195  002208  0D0A               	mullw	10
  3196  00220A  50F3               	movf	243,w,c
  3197  00220C  0F06               	addlw	6
  3198  00220E  ECB2  F009         	call	_write_external_eeprom
  3199                           
  3200                           ;event_logger.c: 63: write_external_eeprom(log_iter * 10 + 7, 'P');
  3201  002212  0E50               	movlw	80
  3202  002214  6E02               	movwf	write_external_eeprom@data^0,c
  3203  002216  504D               	movf	_log_iter^0,w,c
  3204  002218  0D0A               	mullw	10
  3205  00221A  50F3               	movf	243,w,c
  3206  00221C  0F07               	addlw	7
  3207  00221E  ECB2  F009         	call	_write_external_eeprom
  3208                           
  3209                           ;event_logger.c: 64: }
  3210  002222  D010               	goto	l156
  3211  002224                     l3142:
  3212                           
  3213                           ;event_logger.c: 65: else;event_logger.c: 66: {;event_logger.c: 67: write_external_eepro
      +                          m(log_iter * 10 + 6, 'G');
  3214  002224  0E47               	movlw	71
  3215  002226  6E02               	movwf	write_external_eeprom@data^0,c
  3216  002228  504D               	movf	_log_iter^0,w,c
  3217  00222A  0D0A               	mullw	10
  3218  00222C  50F3               	movf	243,w,c
  3219  00222E  0F06               	addlw	6
  3220  002230  ECB2  F009         	call	_write_external_eeprom
  3221                           
  3222                           ;event_logger.c: 68: write_external_eeprom(log_iter * 10 + 7, gear);
  3223  002234  C00F  F002         	movff	store_key_log@gear,write_external_eeprom@data
  3224  002238  504D               	movf	_log_iter^0,w,c
  3225  00223A  0D0A               	mullw	10
  3226  00223C  50F3               	movf	243,w,c
  3227  00223E  0F07               	addlw	7
  3228  002240  ECB2  F009         	call	_write_external_eeprom
  3229  002244                     l156:
  3230                           
  3231                           ;event_logger.c: 69: };event_logger.c: 71: write_external_eeprom(log_iter * 10 + 8, spee
      +                          d[0]);
  3232  002244  C05A  F002         	movff	_speed,write_external_eeprom@data
  3233  002248  504D               	movf	_log_iter^0,w,c
  3234  00224A  0D0A               	mullw	10
  3235  00224C  50F3               	movf	243,w,c
  3236  00224E  0F08               	addlw	8
  3237  002250  ECB2  F009         	call	_write_external_eeprom
  3238                           
  3239                           ;event_logger.c: 72: write_external_eeprom(log_iter * 10 + 9, speed[1]);
  3240  002254  C05B  F002         	movff	_speed+1,write_external_eeprom@data
  3241  002258  504D               	movf	_log_iter^0,w,c
  3242  00225A  0D0A               	mullw	10
  3243  00225C  50F3               	movf	243,w,c
  3244  00225E  0F09               	addlw	9
  3245  002260  ECB2  F009         	call	_write_external_eeprom
  3246                           
  3247                           ;event_logger.c: 74: log_iter = (log_iter + 1) % 10;
  3248  002264  0E01               	movlw	1
  3249  002266  244D               	addwf	_log_iter^0,w,c
  3250  002268  6E09               	movwf	___awmod@dividend^0,c
  3251  00226A  0E00               	movlw	0
  3252  00226C  204E               	addwfc	(_log_iter+1)^0,w,c
  3253  00226E  6E0A               	movwf	(___awmod@dividend+1)^0,c
  3254  002270  0E00               	movlw	0
  3255  002272  6E0C               	movwf	(___awmod@divisor+1)^0,c
  3256  002274  0E0A               	movlw	10
  3257  002276  6E0B               	movwf	___awmod@divisor^0,c
  3258  002278  EC96  F00B         	call	___awmod	;wreg free
  3259  00227C  C009  F04D         	movff	?___awmod,_log_iter
  3260  002280  C00A  F04E         	movff	?___awmod+1,_log_iter+1
  3261                           
  3262                           ;event_logger.c: 75: log_total_saved++;
  3263  002284  4A4B               	infsnz	_log_total_saved^0,f,c
  3264  002286  2A4C               	incf	(_log_total_saved+1)^0,f,c
  3265  002288  0012               	return		;funcret
  3266  00228A                     __end_of_store_key_log:
  3267                           	callstack 0
  3268                           
  3269 ;; *************** function _set_time *****************
  3270 ;; Defined at:
  3271 ;;		line 140 in file "main.c"
  3272 ;; Parameters:    Size  Location     Type
  3273 ;;		None
  3274 ;; Auto vars:     Size  Location     Type
  3275 ;;  time_buffer     9   20[COMRAM] unsigned char [9]
  3276 ;;  seconds         2   37[COMRAM] int 
  3277 ;;  min             2   35[COMRAM] int 
  3278 ;;  hour            2   33[COMRAM] int 
  3279 ;;  field_select    2   31[COMRAM] int 
  3280 ;;  blinker         2   18[COMRAM] unsigned int 
  3281 ;;  dummy           1   30[COMRAM] unsigned char 
  3282 ;;  exit_flag       1   29[COMRAM] unsigned char 
  3283 ;; Return value:  Size  Location     Type
  3284 ;;                  1    wreg      void 
  3285 ;; Registers used:
  3286 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3287 ;; Tracked objects:
  3288 ;;		On entry : 0/0
  3289 ;;		On exit  : 0/0
  3290 ;;		Unchanged: 0/0
  3291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3292 ;;      Params:         0       0       0       0       0       0       0
  3293 ;;      Locals:        21       0       0       0       0       0       0
  3294 ;;      Temps:          2       0       0       0       0       0       0
  3295 ;;      Totals:        23       0       0       0       0       0       0
  3296 ;;Total ram usage:       23 bytes
  3297 ;; Hardware stack levels used: 1
  3298 ;; Hardware stack levels required when called: 4
  3299 ;; This function calls:
  3300 ;;		___awdiv
  3301 ;;		___awmod
  3302 ;;		_clcd_print
  3303 ;;		_clcd_putch
  3304 ;;		_clcd_write
  3305 ;;		_delay
  3306 ;;		_read_ds1307
  3307 ;;		_read_switches
  3308 ;;		_write_ds1307
  3309 ;; This function is called by:
  3310 ;;		_go_to_menu
  3311 ;; This function uses a non-reentrant model
  3312 ;;
  3313                           
  3314                           	psect	text12
  3315  002A64                     __ptext12:
  3316                           	callstack 0
  3317  002A64                     _set_time:
  3318                           	callstack 25
  3319                           
  3320                           ;main.c: 142: clcd_write(0x01, 0);
  3321                           
  3322                           ;incstack = 0
  3323  002A64  0E00               	movlw	0
  3324  002A66  6E01               	movwf	clcd_write@control_bit^0,c
  3325  002A68  0E01               	movlw	1
  3326  002A6A  EC5F  F009         	call	_clcd_write
  3327                           
  3328                           ;main.c: 143: clcd_print("Enter New Time", (0x80 + (1)));
  3329  002A6E  0E2B               	movlw	low STR_29
  3330  002A70  6E03               	movwf	clcd_print@data^0,c
  3331  002A72  0E2F               	movlw	high STR_29
  3332  002A74  6E04               	movwf	(clcd_print@data+1)^0,c
  3333  002A76  0E81               	movlw	129
  3334  002A78  6E05               	movwf	clcd_print@addr^0,c
  3335  002A7A  EC66  F00B         	call	_clcd_print	;wreg free
  3336                           
  3337                           ;main.c: 145: unsigned char dummy;;main.c: 148: dummy = read_ds1307(0x00);
  3338  002A7E  0E00               	movlw	0
  3339  002A80  EC9D  F009         	call	_read_ds1307
  3340  002A84  6E1F               	movwf	set_time@dummy^0,c
  3341                           
  3342                           ;main.c: 149: write_ds1307(0x00, dummy | 0x80);
  3343  002A86  501F               	movf	set_time@dummy^0,w,c
  3344  002A88  0980               	iorlw	128
  3345  002A8A  6E0F               	movwf	write_ds1307@data^0,c
  3346  002A8C  0E00               	movlw	0
  3347  002A8E  EC2E  F009         	call	_write_ds1307
  3348                           
  3349                           ;main.c: 151: int hour = 0, min = 0, seconds = 0, field_select = 0;
  3350  002A92  0E00               	movlw	0
  3351  002A94  6E23               	movwf	(set_time@hour+1)^0,c
  3352  002A96  0E00               	movlw	0
  3353  002A98  6E22               	movwf	set_time@hour^0,c
  3354  002A9A  0E00               	movlw	0
  3355  002A9C  6E25               	movwf	(set_time@min+1)^0,c
  3356  002A9E  0E00               	movlw	0
  3357  002AA0  6E24               	movwf	set_time@min^0,c
  3358  002AA2  0E00               	movlw	0
  3359  002AA4  6E27               	movwf	(set_time@seconds+1)^0,c
  3360  002AA6  0E00               	movlw	0
  3361  002AA8  6E26               	movwf	set_time@seconds^0,c
  3362  002AAA  0E00               	movlw	0
  3363  002AAC  6E21               	movwf	(set_time@field_select+1)^0,c
  3364  002AAE  0E00               	movlw	0
  3365  002AB0  6E20               	movwf	set_time@field_select^0,c
  3366                           
  3367                           ;main.c: 152: unsigned int blinker = 0;
  3368  002AB2  0E00               	movlw	0
  3369  002AB4  6E14               	movwf	(set_time@blinker+1)^0,c
  3370  002AB6  0E00               	movlw	0
  3371  002AB8  6E13               	movwf	set_time@blinker^0,c
  3372                           
  3373                           ;main.c: 153: char time_buffer[9] = {0, 0, ':', 0, 0, ':', 0, 0, 0};
  3374  002ABA  EE20  F086         	lfsr	2,set_time@F10423
  3375  002ABE  EE10  F015         	lfsr	1,set_time@time_buffer
  3376  002AC2  0E08               	movlw	8
  3377  002AC4                     u2061:
  3378  002AC4  CFDB FFE3          	movff	plusw2,plusw1
  3379  002AC8  06E8               	decf	wreg,f,c
  3380  002ACA  E2FC               	bc	u2061
  3381                           
  3382                           ;main.c: 154: char exit_flag = 0;
  3383  002ACC  0E00               	movlw	0
  3384  002ACE  D0F3               	goto	L4
  3385  002AD0                     l3334:
  3386                           
  3387                           ;main.c: 157: {;main.c: 160: time_buffer[0] = ((hour / 10) % 10);
  3388  002AD0  0E00               	movlw	0
  3389  002AD2  6E04               	movwf	(___awdiv@divisor+1)^0,c
  3390  002AD4  0E0A               	movlw	10
  3391  002AD6  6E03               	movwf	___awdiv@divisor^0,c
  3392  002AD8  C022  F001         	movff	set_time@hour,___awdiv@dividend
  3393  002ADC  C023  F002         	movff	set_time@hour+1,___awdiv@dividend+1
  3394  002AE0  EC0A  F00C         	call	___awdiv	;wreg free
  3395  002AE4  C001  F009         	movff	?___awdiv,___awmod@dividend
  3396  002AE8  C002  F00A         	movff	?___awdiv+1,___awmod@dividend+1
  3397  002AEC  0E00               	movlw	0
  3398  002AEE  6E0C               	movwf	(___awmod@divisor+1)^0,c
  3399  002AF0  0E0A               	movlw	10
  3400  002AF2  6E0B               	movwf	___awmod@divisor^0,c
  3401  002AF4  EC96  F00B         	call	___awmod	;wreg free
  3402  002AF8  5009               	movf	?___awmod^0,w,c
  3403  002AFA  6E15               	movwf	set_time@time_buffer^0,c
  3404                           
  3405                           ;main.c: 161: time_buffer[1] = hour % 10;
  3406  002AFC  C022  F009         	movff	set_time@hour,___awmod@dividend
  3407  002B00  C023  F00A         	movff	set_time@hour+1,___awmod@dividend+1
  3408  002B04  0E00               	movlw	0
  3409  002B06  6E0C               	movwf	(___awmod@divisor+1)^0,c
  3410  002B08  0E0A               	movlw	10
  3411  002B0A  6E0B               	movwf	___awmod@divisor^0,c
  3412  002B0C  EC96  F00B         	call	___awmod	;wreg free
  3413  002B10  5009               	movf	?___awmod^0,w,c
  3414  002B12  6E16               	movwf	(set_time@time_buffer+1)^0,c
  3415                           
  3416                           ;main.c: 162: time_buffer[3] = ((min / 10) % 10);
  3417  002B14  0E00               	movlw	0
  3418  002B16  6E04               	movwf	(___awdiv@divisor+1)^0,c
  3419  002B18  0E0A               	movlw	10
  3420  002B1A  6E03               	movwf	___awdiv@divisor^0,c
  3421  002B1C  C024  F001         	movff	set_time@min,___awdiv@dividend
  3422  002B20  C025  F002         	movff	set_time@min+1,___awdiv@dividend+1
  3423  002B24  EC0A  F00C         	call	___awdiv	;wreg free
  3424  002B28  C001  F009         	movff	?___awdiv,___awmod@dividend
  3425  002B2C  C002  F00A         	movff	?___awdiv+1,___awmod@dividend+1
  3426  002B30  0E00               	movlw	0
  3427  002B32  6E0C               	movwf	(___awmod@divisor+1)^0,c
  3428  002B34  0E0A               	movlw	10
  3429  002B36  6E0B               	movwf	___awmod@divisor^0,c
  3430  002B38  EC96  F00B         	call	___awmod	;wreg free
  3431  002B3C  5009               	movf	?___awmod^0,w,c
  3432  002B3E  6E18               	movwf	(set_time@time_buffer+3)^0,c
  3433                           
  3434                           ;main.c: 163: time_buffer[4] = min % 10;
  3435  002B40  C024  F009         	movff	set_time@min,___awmod@dividend
  3436  002B44  C025  F00A         	movff	set_time@min+1,___awmod@dividend+1
  3437  002B48  0E00               	movlw	0
  3438  002B4A  6E0C               	movwf	(___awmod@divisor+1)^0,c
  3439  002B4C  0E0A               	movlw	10
  3440  002B4E  6E0B               	movwf	___awmod@divisor^0,c
  3441  002B50  EC96  F00B         	call	___awmod	;wreg free
  3442  002B54  5009               	movf	?___awmod^0,w,c
  3443  002B56  6E19               	movwf	(set_time@time_buffer+4)^0,c
  3444                           
  3445                           ;main.c: 164: time_buffer[6] = ((seconds / 10) % 10);
  3446  002B58  0E00               	movlw	0
  3447  002B5A  6E04               	movwf	(___awdiv@divisor+1)^0,c
  3448  002B5C  0E0A               	movlw	10
  3449  002B5E  6E03               	movwf	___awdiv@divisor^0,c
  3450  002B60  C026  F001         	movff	set_time@seconds,___awdiv@dividend
  3451  002B64  C027  F002         	movff	set_time@seconds+1,___awdiv@dividend+1
  3452  002B68  EC0A  F00C         	call	___awdiv	;wreg free
  3453  002B6C  C001  F009         	movff	?___awdiv,___awmod@dividend
  3454  002B70  C002  F00A         	movff	?___awdiv+1,___awmod@dividend+1
  3455  002B74  0E00               	movlw	0
  3456  002B76  6E0C               	movwf	(___awmod@divisor+1)^0,c
  3457  002B78  0E0A               	movlw	10
  3458  002B7A  6E0B               	movwf	___awmod@divisor^0,c
  3459  002B7C  EC96  F00B         	call	___awmod	;wreg free
  3460  002B80  5009               	movf	?___awmod^0,w,c
  3461  002B82  6E1B               	movwf	(set_time@time_buffer+6)^0,c
  3462                           
  3463                           ;main.c: 165: time_buffer[7] = seconds % 10;
  3464  002B84  C026  F009         	movff	set_time@seconds,___awmod@dividend
  3465  002B88  C027  F00A         	movff	set_time@seconds+1,___awmod@dividend+1
  3466  002B8C  0E00               	movlw	0
  3467  002B8E  6E0C               	movwf	(___awmod@divisor+1)^0,c
  3468  002B90  0E0A               	movlw	10
  3469  002B92  6E0B               	movwf	___awmod@divisor^0,c
  3470  002B94  EC96  F00B         	call	___awmod	;wreg free
  3471  002B98  5009               	movf	?___awmod^0,w,c
  3472  002B9A  6E1C               	movwf	(set_time@time_buffer+7)^0,c
  3473                           
  3474                           ;main.c: 167: clcd_putch(time_buffer[0] + '0', (0xC0 + (0)));
  3475  002B9C  0EC0               	movlw	192
  3476  002B9E  6E09               	movwf	clcd_putch@addr^0,c
  3477  002BA0  5015               	movf	set_time@time_buffer^0,w,c
  3478  002BA2  0F30               	addlw	48
  3479  002BA4  EC15  F009         	call	_clcd_putch
  3480                           
  3481                           ;main.c: 168: clcd_putch(time_buffer[1] + '0', (0xC0 + (1)));
  3482  002BA8  0EC1               	movlw	193
  3483  002BAA  6E09               	movwf	clcd_putch@addr^0,c
  3484  002BAC  5016               	movf	(set_time@time_buffer+1)^0,w,c
  3485  002BAE  0F30               	addlw	48
  3486  002BB0  EC15  F009         	call	_clcd_putch
  3487                           
  3488                           ;main.c: 169: clcd_putch(time_buffer[2], (0xC0 + (2)));
  3489  002BB4  0EC2               	movlw	194
  3490  002BB6  6E09               	movwf	clcd_putch@addr^0,c
  3491  002BB8  5017               	movf	(set_time@time_buffer+2)^0,w,c
  3492  002BBA  EC15  F009         	call	_clcd_putch
  3493                           
  3494                           ;main.c: 170: clcd_putch(time_buffer[3] + '0', (0xC0 + (3)));
  3495  002BBE  0EC3               	movlw	195
  3496  002BC0  6E09               	movwf	clcd_putch@addr^0,c
  3497  002BC2  5018               	movf	(set_time@time_buffer+3)^0,w,c
  3498  002BC4  0F30               	addlw	48
  3499  002BC6  EC15  F009         	call	_clcd_putch
  3500                           
  3501                           ;main.c: 171: clcd_putch(time_buffer[4] + '0', (0xC0 + (4)));
  3502  002BCA  0EC4               	movlw	196
  3503  002BCC  6E09               	movwf	clcd_putch@addr^0,c
  3504  002BCE  5019               	movf	(set_time@time_buffer+4)^0,w,c
  3505  002BD0  0F30               	addlw	48
  3506  002BD2  EC15  F009         	call	_clcd_putch
  3507                           
  3508                           ;main.c: 172: clcd_putch(time_buffer[5], (0xC0 + (5)));
  3509  002BD6  0EC5               	movlw	197
  3510  002BD8  6E09               	movwf	clcd_putch@addr^0,c
  3511  002BDA  501A               	movf	(set_time@time_buffer+5)^0,w,c
  3512  002BDC  EC15  F009         	call	_clcd_putch
  3513                           
  3514                           ;main.c: 173: clcd_putch(time_buffer[6] + '0', (0xC0 + (6)));
  3515  002BE0  0EC6               	movlw	198
  3516  002BE2  6E09               	movwf	clcd_putch@addr^0,c
  3517  002BE4  501B               	movf	(set_time@time_buffer+6)^0,w,c
  3518  002BE6  0F30               	addlw	48
  3519  002BE8  EC15  F009         	call	_clcd_putch
  3520                           
  3521                           ;main.c: 174: clcd_putch(time_buffer[7] + '0', (0xC0 + (7)));
  3522  002BEC  0EC7               	movlw	199
  3523  002BEE  6E09               	movwf	clcd_putch@addr^0,c
  3524  002BF0  501C               	movf	(set_time@time_buffer+7)^0,w,c
  3525  002BF2  0F30               	addlw	48
  3526  002BF4  EC15  F009         	call	_clcd_putch
  3527                           
  3528                           ;main.c: 176: if (blinker++ <= 20000)
  3529  002BF8  5013               	movf	set_time@blinker^0,w,c
  3530  002BFA  6E11               	movwf	??_set_time^0,c
  3531  002BFC  5014               	movf	(set_time@blinker+1)^0,w,c
  3532  002BFE  6E12               	movwf	(??_set_time+1)^0,c
  3533  002C00  4A13               	infsnz	set_time@blinker^0,f,c
  3534  002C02  2A14               	incf	(set_time@blinker+1)^0,f,c
  3535  002C04  0E21               	movlw	33
  3536  002C06  5C11               	subwf	??_set_time^0,w,c
  3537  002C08  0E4E               	movlw	78
  3538  002C0A  5812               	subwfb	(??_set_time+1)^0,w,c
  3539  002C0C  A0D8               	btfss	status,0,c
  3540  002C0E  D022               	goto	l3356
  3541  002C10  D09A               	goto	l3376
  3542  002C12                     l3348:
  3543                           
  3544                           ;main.c: 181: clcd_putch(' ', (0xC0 + (0)));
  3545  002C12  0EC0               	movlw	192
  3546  002C14  6E09               	movwf	clcd_putch@addr^0,c
  3547  002C16  0E20               	movlw	32
  3548  002C18  EC15  F009         	call	_clcd_putch
  3549                           
  3550                           ;main.c: 182: clcd_putch(' ', (0xC0 + (1)));
  3551  002C1C  0EC1               	movlw	193
  3552  002C1E  6E09               	movwf	clcd_putch@addr^0,c
  3553  002C20  0E20               	movlw	32
  3554  002C22  EC15  F009         	call	_clcd_putch
  3555                           
  3556                           ;main.c: 183: break;
  3557  002C26  D08F               	goto	l3376
  3558  002C28                     l3350:
  3559                           
  3560                           ;main.c: 185: clcd_putch(' ', (0xC0 + (3)));
  3561  002C28  0EC3               	movlw	195
  3562  002C2A  6E09               	movwf	clcd_putch@addr^0,c
  3563  002C2C  0E20               	movlw	32
  3564  002C2E  EC15  F009         	call	_clcd_putch
  3565                           
  3566                           ;main.c: 186: clcd_putch(' ', (0xC0 + (4)));
  3567  002C32  0EC4               	movlw	196
  3568  002C34  6E09               	movwf	clcd_putch@addr^0,c
  3569  002C36  0E20               	movlw	32
  3570  002C38  EC15  F009         	call	_clcd_putch
  3571                           
  3572                           ;main.c: 187: break;
  3573  002C3C  D084               	goto	l3376
  3574  002C3E                     l3352:
  3575                           
  3576                           ;main.c: 189: clcd_putch(' ', (0xC0 + (6)));
  3577  002C3E  0EC6               	movlw	198
  3578  002C40  6E09               	movwf	clcd_putch@addr^0,c
  3579  002C42  0E20               	movlw	32
  3580  002C44  EC15  F009         	call	_clcd_putch
  3581                           
  3582                           ;main.c: 190: clcd_putch(' ', (0xC0 + (7)));
  3583  002C48  0EC7               	movlw	199
  3584  002C4A  6E09               	movwf	clcd_putch@addr^0,c
  3585  002C4C  0E20               	movlw	32
  3586  002C4E  EC15  F009         	call	_clcd_putch
  3587                           
  3588                           ;main.c: 191: break;
  3589  002C52  D079               	goto	l3376
  3590  002C54                     l3356:
  3591  002C54  C020  F011         	movff	set_time@field_select,??_set_time
  3592  002C58  C021  F012         	movff	set_time@field_select+1,??_set_time+1
  3593                           
  3594                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3595                           ; Switch size 1, requested type "simple"
  3596                           ; Number of cases is 1, Range of values is 0 to 0
  3597                           ; switch strategies available:
  3598                           ; Name         Instructions Cycles
  3599                           ; simple_byte            4     3 (average)
  3600                           ;	Chosen strategy is simple_byte
  3601  002C5C  5012               	movf	(??_set_time+1)^0,w,c
  3602  002C5E  0A00               	xorlw	0	; case 0
  3603  002C60  A4D8               	btfss	status,2,c
  3604  002C62  D071               	goto	l3376
  3605                           
  3606                           ; Switch size 1, requested type "simple"
  3607                           ; Number of cases is 3, Range of values is 0 to 2
  3608                           ; switch strategies available:
  3609                           ; Name         Instructions Cycles
  3610                           ; simple_byte           10     6 (average)
  3611                           ;	Chosen strategy is simple_byte
  3612  002C64  5011               	movf	??_set_time^0,w,c
  3613  002C66  0A00               	xorlw	0	; case 0
  3614  002C68  B4D8               	btfsc	status,2,c
  3615  002C6A  D7D3               	goto	l3348
  3616  002C6C  0A01               	xorlw	1	; case 1
  3617  002C6E  B4D8               	btfsc	status,2,c
  3618  002C70  D7DB               	goto	l3350
  3619  002C72  0A03               	xorlw	3	; case 2
  3620  002C74  B4D8               	btfsc	status,2,c
  3621  002C76  D7E3               	goto	l3352
  3622  002C78  D066               	goto	l3376
  3623  002C7A                     l3358:
  3624                           
  3625                           ;main.c: 198: field_select = (field_select + 1) % 3;
  3626  002C7A  0E01               	movlw	1
  3627  002C7C  2420               	addwf	set_time@field_select^0,w,c
  3628  002C7E  6E09               	movwf	___awmod@dividend^0,c
  3629  002C80  0E00               	movlw	0
  3630  002C82  2021               	addwfc	(set_time@field_select+1)^0,w,c
  3631  002C84  6E0A               	movwf	(___awmod@dividend+1)^0,c
  3632  002C86  0E00               	movlw	0
  3633  002C88  6E0C               	movwf	(___awmod@divisor+1)^0,c
  3634  002C8A  0E03               	movlw	3
  3635  002C8C  6E0B               	movwf	___awmod@divisor^0,c
  3636  002C8E  EC96  F00B         	call	___awmod	;wreg free
  3637  002C92  C009  F020         	movff	?___awmod,set_time@field_select
  3638  002C96  C00A  F021         	movff	?___awmod+1,set_time@field_select+1
  3639                           
  3640                           ;main.c: 199: break;
  3641  002C9A  D05E               	goto	l504
  3642  002C9C                     l3360:
  3643                           
  3644                           ;main.c: 201: {;main.c: 202: delay(5);
  3645  002C9C  0E00               	movlw	0
  3646  002C9E  6E02               	movwf	(delay@ms+1)^0,c
  3647  002CA0  0E05               	movlw	5
  3648  002CA2  6E01               	movwf	delay@ms^0,c
  3649  002CA4  EC23  F00A         	call	_delay	;wreg free
  3650                           
  3651                           ;main.c: 204: if (read_switches(0) == 4)
  3652  002CA8  0E00               	movlw	0
  3653  002CAA  EC41  F00A         	call	_read_switches
  3654  002CAE  0A04               	xorlw	4
  3655  002CB0  A4D8               	btfss	status,2,c
  3656  002CB2  D036               	goto	l3372
  3657                           
  3658                           ;main.c: 205: exit_flag = 1;
  3659  002CB4  0E01               	movlw	1
  3660  002CB6                     L4:
  3661  002CB6  6E1E               	movwf	set_time@exit_flag^0,c
  3662  002CB8  D04F               	goto	l504
  3663  002CBA                     l3364:
  3664                           
  3665                           ;main.c: 211: hour = (hour + 1) % 24;
  3666  002CBA  0E01               	movlw	1
  3667  002CBC  2422               	addwf	set_time@hour^0,w,c
  3668  002CBE  6E09               	movwf	___awmod@dividend^0,c
  3669  002CC0  0E00               	movlw	0
  3670  002CC2  2023               	addwfc	(set_time@hour+1)^0,w,c
  3671  002CC4  6E0A               	movwf	(___awmod@dividend+1)^0,c
  3672  002CC6  0E00               	movlw	0
  3673  002CC8  6E0C               	movwf	(___awmod@divisor+1)^0,c
  3674  002CCA  0E18               	movlw	24
  3675  002CCC  6E0B               	movwf	___awmod@divisor^0,c
  3676  002CCE  EC96  F00B         	call	___awmod	;wreg free
  3677  002CD2  C009  F022         	movff	?___awmod,set_time@hour
  3678  002CD6  C00A  F023         	movff	?___awmod+1,set_time@hour+1
  3679                           
  3680                           ;main.c: 212: break;
  3681  002CDA  D03E               	goto	l504
  3682  002CDC                     l3366:
  3683                           
  3684                           ;main.c: 214: min = (min + 1) % 60;
  3685  002CDC  0E01               	movlw	1
  3686  002CDE  2424               	addwf	set_time@min^0,w,c
  3687  002CE0  6E09               	movwf	___awmod@dividend^0,c
  3688  002CE2  0E00               	movlw	0
  3689  002CE4  2025               	addwfc	(set_time@min+1)^0,w,c
  3690  002CE6  6E0A               	movwf	(___awmod@dividend+1)^0,c
  3691  002CE8  0E00               	movlw	0
  3692  002CEA  6E0C               	movwf	(___awmod@divisor+1)^0,c
  3693  002CEC  0E3C               	movlw	60
  3694  002CEE  6E0B               	movwf	___awmod@divisor^0,c
  3695  002CF0  EC96  F00B         	call	___awmod	;wreg free
  3696  002CF4  C009  F024         	movff	?___awmod,set_time@min
  3697  002CF8  C00A  F025         	movff	?___awmod+1,set_time@min+1
  3698                           
  3699                           ;main.c: 215: break;
  3700  002CFC  D02D               	goto	l504
  3701  002CFE                     l3368:
  3702                           
  3703                           ;main.c: 217: seconds = (seconds + 1) % 60;
  3704  002CFE  0E01               	movlw	1
  3705  002D00  2426               	addwf	set_time@seconds^0,w,c
  3706  002D02  6E09               	movwf	___awmod@dividend^0,c
  3707  002D04  0E00               	movlw	0
  3708  002D06  2027               	addwfc	(set_time@seconds+1)^0,w,c
  3709  002D08  6E0A               	movwf	(___awmod@dividend+1)^0,c
  3710  002D0A  0E00               	movlw	0
  3711  002D0C  6E0C               	movwf	(___awmod@divisor+1)^0,c
  3712  002D0E  0E3C               	movlw	60
  3713  002D10  6E0B               	movwf	___awmod@divisor^0,c
  3714  002D12  EC96  F00B         	call	___awmod	;wreg free
  3715  002D16  C009  F026         	movff	?___awmod,set_time@seconds
  3716  002D1A  C00A  F027         	movff	?___awmod+1,set_time@seconds+1
  3717                           
  3718                           ;main.c: 218: break;
  3719  002D1E  D01C               	goto	l504
  3720  002D20                     l3372:
  3721  002D20  C020  F011         	movff	set_time@field_select,??_set_time
  3722  002D24  C021  F012         	movff	set_time@field_select+1,??_set_time+1
  3723                           
  3724                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3725                           ; Switch size 1, requested type "simple"
  3726                           ; Number of cases is 1, Range of values is 0 to 0
  3727                           ; switch strategies available:
  3728                           ; Name         Instructions Cycles
  3729                           ; simple_byte            4     3 (average)
  3730                           ;	Chosen strategy is simple_byte
  3731  002D28  5012               	movf	(??_set_time+1)^0,w,c
  3732  002D2A  0A00               	xorlw	0	; case 0
  3733  002D2C  A4D8               	btfss	status,2,c
  3734  002D2E  D014               	goto	l504
  3735                           
  3736                           ; Switch size 1, requested type "simple"
  3737                           ; Number of cases is 3, Range of values is 0 to 2
  3738                           ; switch strategies available:
  3739                           ; Name         Instructions Cycles
  3740                           ; simple_byte           10     6 (average)
  3741                           ;	Chosen strategy is simple_byte
  3742  002D30  5011               	movf	??_set_time^0,w,c
  3743  002D32  0A00               	xorlw	0	; case 0
  3744  002D34  B4D8               	btfsc	status,2,c
  3745  002D36  D7C1               	goto	l3364
  3746  002D38  0A01               	xorlw	1	; case 1
  3747  002D3A  B4D8               	btfsc	status,2,c
  3748  002D3C  D7CF               	goto	l3366
  3749  002D3E  0A03               	xorlw	3	; case 2
  3750  002D40  B4D8               	btfsc	status,2,c
  3751  002D42  D7DD               	goto	l3368
  3752  002D44  D009               	goto	l504
  3753  002D46                     l3376:
  3754  002D46  0E01               	movlw	1
  3755  002D48  EC41  F00A         	call	_read_switches
  3756                           
  3757                           ; Switch size 1, requested type "simple"
  3758                           ; Number of cases is 2, Range of values is 4 to 5
  3759                           ; switch strategies available:
  3760                           ; Name         Instructions Cycles
  3761                           ; simple_byte            7     4 (average)
  3762                           ;	Chosen strategy is simple_byte
  3763  002D4C  0A04               	xorlw	4	; case 4
  3764  002D4E  B4D8               	btfsc	status,2,c
  3765  002D50  D7A5               	goto	l3360
  3766  002D52  0A01               	xorlw	1	; case 5
  3767  002D54  B4D8               	btfsc	status,2,c
  3768  002D56  D791               	goto	l3358
  3769  002D58                     l504:
  3770  002D58  501E               	movf	set_time@exit_flag^0,w,c
  3771  002D5A  B4D8               	btfsc	status,2,c
  3772  002D5C  D6B9               	goto	l3334
  3773                           
  3774                           ;main.c: 224: };main.c: 227: static unsigned char clock_reg[3];;main.c: 229: clock_reg[0
      +                          ] = read_ds1307(0x02);
  3775  002D5E  0E02               	movlw	2
  3776  002D60  EC9D  F009         	call	_read_ds1307
  3777  002D64  6E45               	movwf	set_time@clock_reg^0,c
  3778                           
  3779                           ;main.c: 230: clock_reg[1] = read_ds1307(0x01);
  3780  002D66  0E01               	movlw	1
  3781  002D68  EC9D  F009         	call	_read_ds1307
  3782  002D6C  6E46               	movwf	(set_time@clock_reg+1)^0,c
  3783                           
  3784                           ;main.c: 231: clock_reg[2] = read_ds1307(0x00);
  3785  002D6E  0E00               	movlw	0
  3786  002D70  EC9D  F009         	call	_read_ds1307
  3787  002D74  6E47               	movwf	(set_time@clock_reg+2)^0,c
  3788                           
  3789                           ;main.c: 235: write_ds1307(0x02, (clock_reg[0] & 0xCF) | (hour / 10 << 4));
  3790  002D76  C022  F001         	movff	set_time@hour,___awdiv@dividend
  3791  002D7A  C023  F002         	movff	set_time@hour+1,___awdiv@dividend+1
  3792  002D7E  0E00               	movlw	0
  3793  002D80  6E04               	movwf	(___awdiv@divisor+1)^0,c
  3794  002D82  0E0A               	movlw	10
  3795  002D84  6E03               	movwf	___awdiv@divisor^0,c
  3796  002D86  EC0A  F00C         	call	___awdiv	;wreg free
  3797  002D8A  3A01               	swapf	?___awdiv^0,f,c
  3798  002D8C  0EF0               	movlw	240
  3799  002D8E  1601               	andwf	?___awdiv^0,f,c
  3800  002D90  5045               	movf	set_time@clock_reg^0,w,c
  3801  002D92  0BCF               	andlw	207
  3802  002D94  1001               	iorwf	?___awdiv^0,w,c
  3803  002D96  6E0F               	movwf	write_ds1307@data^0,c
  3804  002D98  0E02               	movlw	2
  3805  002D9A  EC2E  F009         	call	_write_ds1307
  3806                           
  3807                           ;main.c: 236: write_ds1307(0x02, (clock_reg[0] & 0xF0) | (hour % 10));
  3808  002D9E  C022  F009         	movff	set_time@hour,___awmod@dividend
  3809  002DA2  C023  F00A         	movff	set_time@hour+1,___awmod@dividend+1
  3810  002DA6  0E00               	movlw	0
  3811  002DA8  6E0C               	movwf	(___awmod@divisor+1)^0,c
  3812  002DAA  0E0A               	movlw	10
  3813  002DAC  6E0B               	movwf	___awmod@divisor^0,c
  3814  002DAE  EC96  F00B         	call	___awmod	;wreg free
  3815  002DB2  5045               	movf	set_time@clock_reg^0,w,c
  3816  002DB4  0BF0               	andlw	240
  3817  002DB6  1009               	iorwf	?___awmod^0,w,c
  3818  002DB8  6E0F               	movwf	write_ds1307@data^0,c
  3819  002DBA  0E02               	movlw	2
  3820  002DBC  EC2E  F009         	call	_write_ds1307
  3821                           
  3822                           ;main.c: 239: write_ds1307(0x01, (clock_reg[1] & 0x0F) | (min / 10 << 4));
  3823  002DC0  C024  F001         	movff	set_time@min,___awdiv@dividend
  3824  002DC4  C025  F002         	movff	set_time@min+1,___awdiv@dividend+1
  3825  002DC8  0E00               	movlw	0
  3826  002DCA  6E04               	movwf	(___awdiv@divisor+1)^0,c
  3827  002DCC  0E0A               	movlw	10
  3828  002DCE  6E03               	movwf	___awdiv@divisor^0,c
  3829  002DD0  EC0A  F00C         	call	___awdiv	;wreg free
  3830  002DD4  3A01               	swapf	?___awdiv^0,f,c
  3831  002DD6  0EF0               	movlw	240
  3832  002DD8  1601               	andwf	?___awdiv^0,f,c
  3833  002DDA  5046               	movf	(set_time@clock_reg+1)^0,w,c
  3834  002DDC  0B0F               	andlw	15
  3835  002DDE  1001               	iorwf	?___awdiv^0,w,c
  3836  002DE0  6E0F               	movwf	write_ds1307@data^0,c
  3837  002DE2  0E01               	movlw	1
  3838  002DE4  EC2E  F009         	call	_write_ds1307
  3839                           
  3840                           ;main.c: 240: write_ds1307(0x01, (clock_reg[1] & 0xF0) | min % 10);
  3841  002DE8  C024  F009         	movff	set_time@min,___awmod@dividend
  3842  002DEC  C025  F00A         	movff	set_time@min+1,___awmod@dividend+1
  3843  002DF0  0E00               	movlw	0
  3844  002DF2  6E0C               	movwf	(___awmod@divisor+1)^0,c
  3845  002DF4  0E0A               	movlw	10
  3846  002DF6  6E0B               	movwf	___awmod@divisor^0,c
  3847  002DF8  EC96  F00B         	call	___awmod	;wreg free
  3848  002DFC  5046               	movf	(set_time@clock_reg+1)^0,w,c
  3849  002DFE  0BF0               	andlw	240
  3850  002E00  1009               	iorwf	?___awmod^0,w,c
  3851  002E02  6E0F               	movwf	write_ds1307@data^0,c
  3852  002E04  0E01               	movlw	1
  3853  002E06  EC2E  F009         	call	_write_ds1307
  3854                           
  3855                           ;main.c: 243: write_ds1307(0x00, (clock_reg[2] & 0x0F) | (seconds / 10 << 4));
  3856  002E0A  C026  F001         	movff	set_time@seconds,___awdiv@dividend
  3857  002E0E  C027  F002         	movff	set_time@seconds+1,___awdiv@dividend+1
  3858  002E12  0E00               	movlw	0
  3859  002E14  6E04               	movwf	(___awdiv@divisor+1)^0,c
  3860  002E16  0E0A               	movlw	10
  3861  002E18  6E03               	movwf	___awdiv@divisor^0,c
  3862  002E1A  EC0A  F00C         	call	___awdiv	;wreg free
  3863  002E1E  3A01               	swapf	?___awdiv^0,f,c
  3864  002E20  0EF0               	movlw	240
  3865  002E22  1601               	andwf	?___awdiv^0,f,c
  3866  002E24  5047               	movf	(set_time@clock_reg+2)^0,w,c
  3867  002E26  0B0F               	andlw	15
  3868  002E28  1001               	iorwf	?___awdiv^0,w,c
  3869  002E2A  6E0F               	movwf	write_ds1307@data^0,c
  3870  002E2C  0E00               	movlw	0
  3871  002E2E  EC2E  F009         	call	_write_ds1307
  3872                           
  3873                           ;main.c: 244: write_ds1307(0x00, (clock_reg[2] & 0xF0) | seconds % 10);
  3874  002E32  C026  F009         	movff	set_time@seconds,___awmod@dividend
  3875  002E36  C027  F00A         	movff	set_time@seconds+1,___awmod@dividend+1
  3876  002E3A  0E00               	movlw	0
  3877  002E3C  6E0C               	movwf	(___awmod@divisor+1)^0,c
  3878  002E3E  0E0A               	movlw	10
  3879  002E40  6E0B               	movwf	___awmod@divisor^0,c
  3880  002E42  EC96  F00B         	call	___awmod	;wreg free
  3881  002E46  5047               	movf	(set_time@clock_reg+2)^0,w,c
  3882  002E48  0BF0               	andlw	240
  3883  002E4A  1009               	iorwf	?___awmod^0,w,c
  3884  002E4C  6E0F               	movwf	write_ds1307@data^0,c
  3885  002E4E  0E00               	movlw	0
  3886  002E50  EC2E  F009         	call	_write_ds1307
  3887                           
  3888                           ;main.c: 247: dummy = read_ds1307(0x00);
  3889  002E54  0E00               	movlw	0
  3890  002E56  EC9D  F009         	call	_read_ds1307
  3891  002E5A  6E1F               	movwf	set_time@dummy^0,c
  3892                           
  3893                           ;main.c: 248: write_ds1307(0x00, dummy & 0x7F);
  3894  002E5C  501F               	movf	set_time@dummy^0,w,c
  3895  002E5E  0B7F               	andlw	127
  3896  002E60  6E0F               	movwf	write_ds1307@data^0,c
  3897  002E62  0E00               	movlw	0
  3898  002E64  EC2E  F009         	call	_write_ds1307
  3899                           
  3900                           ;main.c: 250: clcd_write(0x01, 0);
  3901  002E68  0E00               	movlw	0
  3902  002E6A  6E01               	movwf	clcd_write@control_bit^0,c
  3903  002E6C  0E01               	movlw	1
  3904  002E6E  EC5F  F009         	call	_clcd_write
  3905                           
  3906                           ;main.c: 251: clcd_print("TIME UPDATED!", (0x80 + (1)));
  3907  002E72  0E76               	movlw	low STR_30
  3908  002E74  6E03               	movwf	clcd_print@data^0,c
  3909  002E76  0E2F               	movlw	high STR_30
  3910  002E78  6E04               	movwf	(clcd_print@data+1)^0,c
  3911  002E7A  0E81               	movlw	129
  3912  002E7C  6E05               	movwf	clcd_print@addr^0,c
  3913  002E7E  EC66  F00B         	call	_clcd_print	;wreg free
  3914                           
  3915                           ;main.c: 252: delay(5);
  3916  002E82  0E00               	movlw	0
  3917  002E84  6E02               	movwf	(delay@ms+1)^0,c
  3918  002E86  0E05               	movlw	5
  3919  002E88  6E01               	movwf	delay@ms^0,c
  3920  002E8A  EC23  F00A         	call	_delay	;wreg free
  3921                           
  3922                           ;main.c: 253: clcd_write(0x01, 0);
  3923  002E8E  0E00               	movlw	0
  3924  002E90  6E01               	movwf	clcd_write@control_bit^0,c
  3925  002E92  0E01               	movlw	1
  3926  002E94  EC5F  F009         	call	_clcd_write
  3927  002E98  0012               	return		;funcret
  3928  002E9A                     __end_of_set_time:
  3929                           	callstack 0
  3930                           
  3931 ;; *************** function _write_ds1307 *****************
  3932 ;; Defined at:
  3933 ;;		line 58 in file "ds1307.c"
  3934 ;; Parameters:    Size  Location     Type
  3935 ;;  address         1    wreg     unsigned char 
  3936 ;;  data            1   14[COMRAM] unsigned char 
  3937 ;; Auto vars:     Size  Location     Type
  3938 ;;  address         1   15[COMRAM] unsigned char 
  3939 ;; Return value:  Size  Location     Type
  3940 ;;                  1    wreg      void 
  3941 ;; Registers used:
  3942 ;;		wreg, status,2, cstack
  3943 ;; Tracked objects:
  3944 ;;		On entry : 0/0
  3945 ;;		On exit  : 0/0
  3946 ;;		Unchanged: 0/0
  3947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3948 ;;      Params:         1       0       0       0       0       0       0
  3949 ;;      Locals:         1       0       0       0       0       0       0
  3950 ;;      Temps:          0       0       0       0       0       0       0
  3951 ;;      Totals:         2       0       0       0       0       0       0
  3952 ;;Total ram usage:        2 bytes
  3953 ;; Hardware stack levels used: 1
  3954 ;; Hardware stack levels required when called: 2
  3955 ;; This function calls:
  3956 ;;		_i2c_start
  3957 ;;		_i2c_stop
  3958 ;;		_i2c_write
  3959 ;; This function is called by:
  3960 ;;		_init_ds1307
  3961 ;;		_set_time
  3962 ;; This function uses a non-reentrant model
  3963 ;;
  3964                           
  3965                           	psect	text13
  3966  00125C                     __ptext13:
  3967                           	callstack 0
  3968  00125C                     _write_ds1307:
  3969                           	callstack 26
  3970                           
  3971                           ;incstack = 0
  3972                           ;write_ds1307@address stored from wreg
  3973  00125C  6E10               	movwf	write_ds1307@address^0,c
  3974                           
  3975                           ;ds1307.c: 60: i2c_start();
  3976  00125E  ECE7  F008         	call	_i2c_start	;wreg free
  3977                           
  3978                           ;ds1307.c: 61: i2c_write(0xD0);
  3979  001262  0ED0               	movlw	208
  3980  001264  ECF5  F008         	call	_i2c_write
  3981                           
  3982                           ;ds1307.c: 62: i2c_write(address);
  3983  001268  5010               	movf	write_ds1307@address^0,w,c
  3984  00126A  ECF5  F008         	call	_i2c_write
  3985                           
  3986                           ;ds1307.c: 63: i2c_write(data);
  3987  00126E  500F               	movf	write_ds1307@data^0,w,c
  3988  001270  ECF5  F008         	call	_i2c_write
  3989                           
  3990                           ;ds1307.c: 64: i2c_stop();
  3991  001274  ECEB  F008         	call	_i2c_stop	;wreg free
  3992  001278  0012               	return		;funcret
  3993  00127A                     __end_of_write_ds1307:
  3994                           	callstack 0
  3995                           
  3996 ;; *************** function ___awmod *****************
  3997 ;; Defined at:
  3998 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\awmod.c"
  3999 ;; Parameters:    Size  Location     Type
  4000 ;;  dividend        2    8[COMRAM] int 
  4001 ;;  divisor         2   10[COMRAM] int 
  4002 ;; Auto vars:     Size  Location     Type
  4003 ;;  sign            1   13[COMRAM] unsigned char 
  4004 ;;  counter         1   12[COMRAM] unsigned char 
  4005 ;; Return value:  Size  Location     Type
  4006 ;;                  2    8[COMRAM] int 
  4007 ;; Registers used:
  4008 ;;		wreg, status,2, status,0
  4009 ;; Tracked objects:
  4010 ;;		On entry : 0/0
  4011 ;;		On exit  : 0/0
  4012 ;;		Unchanged: 0/0
  4013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4014 ;;      Params:         4       0       0       0       0       0       0
  4015 ;;      Locals:         2       0       0       0       0       0       0
  4016 ;;      Temps:          0       0       0       0       0       0       0
  4017 ;;      Totals:         6       0       0       0       0       0       0
  4018 ;;Total ram usage:        6 bytes
  4019 ;; Hardware stack levels used: 1
  4020 ;; This function calls:
  4021 ;;		Nothing
  4022 ;; This function is called by:
  4023 ;;		_store_key_log
  4024 ;;		_set_time
  4025 ;; This function uses a non-reentrant model
  4026 ;;
  4027                           
  4028                           	psect	text14
  4029  00172C                     __ptext14:
  4030                           	callstack 0
  4031  00172C                     ___awmod:
  4032                           	callstack 29
  4033                           
  4034                           ;incstack = 0
  4035  00172C  0E00               	movlw	0
  4036  00172E  6E0E               	movwf	___awmod@sign^0,c
  4037  001730  AE0A               	btfss	(___awmod@dividend+1)^0,7,c
  4038  001732  D006               	goto	l3046
  4039  001734  6C09               	negf	___awmod@dividend^0,c
  4040  001736  1E0A               	comf	(___awmod@dividend+1)^0,f,c
  4041  001738  B0D8               	btfsc	status,0,c
  4042  00173A  2A0A               	incf	(___awmod@dividend+1)^0,f,c
  4043  00173C  0E01               	movlw	1
  4044  00173E  6E0E               	movwf	___awmod@sign^0,c
  4045  001740                     l3046:
  4046  001740  AE0C               	btfss	(___awmod@divisor+1)^0,7,c
  4047  001742  D004               	goto	l3050
  4048  001744  6C0B               	negf	___awmod@divisor^0,c
  4049  001746  1E0C               	comf	(___awmod@divisor+1)^0,f,c
  4050  001748  B0D8               	btfsc	status,0,c
  4051  00174A  2A0C               	incf	(___awmod@divisor+1)^0,f,c
  4052  00174C                     l3050:
  4053  00174C  500B               	movf	___awmod@divisor^0,w,c
  4054  00174E  100C               	iorwf	(___awmod@divisor+1)^0,w,c
  4055  001750  B4D8               	btfsc	status,2,c
  4056  001752  D018               	goto	l3066
  4057  001754  0E01               	movlw	1
  4058  001756  6E0D               	movwf	___awmod@counter^0,c
  4059  001758  D004               	goto	l3056
  4060  00175A                     l3054:
  4061  00175A  90D8               	bcf	status,0,c
  4062  00175C  360B               	rlcf	___awmod@divisor^0,f,c
  4063  00175E  360C               	rlcf	(___awmod@divisor+1)^0,f,c
  4064  001760  2A0D               	incf	___awmod@counter^0,f,c
  4065  001762                     l3056:
  4066  001762  AE0C               	btfss	(___awmod@divisor+1)^0,7,c
  4067  001764  D7FA               	goto	l3054
  4068  001766                     u1790:
  4069  001766  500B               	movf	___awmod@divisor^0,w,c
  4070  001768  5C09               	subwf	___awmod@dividend^0,w,c
  4071  00176A  500C               	movf	(___awmod@divisor+1)^0,w,c
  4072  00176C  580A               	subwfb	(___awmod@dividend+1)^0,w,c
  4073  00176E  A0D8               	btfss	status,0,c
  4074  001770  D004               	goto	l3062
  4075  001772  500B               	movf	___awmod@divisor^0,w,c
  4076  001774  5E09               	subwf	___awmod@dividend^0,f,c
  4077  001776  500C               	movf	(___awmod@divisor+1)^0,w,c
  4078  001778  5A0A               	subwfb	(___awmod@dividend+1)^0,f,c
  4079  00177A                     l3062:
  4080  00177A  90D8               	bcf	status,0,c
  4081  00177C  320C               	rrcf	(___awmod@divisor+1)^0,f,c
  4082  00177E  320B               	rrcf	___awmod@divisor^0,f,c
  4083  001780  2E0D               	decfsz	___awmod@counter^0,f,c
  4084  001782  D7F1               	goto	u1790
  4085  001784                     l3066:
  4086  001784  500E               	movf	___awmod@sign^0,w,c
  4087  001786  B4D8               	btfsc	status,2,c
  4088  001788  D004               	goto	l3070
  4089  00178A  6C09               	negf	___awmod@dividend^0,c
  4090  00178C  1E0A               	comf	(___awmod@dividend+1)^0,f,c
  4091  00178E  B0D8               	btfsc	status,0,c
  4092  001790  2A0A               	incf	(___awmod@dividend+1)^0,f,c
  4093  001792                     l3070:
  4094  001792  C009  F009         	movff	___awmod@dividend,?___awmod
  4095  001796  C00A  F00A         	movff	___awmod@dividend+1,?___awmod+1
  4096  00179A  0012               	return		;funcret
  4097  00179C                     __end_of___awmod:
  4098                           	callstack 0
  4099                           
  4100 ;; *************** function ___awdiv *****************
  4101 ;; Defined at:
  4102 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\awdiv.c"
  4103 ;; Parameters:    Size  Location     Type
  4104 ;;  dividend        2    0[COMRAM] int 
  4105 ;;  divisor         2    2[COMRAM] int 
  4106 ;; Auto vars:     Size  Location     Type
  4107 ;;  quotient        2    6[COMRAM] int 
  4108 ;;  sign            1    5[COMRAM] unsigned char 
  4109 ;;  counter         1    4[COMRAM] unsigned char 
  4110 ;; Return value:  Size  Location     Type
  4111 ;;                  2    0[COMRAM] int 
  4112 ;; Registers used:
  4113 ;;		wreg, status,2, status,0
  4114 ;; Tracked objects:
  4115 ;;		On entry : 0/0
  4116 ;;		On exit  : 0/0
  4117 ;;		Unchanged: 0/0
  4118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4119 ;;      Params:         4       0       0       0       0       0       0
  4120 ;;      Locals:         4       0       0       0       0       0       0
  4121 ;;      Temps:          0       0       0       0       0       0       0
  4122 ;;      Totals:         8       0       0       0       0       0       0
  4123 ;;Total ram usage:        8 bytes
  4124 ;; Hardware stack levels used: 1
  4125 ;; This function calls:
  4126 ;;		Nothing
  4127 ;; This function is called by:
  4128 ;;		_set_time
  4129 ;; This function uses a non-reentrant model
  4130 ;;
  4131                           
  4132                           	psect	text15
  4133  001814                     __ptext15:
  4134                           	callstack 0
  4135  001814                     ___awdiv:
  4136                           	callstack 28
  4137                           
  4138                           ;incstack = 0
  4139  001814  0E00               	movlw	0
  4140  001816  6E06               	movwf	___awdiv@sign^0,c
  4141  001818  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  4142  00181A  D006               	goto	l3002
  4143  00181C  6C03               	negf	___awdiv@divisor^0,c
  4144  00181E  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  4145  001820  B0D8               	btfsc	status,0,c
  4146  001822  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  4147  001824  0E01               	movlw	1
  4148  001826  6E06               	movwf	___awdiv@sign^0,c
  4149  001828                     l3002:
  4150  001828  AE02               	btfss	(___awdiv@dividend+1)^0,7,c
  4151  00182A  D006               	goto	l3008
  4152  00182C  6C01               	negf	___awdiv@dividend^0,c
  4153  00182E  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  4154  001830  B0D8               	btfsc	status,0,c
  4155  001832  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  4156  001834  0E01               	movlw	1
  4157  001836  1A06               	xorwf	___awdiv@sign^0,f,c
  4158  001838                     l3008:
  4159  001838  0E00               	movlw	0
  4160  00183A  6E08               	movwf	(___awdiv@quotient+1)^0,c
  4161  00183C  0E00               	movlw	0
  4162  00183E  6E07               	movwf	___awdiv@quotient^0,c
  4163  001840  5003               	movf	___awdiv@divisor^0,w,c
  4164  001842  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  4165  001844  B4D8               	btfsc	status,2,c
  4166  001846  D01C               	goto	l3030
  4167  001848  0E01               	movlw	1
  4168  00184A  6E05               	movwf	___awdiv@counter^0,c
  4169  00184C  D004               	goto	l3016
  4170  00184E                     l3014:
  4171  00184E  90D8               	bcf	status,0,c
  4172  001850  3603               	rlcf	___awdiv@divisor^0,f,c
  4173  001852  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  4174  001854  2A05               	incf	___awdiv@counter^0,f,c
  4175  001856                     l3016:
  4176  001856  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  4177  001858  D7FA               	goto	l3014
  4178  00185A                     u1730:
  4179  00185A  90D8               	bcf	status,0,c
  4180  00185C  3607               	rlcf	___awdiv@quotient^0,f,c
  4181  00185E  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  4182  001860  5003               	movf	___awdiv@divisor^0,w,c
  4183  001862  5C01               	subwf	___awdiv@dividend^0,w,c
  4184  001864  5004               	movf	(___awdiv@divisor+1)^0,w,c
  4185  001866  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  4186  001868  A0D8               	btfss	status,0,c
  4187  00186A  D005               	goto	l3026
  4188  00186C  5003               	movf	___awdiv@divisor^0,w,c
  4189  00186E  5E01               	subwf	___awdiv@dividend^0,f,c
  4190  001870  5004               	movf	(___awdiv@divisor+1)^0,w,c
  4191  001872  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  4192  001874  8007               	bsf	___awdiv@quotient^0,0,c
  4193  001876                     l3026:
  4194  001876  90D8               	bcf	status,0,c
  4195  001878  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  4196  00187A  3203               	rrcf	___awdiv@divisor^0,f,c
  4197  00187C  2E05               	decfsz	___awdiv@counter^0,f,c
  4198  00187E  D7ED               	goto	u1730
  4199  001880                     l3030:
  4200  001880  5006               	movf	___awdiv@sign^0,w,c
  4201  001882  B4D8               	btfsc	status,2,c
  4202  001884  D004               	goto	l3034
  4203  001886  6C07               	negf	___awdiv@quotient^0,c
  4204  001888  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  4205  00188A  B0D8               	btfsc	status,0,c
  4206  00188C  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  4207  00188E                     l3034:
  4208  00188E  C007  F001         	movff	___awdiv@quotient,?___awdiv
  4209  001892  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  4210  001896  0012               	return		;funcret
  4211  001898                     __end_of___awdiv:
  4212                           	callstack 0
  4213                           
  4214 ;; *************** function _print_to_console *****************
  4215 ;; Defined at:
  4216 ;;		line 78 in file "event_logger.c"
  4217 ;; Parameters:    Size  Location     Type
  4218 ;;  iter            2    3[COMRAM] int 
  4219 ;; Auto vars:     Size  Location     Type
  4220 ;;		None
  4221 ;; Return value:  Size  Location     Type
  4222 ;;                  1    wreg      void 
  4223 ;; Registers used:
  4224 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4225 ;; Tracked objects:
  4226 ;;		On entry : 0/0
  4227 ;;		On exit  : 0/0
  4228 ;;		Unchanged: 0/0
  4229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4230 ;;      Params:         2       0       0       0       0       0       0
  4231 ;;      Locals:         0       0       0       0       0       0       0
  4232 ;;      Temps:          0       0       0       0       0       0       0
  4233 ;;      Totals:         2       0       0       0       0       0       0
  4234 ;;Total ram usage:        2 bytes
  4235 ;; Hardware stack levels used: 1
  4236 ;; Hardware stack levels required when called: 4
  4237 ;; This function calls:
  4238 ;;		_putch
  4239 ;;		_read_external_eeprom
  4240 ;; This function is called by:
  4241 ;;		_go_to_menu
  4242 ;; This function uses a non-reentrant model
  4243 ;;
  4244                           
  4245                           	psect	text16
  4246  0019E2                     __ptext16:
  4247                           	callstack 0
  4248  0019E2                     _print_to_console:
  4249                           	callstack 25
  4250                           
  4251                           ;event_logger.c: 80: putch(read_external_eeprom(iter * 10 + 0));
  4252                           
  4253                           ;incstack = 0
  4254  0019E2  5004               	movf	print_to_console@iter^0,w,c
  4255  0019E4  0D0A               	mullw	10
  4256  0019E6  50F3               	movf	243,w,c
  4257  0019E8  EC88  F009         	call	_read_external_eeprom
  4258  0019EC  ECFB  F008         	call	_putch
  4259                           
  4260                           ;event_logger.c: 81: putch(read_external_eeprom(iter * 10 + 1));
  4261  0019F0  5004               	movf	print_to_console@iter^0,w,c
  4262  0019F2  0D0A               	mullw	10
  4263  0019F4  28F3               	incf	243,w,c
  4264  0019F6  EC88  F009         	call	_read_external_eeprom
  4265  0019FA  ECFB  F008         	call	_putch
  4266                           
  4267                           ;event_logger.c: 82: putch(':');
  4268  0019FE  0E3A               	movlw	58
  4269  001A00  ECFB  F008         	call	_putch
  4270                           
  4271                           ;event_logger.c: 83: putch(read_external_eeprom(iter * 10 + 2));
  4272  001A04  5004               	movf	print_to_console@iter^0,w,c
  4273  001A06  0D0A               	mullw	10
  4274  001A08  50F3               	movf	243,w,c
  4275  001A0A  0F02               	addlw	2
  4276  001A0C  EC88  F009         	call	_read_external_eeprom
  4277  001A10  ECFB  F008         	call	_putch
  4278                           
  4279                           ;event_logger.c: 84: putch(read_external_eeprom(iter * 10 + 3));
  4280  001A14  5004               	movf	print_to_console@iter^0,w,c
  4281  001A16  0D0A               	mullw	10
  4282  001A18  50F3               	movf	243,w,c
  4283  001A1A  0F03               	addlw	3
  4284  001A1C  EC88  F009         	call	_read_external_eeprom
  4285  001A20  ECFB  F008         	call	_putch
  4286                           
  4287                           ;event_logger.c: 85: putch(':');
  4288  001A24  0E3A               	movlw	58
  4289  001A26  ECFB  F008         	call	_putch
  4290                           
  4291                           ;event_logger.c: 86: putch(read_external_eeprom(iter * 10 + 4));
  4292  001A2A  5004               	movf	print_to_console@iter^0,w,c
  4293  001A2C  0D0A               	mullw	10
  4294  001A2E  50F3               	movf	243,w,c
  4295  001A30  0F04               	addlw	4
  4296  001A32  EC88  F009         	call	_read_external_eeprom
  4297  001A36  ECFB  F008         	call	_putch
  4298                           
  4299                           ;event_logger.c: 87: putch(read_external_eeprom(iter * 10 + 5));
  4300  001A3A  5004               	movf	print_to_console@iter^0,w,c
  4301  001A3C  0D0A               	mullw	10
  4302  001A3E  50F3               	movf	243,w,c
  4303  001A40  0F05               	addlw	5
  4304  001A42  EC88  F009         	call	_read_external_eeprom
  4305  001A46  ECFB  F008         	call	_putch
  4306                           
  4307                           ;event_logger.c: 88: putch(' ');
  4308  001A4A  0E20               	movlw	32
  4309  001A4C  ECFB  F008         	call	_putch
  4310                           
  4311                           ;event_logger.c: 89: putch(read_external_eeprom(iter * 10 + 6));
  4312  001A50  5004               	movf	print_to_console@iter^0,w,c
  4313  001A52  0D0A               	mullw	10
  4314  001A54  50F3               	movf	243,w,c
  4315  001A56  0F06               	addlw	6
  4316  001A58  EC88  F009         	call	_read_external_eeprom
  4317  001A5C  ECFB  F008         	call	_putch
  4318                           
  4319                           ;event_logger.c: 90: putch(read_external_eeprom(iter * 10 + 7));
  4320  001A60  5004               	movf	print_to_console@iter^0,w,c
  4321  001A62  0D0A               	mullw	10
  4322  001A64  50F3               	movf	243,w,c
  4323  001A66  0F07               	addlw	7
  4324  001A68  EC88  F009         	call	_read_external_eeprom
  4325  001A6C  ECFB  F008         	call	_putch
  4326                           
  4327                           ;event_logger.c: 91: putch(' ');
  4328  001A70  0E20               	movlw	32
  4329  001A72  ECFB  F008         	call	_putch
  4330                           
  4331                           ;event_logger.c: 92: putch(read_external_eeprom(iter * 10 + 8));
  4332  001A76  5004               	movf	print_to_console@iter^0,w,c
  4333  001A78  0D0A               	mullw	10
  4334  001A7A  50F3               	movf	243,w,c
  4335  001A7C  0F08               	addlw	8
  4336  001A7E  EC88  F009         	call	_read_external_eeprom
  4337  001A82  ECFB  F008         	call	_putch
  4338                           
  4339                           ;event_logger.c: 93: putch(read_external_eeprom(iter * 10 + 9));
  4340  001A86  5004               	movf	print_to_console@iter^0,w,c
  4341  001A88  0D0A               	mullw	10
  4342  001A8A  50F3               	movf	243,w,c
  4343  001A8C  0F09               	addlw	9
  4344  001A8E  EC88  F009         	call	_read_external_eeprom
  4345  001A92  ECFB  F008         	call	_putch
  4346                           
  4347                           ;event_logger.c: 94: putch('\n');
  4348  001A96  0E0A               	movlw	10
  4349  001A98  ECFB  F008         	call	_putch
  4350  001A9C  0012               	return		;funcret
  4351  001A9E                     __end_of_print_to_console:
  4352                           	callstack 0
  4353                           
  4354 ;; *************** function _putch *****************
  4355 ;; Defined at:
  4356 ;;		line 87 in file "uart.c"
  4357 ;; Parameters:    Size  Location     Type
  4358 ;;  byte            1    wreg     unsigned char 
  4359 ;; Auto vars:     Size  Location     Type
  4360 ;;  byte            1    0[COMRAM] unsigned char 
  4361 ;; Return value:  Size  Location     Type
  4362 ;;                  1    wreg      void 
  4363 ;; Registers used:
  4364 ;;		wreg
  4365 ;; Tracked objects:
  4366 ;;		On entry : 0/0
  4367 ;;		On exit  : 0/0
  4368 ;;		Unchanged: 0/0
  4369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4370 ;;      Params:         0       0       0       0       0       0       0
  4371 ;;      Locals:         1       0       0       0       0       0       0
  4372 ;;      Temps:          0       0       0       0       0       0       0
  4373 ;;      Totals:         1       0       0       0       0       0       0
  4374 ;;Total ram usage:        1 bytes
  4375 ;; Hardware stack levels used: 1
  4376 ;; This function calls:
  4377 ;;		Nothing
  4378 ;; This function is called by:
  4379 ;;		_print_to_console
  4380 ;;		_go_to_menu
  4381 ;; This function uses a non-reentrant model
  4382 ;;
  4383                           
  4384                           	psect	text17
  4385  0011F6                     __ptext17:
  4386                           	callstack 0
  4387  0011F6                     _putch:
  4388                           	callstack 29
  4389                           
  4390                           ;incstack = 0
  4391                           ;putch@byte stored from wreg
  4392  0011F6  6E01               	movwf	putch@byte^0,c
  4393  0011F8                     
  4394                           ;uart.c: 91: while(!TXIF)
  4395  0011F8  A89E               	btfss	3998,4,c	;volatile
  4396  0011FA  D7FE               	goto	l2890
  4397                           
  4398                           ;uart.c: 94: };uart.c: 95: TXREG = byte;
  4399  0011FC  C001  FFAD         	movff	putch@byte,4013	;volatile
  4400  001200  0012               	return		;funcret
  4401  001202                     __end_of_putch:
  4402                           	callstack 0
  4403                           
  4404 ;; *************** function _change_password *****************
  4405 ;; Defined at:
  4406 ;;		line 114 in file "password.c"
  4407 ;; Parameters:    Size  Location     Type
  4408 ;;		None
  4409 ;; Auto vars:     Size  Location     Type
  4410 ;;  wait            2   16[COMRAM] unsigned int 
  4411 ;;  j               2   27[COMRAM] int 
  4412 ;;  j               2   23[COMRAM] int 
  4413 ;;  j               2   25[COMRAM] int 
  4414 ;;  password        4   18[COMRAM] unsigned char [4]
  4415 ;;  confirm         4   12[COMRAM] unsigned char [4]
  4416 ;;  i               1   29[COMRAM] unsigned char 
  4417 ;;  exit_flag       1   22[COMRAM] unsigned char 
  4418 ;; Return value:  Size  Location     Type
  4419 ;;                  1    wreg      void 
  4420 ;; Registers used:
  4421 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4422 ;; Tracked objects:
  4423 ;;		On entry : 0/0
  4424 ;;		On exit  : 0/0
  4425 ;;		Unchanged: 0/0
  4426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4427 ;;      Params:         0       0       0       0       0       0       0
  4428 ;;      Locals:        18       0       0       0       0       0       0
  4429 ;;      Temps:          2       0       0       0       0       0       0
  4430 ;;      Totals:        20       0       0       0       0       0       0
  4431 ;;Total ram usage:       20 bytes
  4432 ;; Hardware stack levels used: 1
  4433 ;; Hardware stack levels required when called: 3
  4434 ;; This function calls:
  4435 ;;		_clcd_print
  4436 ;;		_clcd_putch
  4437 ;;		_clcd_write
  4438 ;;		_delay
  4439 ;;		_read_switches
  4440 ;;		_write_external_eeprom
  4441 ;; This function is called by:
  4442 ;;		_go_to_menu
  4443 ;; This function uses a non-reentrant model
  4444 ;;
  4445                           
  4446                           	psect	text18
  4447  00228A                     __ptext18:
  4448                           	callstack 0
  4449  00228A                     _change_password:
  4450                           	callstack 26
  4451                           
  4452                           ;password.c: 116: char exit_flag = 0;
  4453                           
  4454                           ;incstack = 0
  4455  00228A  0E00               	movlw	0
  4456  00228C  6E17               	movwf	change_password@exit_flag^0,c
  4457                           
  4458                           ;password.c: 117: while (!exit_flag)
  4459  00228E  D108               	goto	u2040
  4460  002290                     l3206:
  4461                           
  4462                           ;password.c: 118: {;password.c: 119: clcd_write(0x01, 0);
  4463  002290  0E00               	movlw	0
  4464  002292  6E01               	movwf	clcd_write@control_bit^0,c
  4465  002294  0E01               	movlw	1
  4466  002296  EC5F  F009         	call	_clcd_write
  4467                           
  4468                           ;password.c: 120: char i = 0;
  4469  00229A  0E00               	movlw	0
  4470  00229C  6E1E               	movwf	change_password@i^0,c
  4471                           
  4472                           ;password.c: 121: char password[4] = {0}, confirm[4] = {0};
  4473  00229E  0E00               	movlw	0
  4474  0022A0  6E13               	movwf	change_password@password^0,c
  4475  0022A2  0E00               	movlw	0
  4476  0022A4  6E14               	movwf	(change_password@password+1)^0,c
  4477  0022A6  0E00               	movlw	0
  4478  0022A8  6E15               	movwf	(change_password@password+2)^0,c
  4479  0022AA  0E00               	movlw	0
  4480  0022AC  6E16               	movwf	(change_password@password+3)^0,c
  4481  0022AE  0E00               	movlw	0
  4482  0022B0  6E0D               	movwf	change_password@confirm^0,c
  4483  0022B2  0E00               	movlw	0
  4484  0022B4  6E0E               	movwf	(change_password@confirm+1)^0,c
  4485  0022B6  0E00               	movlw	0
  4486  0022B8  6E0F               	movwf	(change_password@confirm+2)^0,c
  4487  0022BA  0E00               	movlw	0
  4488  0022BC  6E10               	movwf	(change_password@confirm+3)^0,c
  4489                           
  4490                           ;password.c: 122: while (i < 4)
  4491  0022BE  D02C               	goto	l3230
  4492  0022C0                     l3214:
  4493                           
  4494                           ;password.c: 123: {;password.c: 124: clcd_print("ENTER NEW PASSWORD", (0x80 + (0)));
  4495  0022C0  0EB1               	movlw	low STR_11
  4496  0022C2  6E03               	movwf	clcd_print@data^0,c
  4497  0022C4  0E2E               	movlw	high STR_11
  4498  0022C6  6E04               	movwf	(clcd_print@data+1)^0,c
  4499  0022C8  0E80               	movlw	128
  4500  0022CA  6E05               	movwf	clcd_print@addr^0,c
  4501  0022CC  EC66  F00B         	call	_clcd_print	;wreg free
  4502                           
  4503                           ;password.c: 126: switch (read_switches(1))
  4504  0022D0  D01A               	goto	l3228
  4505  0022D2                     l3216:
  4506                           
  4507                           ;password.c: 129: {;password.c: 130: clcd_putch('*', (0xC0 + (0 + i)));
  4508  0022D2  501E               	movf	change_password@i^0,w,c
  4509  0022D4  0FC0               	addlw	192
  4510  0022D6  6E09               	movwf	clcd_putch@addr^0,c
  4511  0022D8  0E2A               	movlw	42
  4512  0022DA  EC15  F009         	call	_clcd_putch
  4513                           
  4514                           ;password.c: 131: password[i++] = 1;
  4515  0022DE  501E               	movf	change_password@i^0,w,c
  4516  0022E0  0F13               	addlw	low change_password@password
  4517  0022E2  6ED9               	movwf	fsr2l,c
  4518  0022E4  6ADA               	clrf	fsr2h,c
  4519  0022E6  0E01               	movlw	1
  4520  0022E8  6EDF               	movwf	indf2,c
  4521  0022EA  2A1E               	incf	change_password@i^0,f,c
  4522                           
  4523                           ;password.c: 132: };password.c: 133: break;
  4524  0022EC  D015               	goto	l3230
  4525  0022EE                     l3222:
  4526                           
  4527                           ;password.c: 135: {;password.c: 136: clcd_putch('*', (0xC0 + (0 + i)));
  4528  0022EE  501E               	movf	change_password@i^0,w,c
  4529  0022F0  0FC0               	addlw	192
  4530  0022F2  6E09               	movwf	clcd_putch@addr^0,c
  4531  0022F4  0E2A               	movlw	42
  4532  0022F6  EC15  F009         	call	_clcd_putch
  4533                           
  4534                           ;password.c: 137: password[i++] = 0;
  4535  0022FA  501E               	movf	change_password@i^0,w,c
  4536  0022FC  0F13               	addlw	low change_password@password
  4537  0022FE  6ED9               	movwf	fsr2l,c
  4538  002300  6ADA               	clrf	fsr2h,c
  4539  002302  0E00               	movlw	0
  4540  002304  D7F1               	goto	L5
  4541  002306                     l3228:
  4542  002306  0E01               	movlw	1
  4543  002308  EC41  F00A         	call	_read_switches
  4544                           
  4545                           ; Switch size 1, requested type "simple"
  4546                           ; Number of cases is 2, Range of values is 4 to 5
  4547                           ; switch strategies available:
  4548                           ; Name         Instructions Cycles
  4549                           ; simple_byte            7     4 (average)
  4550                           ;	Chosen strategy is simple_byte
  4551  00230C  0A04               	xorlw	4	; case 4
  4552  00230E  B4D8               	btfsc	status,2,c
  4553  002310  D7EE               	goto	l3222
  4554  002312  0A01               	xorlw	1	; case 5
  4555  002314  B4D8               	btfsc	status,2,c
  4556  002316  D7DD               	goto	l3216
  4557  002318                     l3230:
  4558  002318  0E03               	movlw	3
  4559  00231A  641E               	cpfsgt	change_password@i^0,c
  4560  00231C  D7D1               	goto	l3214
  4561                           
  4562                           ;password.c: 140: };password.c: 142: clcd_write(0x01, 0);
  4563  00231E  0E00               	movlw	0
  4564  002320  6E01               	movwf	clcd_write@control_bit^0,c
  4565  002322  0E01               	movlw	1
  4566  002324  EC5F  F009         	call	_clcd_write
  4567                           
  4568                           ;password.c: 143: i = 0;
  4569  002328  0E00               	movlw	0
  4570  00232A  6E1E               	movwf	change_password@i^0,c
  4571                           
  4572                           ;password.c: 145: while (i < 4)
  4573  00232C  D02C               	goto	l3252
  4574  00232E                     l3236:
  4575                           
  4576                           ;password.c: 146: {;password.c: 147: clcd_print("RE-ENTER PASSWORDR", (0x80 + (2)));
  4577  00232E  0EC4               	movlw	low STR_12
  4578  002330  6E03               	movwf	clcd_print@data^0,c
  4579  002332  0E2E               	movlw	high STR_12
  4580  002334  6E04               	movwf	(clcd_print@data+1)^0,c
  4581  002336  0E82               	movlw	130
  4582  002338  6E05               	movwf	clcd_print@addr^0,c
  4583  00233A  EC66  F00B         	call	_clcd_print	;wreg free
  4584                           
  4585                           ;password.c: 149: switch (read_switches(1))
  4586  00233E  D01A               	goto	l3250
  4587  002340                     l3238:
  4588                           
  4589                           ;password.c: 152: {;password.c: 153: clcd_putch('*', (0xC0 + (0 + i)));
  4590  002340  501E               	movf	change_password@i^0,w,c
  4591  002342  0FC0               	addlw	192
  4592  002344  6E09               	movwf	clcd_putch@addr^0,c
  4593  002346  0E2A               	movlw	42
  4594  002348  EC15  F009         	call	_clcd_putch
  4595                           
  4596                           ;password.c: 154: confirm[i++] = 1;
  4597  00234C  501E               	movf	change_password@i^0,w,c
  4598  00234E  0F0D               	addlw	low change_password@confirm
  4599  002350  6ED9               	movwf	fsr2l,c
  4600  002352  6ADA               	clrf	fsr2h,c
  4601  002354  0E01               	movlw	1
  4602  002356  6EDF               	movwf	indf2,c
  4603  002358  2A1E               	incf	change_password@i^0,f,c
  4604                           
  4605                           ;password.c: 155: };password.c: 156: break;
  4606  00235A  D015               	goto	l3252
  4607  00235C                     l3244:
  4608                           
  4609                           ;password.c: 158: {;password.c: 159: clcd_putch('*', (0xC0 + (0 + i)));
  4610  00235C  501E               	movf	change_password@i^0,w,c
  4611  00235E  0FC0               	addlw	192
  4612  002360  6E09               	movwf	clcd_putch@addr^0,c
  4613  002362  0E2A               	movlw	42
  4614  002364  EC15  F009         	call	_clcd_putch
  4615                           
  4616                           ;password.c: 160: confirm[i++] = 0;
  4617  002368  501E               	movf	change_password@i^0,w,c
  4618  00236A  0F0D               	addlw	low change_password@confirm
  4619  00236C  6ED9               	movwf	fsr2l,c
  4620  00236E  6ADA               	clrf	fsr2h,c
  4621  002370  0E00               	movlw	0
  4622  002372  D7F1               	goto	L6
  4623  002374                     l3250:
  4624  002374  0E01               	movlw	1
  4625  002376  EC41  F00A         	call	_read_switches
  4626                           
  4627                           ; Switch size 1, requested type "simple"
  4628                           ; Number of cases is 2, Range of values is 4 to 5
  4629                           ; switch strategies available:
  4630                           ; Name         Instructions Cycles
  4631                           ; simple_byte            7     4 (average)
  4632                           ;	Chosen strategy is simple_byte
  4633  00237A  0A04               	xorlw	4	; case 4
  4634  00237C  B4D8               	btfsc	status,2,c
  4635  00237E  D7EE               	goto	l3244
  4636  002380  0A01               	xorlw	1	; case 5
  4637  002382  B4D8               	btfsc	status,2,c
  4638  002384  D7DD               	goto	l3238
  4639  002386                     l3252:
  4640  002386  0E03               	movlw	3
  4641  002388  641E               	cpfsgt	change_password@i^0,c
  4642  00238A  D7D1               	goto	l3236
  4643                           
  4644                           ;password.c: 163: };password.c: 165: i = 0;
  4645  00238C  0E00               	movlw	0
  4646  00238E  6E1E               	movwf	change_password@i^0,c
  4647                           
  4648                           ;password.c: 166: for (int j = 0; j < 4; j++)
  4649  002390  0E00               	movlw	0
  4650  002392  6E1B               	movwf	(change_password@j+1)^0,c
  4651  002394  0E00               	movlw	0
  4652  002396  6E1A               	movwf	change_password@j^0,c
  4653  002398                     l3260:
  4654                           
  4655                           ;password.c: 167: {;password.c: 168: if (confirm[j] == password[j])
  4656  002398  501A               	movf	change_password@j^0,w,c
  4657  00239A  0F13               	addlw	low change_password@password
  4658  00239C  6ED9               	movwf	fsr2l,c
  4659  00239E  6ADA               	clrf	fsr2h,c
  4660  0023A0  501A               	movf	change_password@j^0,w,c
  4661  0023A2  0F0D               	addlw	low change_password@confirm
  4662  0023A4  6EE1               	movwf	fsr1l,c
  4663  0023A6  6AE2               	clrf	fsr1h,c
  4664  0023A8  50DE               	movf	postinc2,w,c
  4665  0023AA  18E6               	xorwf	postinc1,w,c
  4666  0023AC  B4D8               	btfsc	status,2,c
  4667                           
  4668                           ;password.c: 169: i++;
  4669  0023AE  2A1E               	incf	change_password@i^0,f,c
  4670  0023B0  4A1A               	infsnz	change_password@j^0,f,c
  4671  0023B2  2A1B               	incf	(change_password@j+1)^0,f,c
  4672  0023B4  BE1B               	btfsc	(change_password@j+1)^0,7,c
  4673  0023B6  D7F0               	goto	l3260
  4674  0023B8  501B               	movf	(change_password@j+1)^0,w,c
  4675  0023BA  E104               	bnz	u2000
  4676  0023BC  0E04               	movlw	4
  4677  0023BE  5C1A               	subwf	change_password@j^0,w,c
  4678  0023C0  A0D8               	btfss	status,0,c
  4679  0023C2  D7EA               	goto	l3260
  4680  0023C4                     u2000:
  4681                           
  4682                           ;password.c: 170: };password.c: 172: clcd_write(0x01, 0);
  4683  0023C4  0E00               	movlw	0
  4684  0023C6  6E01               	movwf	clcd_write@control_bit^0,c
  4685  0023C8  0E01               	movlw	1
  4686  0023CA  EC5F  F009         	call	_clcd_write
  4687                           
  4688                           ;password.c: 174: if (i == 4)
  4689  0023CE  0E04               	movlw	4
  4690  0023D0  181E               	xorwf	change_password@i^0,w,c
  4691  0023D2  A4D8               	btfss	status,2,c
  4692  0023D4  D03B               	goto	l3294
  4693                           
  4694                           ;password.c: 175: {;password.c: 176: for (int j = 0; j < 4; j++)
  4695  0023D6  0E00               	movlw	0
  4696  0023D8  6E1D               	movwf	(change_password@j_205+1)^0,c
  4697  0023DA  0E00               	movlw	0
  4698  0023DC  6E1C               	movwf	change_password@j_205^0,c
  4699  0023DE                     l3276:
  4700                           
  4701                           ;password.c: 177: write_external_eeprom(100 + j, password[j]);
  4702  0023DE  501C               	movf	change_password@j_205^0,w,c
  4703  0023E0  0F13               	addlw	low change_password@password
  4704  0023E2  6ED9               	movwf	fsr2l,c
  4705  0023E4  6ADA               	clrf	fsr2h,c
  4706  0023E6  50DF               	movf	indf2,w,c
  4707  0023E8  6E02               	movwf	write_external_eeprom@data^0,c
  4708  0023EA  501C               	movf	change_password@j_205^0,w,c
  4709  0023EC  0F64               	addlw	100
  4710  0023EE  ECB2  F009         	call	_write_external_eeprom
  4711  0023F2  4A1C               	infsnz	change_password@j_205^0,f,c
  4712  0023F4  2A1D               	incf	(change_password@j_205+1)^0,f,c
  4713  0023F6  BE1D               	btfsc	(change_password@j_205+1)^0,7,c
  4714  0023F8  D7F2               	goto	l3276
  4715  0023FA  501D               	movf	(change_password@j_205+1)^0,w,c
  4716  0023FC  E104               	bnz	u2020
  4717  0023FE  0E04               	movlw	4
  4718  002400  5C1C               	subwf	change_password@j_205^0,w,c
  4719  002402  A0D8               	btfss	status,0,c
  4720  002404  D7EC               	goto	l3276
  4721  002406                     u2020:
  4722                           
  4723                           ;password.c: 179: clcd_write(0x01, 0);
  4724  002406  0E00               	movlw	0
  4725  002408  6E01               	movwf	clcd_write@control_bit^0,c
  4726  00240A  0E01               	movlw	1
  4727  00240C  EC5F  F009         	call	_clcd_write
  4728                           
  4729                           ;password.c: 181: clcd_print("PASSWORD STORED", (0x80 + (0)));
  4730  002410  0E1B               	movlw	low STR_13
  4731  002412  6E03               	movwf	clcd_print@data^0,c
  4732  002414  0E2F               	movlw	high STR_13
  4733  002416  6E04               	movwf	(clcd_print@data+1)^0,c
  4734  002418  0E80               	movlw	128
  4735  00241A  6E05               	movwf	clcd_print@addr^0,c
  4736  00241C  EC66  F00B         	call	_clcd_print	;wreg free
  4737                           
  4738                           ;password.c: 182: clcd_print("SUCCESSFULLY!", (0xC0 + (1)));
  4739  002420  0EA0               	movlw	low STR_14
  4740  002422  6E03               	movwf	clcd_print@data^0,c
  4741  002424  0E2F               	movlw	high STR_14
  4742  002426  6E04               	movwf	(clcd_print@data+1)^0,c
  4743  002428  0EC1               	movlw	193
  4744  00242A  6E05               	movwf	clcd_print@addr^0,c
  4745  00242C  EC66  F00B         	call	_clcd_print	;wreg free
  4746                           
  4747                           ;password.c: 184: delay(10);
  4748  002430  0E00               	movlw	0
  4749  002432  6E02               	movwf	(delay@ms+1)^0,c
  4750  002434  0E0A               	movlw	10
  4751  002436  6E01               	movwf	delay@ms^0,c
  4752  002438  EC23  F00A         	call	_delay	;wreg free
  4753                           
  4754                           ;password.c: 185: clcd_write(0x01, 0);
  4755  00243C  0E00               	movlw	0
  4756  00243E  6E01               	movwf	clcd_write@control_bit^0,c
  4757  002440  0E01               	movlw	1
  4758  002442  EC5F  F009         	call	_clcd_write
  4759                           
  4760                           ;password.c: 187: exit_flag = 1;
  4761  002446  0E01               	movlw	1
  4762  002448  6E17               	movwf	change_password@exit_flag^0,c
  4763                           
  4764                           ;password.c: 188: }
  4765  00244A  D010               	goto	l3296
  4766  00244C                     l3294:
  4767                           
  4768                           ;password.c: 189: else;password.c: 190: {;password.c: 191: clcd_print("PASSWORD NOT MATC
      +                          HING", (0x80 + (0)));
  4769  00244C  0E9B               	movlw	low STR_15
  4770  00244E  6E03               	movwf	clcd_print@data^0,c
  4771  002450  0E2E               	movlw	high STR_15
  4772  002452  6E04               	movwf	(clcd_print@data+1)^0,c
  4773  002454  0E80               	movlw	128
  4774  002456  6E05               	movwf	clcd_print@addr^0,c
  4775  002458  EC66  F00B         	call	_clcd_print	;wreg free
  4776                           
  4777                           ;password.c: 192: clcd_print("RETRY ENTERING", (0xC0 + (1)));
  4778  00245C  0E67               	movlw	low STR_16
  4779  00245E  6E03               	movwf	clcd_print@data^0,c
  4780  002460  0E2F               	movlw	high STR_16
  4781  002462  6E04               	movwf	(clcd_print@data+1)^0,c
  4782  002464  0EC1               	movlw	193
  4783  002466  6E05               	movwf	clcd_print@addr^0,c
  4784  002468  EC66  F00B         	call	_clcd_print	;wreg free
  4785  00246C                     l3296:
  4786                           
  4787                           ;password.c: 193: };password.c: 195: for (int j = 0; j < 10; j++)
  4788  00246C  0E00               	movlw	0
  4789  00246E  6E19               	movwf	(change_password@j_210+1)^0,c
  4790  002470  0E00               	movlw	0
  4791  002472  6E18               	movwf	change_password@j_210^0,c
  4792  002474                     l3302:
  4793                           
  4794                           ;password.c: 196: for (unsigned int wait = 50000; wait--;);
  4795  002474  0EC3               	movlw	195
  4796  002476  6E12               	movwf	(change_password@wait+1)^0,c
  4797  002478  0E50               	movlw	80
  4798  00247A  6E11               	movwf	change_password@wait^0,c
  4799  00247C                     l3304:
  4800  00247C  0611               	decf	change_password@wait^0,f,c
  4801  00247E  A0D8               	btfss	status,0,c
  4802  002480  0612               	decf	(change_password@wait+1)^0,f,c
  4803  002482  2811               	incf	change_password@wait^0,w,c
  4804  002484  E1FB               	bnz	l3304
  4805  002486  2812               	incf	(change_password@wait+1)^0,w,c
  4806  002488  A4D8               	btfss	status,2,c
  4807  00248A  D7F8               	goto	l3304
  4808  00248C  4A18               	infsnz	change_password@j_210^0,f,c
  4809  00248E  2A19               	incf	(change_password@j_210+1)^0,f,c
  4810  002490  BE19               	btfsc	(change_password@j_210+1)^0,7,c
  4811  002492  D7F0               	goto	l3302
  4812  002494  5019               	movf	(change_password@j_210+1)^0,w,c
  4813  002496  E104               	bnz	u2040
  4814  002498  0E0A               	movlw	10
  4815  00249A  5C18               	subwf	change_password@j_210^0,w,c
  4816  00249C  A0D8               	btfss	status,0,c
  4817  00249E  D7EA               	goto	l3302
  4818  0024A0                     u2040:
  4819  0024A0  5017               	movf	change_password@exit_flag^0,w,c
  4820  0024A2  A4D8               	btfss	status,2,c
  4821  0024A4  0012               	return	
  4822  0024A6  D6F4               	goto	l3206
  4823  0024A8                     __end_of_change_password:
  4824                           	callstack 0
  4825                           
  4826 ;; *************** function _write_external_eeprom *****************
  4827 ;; Defined at:
  4828 ;;		line 13 in file "eeprom.c"
  4829 ;; Parameters:    Size  Location     Type
  4830 ;;  address         1    wreg     unsigned char 
  4831 ;;  data            1    1[COMRAM] unsigned char 
  4832 ;; Auto vars:     Size  Location     Type
  4833 ;;  address         1    4[COMRAM] unsigned char 
  4834 ;;  wait            2    2[COMRAM] unsigned int 
  4835 ;; Return value:  Size  Location     Type
  4836 ;;                  1    wreg      void 
  4837 ;; Registers used:
  4838 ;;		wreg, status,2, status,0, cstack
  4839 ;; Tracked objects:
  4840 ;;		On entry : 0/0
  4841 ;;		On exit  : 0/0
  4842 ;;		Unchanged: 0/0
  4843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4844 ;;      Params:         1       0       0       0       0       0       0
  4845 ;;      Locals:         3       0       0       0       0       0       0
  4846 ;;      Temps:          0       0       0       0       0       0       0
  4847 ;;      Totals:         4       0       0       0       0       0       0
  4848 ;;Total ram usage:        4 bytes
  4849 ;; Hardware stack levels used: 1
  4850 ;; Hardware stack levels required when called: 2
  4851 ;; This function calls:
  4852 ;;		_i2c_start
  4853 ;;		_i2c_stop
  4854 ;;		_i2c_write
  4855 ;; This function is called by:
  4856 ;;		_store_key_log
  4857 ;;		_change_password
  4858 ;;		_init_config
  4859 ;; This function uses a non-reentrant model
  4860 ;;
  4861                           
  4862                           	psect	text19
  4863  001364                     __ptext19:
  4864                           	callstack 0
  4865  001364                     _write_external_eeprom:
  4866                           	callstack 27
  4867                           
  4868                           ;incstack = 0
  4869                           ;write_external_eeprom@address stored from wreg
  4870  001364  6E05               	movwf	write_external_eeprom@address^0,c
  4871                           
  4872                           ;eeprom.c: 15: i2c_start();
  4873  001366  ECE7  F008         	call	_i2c_start	;wreg free
  4874                           
  4875                           ;eeprom.c: 16: i2c_write(0xA0);
  4876  00136A  0EA0               	movlw	160
  4877  00136C  ECF5  F008         	call	_i2c_write
  4878                           
  4879                           ;eeprom.c: 17: i2c_write(address);
  4880  001370  5005               	movf	write_external_eeprom@address^0,w,c
  4881  001372  ECF5  F008         	call	_i2c_write
  4882                           
  4883                           ;eeprom.c: 18: i2c_write(data);
  4884  001376  5002               	movf	write_external_eeprom@data^0,w,c
  4885  001378  ECF5  F008         	call	_i2c_write
  4886                           
  4887                           ;eeprom.c: 19: i2c_stop();
  4888  00137C  ECEB  F008         	call	_i2c_stop	;wreg free
  4889                           
  4890                           ;eeprom.c: 20: for (unsigned int wait = 3000; wait--;);
  4891  001380  0E0B               	movlw	11
  4892  001382  6E04               	movwf	(write_external_eeprom@wait+1)^0,c
  4893  001384  0EB8               	movlw	184
  4894  001386  6E03               	movwf	write_external_eeprom@wait^0,c
  4895  001388                     l2888:
  4896  001388  0603               	decf	write_external_eeprom@wait^0,f,c
  4897  00138A  A0D8               	btfss	status,0,c
  4898  00138C  0604               	decf	(write_external_eeprom@wait+1)^0,f,c
  4899  00138E  2803               	incf	write_external_eeprom@wait^0,w,c
  4900  001390  E1FB               	bnz	l2888
  4901  001392  2804               	incf	(write_external_eeprom@wait+1)^0,w,c
  4902  001394  B4D8               	btfsc	status,2,c
  4903  001396  0012               	return	
  4904  001398  D7F7               	goto	l2888
  4905  00139A                     __end_of_write_external_eeprom:
  4906                           	callstack 0
  4907                           
  4908 ;; *************** function _delay *****************
  4909 ;; Defined at:
  4910 ;;		line 256 in file "main.c"
  4911 ;; Parameters:    Size  Location     Type
  4912 ;;  ms              2    0[COMRAM] int 
  4913 ;; Auto vars:     Size  Location     Type
  4914 ;;  wait            2    3[COMRAM] unsigned int 
  4915 ;;  i               2    5[COMRAM] int 
  4916 ;; Return value:  Size  Location     Type
  4917 ;;                  1    wreg      void 
  4918 ;; Registers used:
  4919 ;;		wreg, status,2, status,0
  4920 ;; Tracked objects:
  4921 ;;		On entry : 0/0
  4922 ;;		On exit  : 0/0
  4923 ;;		Unchanged: 0/0
  4924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4925 ;;      Params:         2       0       0       0       0       0       0
  4926 ;;      Locals:         4       0       0       0       0       0       0
  4927 ;;      Temps:          1       0       0       0       0       0       0
  4928 ;;      Totals:         7       0       0       0       0       0       0
  4929 ;;Total ram usage:        7 bytes
  4930 ;; Hardware stack levels used: 1
  4931 ;; This function calls:
  4932 ;;		Nothing
  4933 ;; This function is called by:
  4934 ;;		_view_log
  4935 ;;		_change_password
  4936 ;;		_go_to_menu
  4937 ;;		_main
  4938 ;;		_set_time
  4939 ;; This function uses a non-reentrant model
  4940 ;;
  4941                           
  4942                           	psect	text20
  4943  001446                     __ptext20:
  4944                           	callstack 0
  4945  001446                     _delay:
  4946                           	callstack 28
  4947                           
  4948                           ;main.c: 258: for (int i = 0; i < ms; i++)
  4949                           
  4950                           ;incstack = 0
  4951  001446  0E00               	movlw	0
  4952  001448  6E07               	movwf	(delay@i+1)^0,c
  4953  00144A  0E00               	movlw	0
  4954  00144C  6E06               	movwf	delay@i^0,c
  4955  00144E  D00E               	goto	l2928
  4956  001450                     l2922:
  4957                           
  4958                           ;main.c: 259: for (unsigned int wait = 50000; wait--;)
  4959  001450  0EC3               	movlw	195
  4960  001452  6E05               	movwf	(delay@wait+1)^0,c
  4961  001454  0E50               	movlw	80
  4962  001456  6E04               	movwf	delay@wait^0,c
  4963  001458                     l2924:
  4964  001458  0604               	decf	delay@wait^0,f,c
  4965  00145A  A0D8               	btfss	status,0,c
  4966  00145C  0605               	decf	(delay@wait+1)^0,f,c
  4967  00145E  2804               	incf	delay@wait^0,w,c
  4968  001460  E1FB               	bnz	l2924
  4969  001462  2805               	incf	(delay@wait+1)^0,w,c
  4970  001464  A4D8               	btfss	status,2,c
  4971  001466  D7F8               	goto	l2924
  4972  001468  4A06               	infsnz	delay@i^0,f,c
  4973  00146A  2A07               	incf	(delay@i+1)^0,f,c
  4974  00146C                     l2928:
  4975  00146C  5001               	movf	delay@ms^0,w,c
  4976  00146E  5C06               	subwf	delay@i^0,w,c
  4977  001470  5007               	movf	(delay@i+1)^0,w,c
  4978  001472  0A80               	xorlw	128
  4979  001474  6E03               	movwf	??_delay^0,c
  4980  001476  5002               	movf	(delay@ms+1)^0,w,c
  4981  001478  0A80               	xorlw	128
  4982  00147A  5803               	subwfb	??_delay^0,w,c
  4983  00147C  B0D8               	btfsc	status,0,c
  4984  00147E  0012               	return	
  4985  001480  D7E7               	goto	l2922
  4986  001482                     __end_of_delay:
  4987                           	callstack 0
  4988                           
  4989 ;; *************** function _get_time *****************
  4990 ;; Defined at:
  4991 ;;		line 110 in file "main.c"
  4992 ;; Parameters:    Size  Location     Type
  4993 ;;		None
  4994 ;; Auto vars:     Size  Location     Type
  4995 ;;		None
  4996 ;; Return value:  Size  Location     Type
  4997 ;;                  1    wreg      void 
  4998 ;; Registers used:
  4999 ;;		wreg, status,2, status,0, cstack
  5000 ;; Tracked objects:
  5001 ;;		On entry : 0/0
  5002 ;;		On exit  : 0/0
  5003 ;;		Unchanged: 0/0
  5004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5005 ;;      Params:         0       0       0       0       0       0       0
  5006 ;;      Locals:         0       0       0       0       0       0       0
  5007 ;;      Temps:          0       0       0       0       0       0       0
  5008 ;;      Totals:         0       0       0       0       0       0       0
  5009 ;;Total ram usage:        0 bytes
  5010 ;; Hardware stack levels used: 1
  5011 ;; Hardware stack levels required when called: 4
  5012 ;; This function calls:
  5013 ;;		_read_ds1307
  5014 ;; This function is called by:
  5015 ;;		_main
  5016 ;; This function uses a non-reentrant model
  5017 ;;
  5018                           
  5019                           	psect	text21
  5020  001670                     __ptext21:
  5021                           	callstack 0
  5022  001670                     _get_time:
  5023                           	callstack 26
  5024                           
  5025                           ;main.c: 112: static unsigned char clock_reg[3];;main.c: 114: clock_reg[0] = read_ds1307
      +                          (0x02);
  5026                           
  5027                           ;incstack = 0
  5028  001670  0E02               	movlw	2
  5029  001672  EC9D  F009         	call	_read_ds1307
  5030  001676  6E48               	movwf	get_time@clock_reg^0,c
  5031                           
  5032                           ;main.c: 115: clock_reg[1] = read_ds1307(0x01);
  5033  001678  0E01               	movlw	1
  5034  00167A  EC9D  F009         	call	_read_ds1307
  5035  00167E  6E49               	movwf	(get_time@clock_reg+1)^0,c
  5036                           
  5037                           ;main.c: 116: clock_reg[2] = read_ds1307(0x00);
  5038  001680  0E00               	movlw	0
  5039  001682  EC9D  F009         	call	_read_ds1307
  5040  001686  6E4A               	movwf	(get_time@clock_reg+2)^0,c
  5041                           
  5042                           ;main.c: 118: time[0] = '0' + ((clock_reg[0] >> 4) & 0x03);
  5043  001688  3848               	swapf	get_time@clock_reg^0,w,c
  5044  00168A  0B0F               	andlw	15
  5045  00168C  0B03               	andlw	3
  5046  00168E  0F30               	addlw	48
  5047  001690  6E51               	movwf	_time^0,c
  5048                           
  5049                           ;main.c: 119: time[1] = '0' + (clock_reg[0] & 0x0F);
  5050  001692  5048               	movf	get_time@clock_reg^0,w,c
  5051  001694  0B0F               	andlw	15
  5052  001696  0F30               	addlw	48
  5053  001698  6E52               	movwf	(_time+1)^0,c
  5054                           
  5055                           ;main.c: 121: time[2] = ':';
  5056  00169A  0E3A               	movlw	58
  5057  00169C  6E53               	movwf	(_time+2)^0,c
  5058                           
  5059                           ;main.c: 123: time[3] = '0' + ((clock_reg[1] >> 4) & 0x0F);
  5060  00169E  3849               	swapf	(get_time@clock_reg+1)^0,w,c
  5061  0016A0  0B0F               	andlw	15
  5062  0016A2  0B0F               	andlw	15
  5063  0016A4  0F30               	addlw	48
  5064  0016A6  6E54               	movwf	(_time+3)^0,c
  5065                           
  5066                           ;main.c: 124: time[4] = '0' + (clock_reg[1] & 0x0F);
  5067  0016A8  5049               	movf	(get_time@clock_reg+1)^0,w,c
  5068  0016AA  0B0F               	andlw	15
  5069  0016AC  0F30               	addlw	48
  5070  0016AE  6E55               	movwf	(_time+4)^0,c
  5071                           
  5072                           ;main.c: 126: time[5] = ':';
  5073  0016B0  0E3A               	movlw	58
  5074  0016B2  6E56               	movwf	(_time+5)^0,c
  5075                           
  5076                           ;main.c: 127: time[6] = '0' + ((clock_reg[2] >> 4) & 0x0F);
  5077  0016B4  384A               	swapf	(get_time@clock_reg+2)^0,w,c
  5078  0016B6  0B0F               	andlw	15
  5079  0016B8  0B0F               	andlw	15
  5080  0016BA  0F30               	addlw	48
  5081  0016BC  6E57               	movwf	(_time+6)^0,c
  5082                           
  5083                           ;main.c: 128: time[7] = '0' + (clock_reg[2] & 0x0F);
  5084  0016BE  504A               	movf	(get_time@clock_reg+2)^0,w,c
  5085  0016C0  0B0F               	andlw	15
  5086  0016C2  0F30               	addlw	48
  5087  0016C4  6E58               	movwf	(_time+7)^0,c
  5088                           
  5089                           ;main.c: 129: time[8] = '\0';
  5090  0016C6  0E00               	movlw	0
  5091  0016C8  6E59               	movwf	(_time+8)^0,c
  5092  0016CA  0012               	return		;funcret
  5093  0016CC                     __end_of_get_time:
  5094                           	callstack 0
  5095                           
  5096 ;; *************** function _read_ds1307 *****************
  5097 ;; Defined at:
  5098 ;;		line 67 in file "ds1307.c"
  5099 ;; Parameters:    Size  Location     Type
  5100 ;;  address         1    wreg     unsigned char 
  5101 ;; Auto vars:     Size  Location     Type
  5102 ;;  address         1    1[COMRAM] unsigned char 
  5103 ;;  data            1    2[COMRAM] unsigned char 
  5104 ;; Return value:  Size  Location     Type
  5105 ;;                  1    wreg      unsigned char 
  5106 ;; Registers used:
  5107 ;;		wreg, status,2, cstack
  5108 ;; Tracked objects:
  5109 ;;		On entry : 0/0
  5110 ;;		On exit  : 0/0
  5111 ;;		Unchanged: 0/0
  5112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5113 ;;      Params:         0       0       0       0       0       0       0
  5114 ;;      Locals:         2       0       0       0       0       0       0
  5115 ;;      Temps:          0       0       0       0       0       0       0
  5116 ;;      Totals:         2       0       0       0       0       0       0
  5117 ;;Total ram usage:        2 bytes
  5118 ;; Hardware stack levels used: 1
  5119 ;; Hardware stack levels required when called: 3
  5120 ;; This function calls:
  5121 ;;		_i2c_read
  5122 ;;		_i2c_rep_start
  5123 ;;		_i2c_start
  5124 ;;		_i2c_stop
  5125 ;;		_i2c_write
  5126 ;; This function is called by:
  5127 ;;		_init_ds1307
  5128 ;;		_get_time
  5129 ;;		_set_time
  5130 ;; This function uses a non-reentrant model
  5131 ;;
  5132                           
  5133                           	psect	text22
  5134  00133A                     __ptext22:
  5135                           	callstack 0
  5136  00133A                     _read_ds1307:
  5137                           	callstack 25
  5138                           
  5139                           ;incstack = 0
  5140                           ;read_ds1307@address stored from wreg
  5141  00133A  6E02               	movwf	read_ds1307@address^0,c
  5142                           
  5143                           ;ds1307.c: 69: unsigned char data;;ds1307.c: 71: i2c_start();
  5144  00133C  ECE7  F008         	call	_i2c_start	;wreg free
  5145                           
  5146                           ;ds1307.c: 72: i2c_write(0xD0);
  5147  001340  0ED0               	movlw	208
  5148  001342  ECF5  F008         	call	_i2c_write
  5149                           
  5150                           ;ds1307.c: 73: i2c_write(address);
  5151  001346  5002               	movf	read_ds1307@address^0,w,c
  5152  001348  ECF5  F008         	call	_i2c_write
  5153                           
  5154                           ;ds1307.c: 74: i2c_rep_start();
  5155  00134C  ECE3  F008         	call	_i2c_rep_start	;wreg free
  5156                           
  5157                           ;ds1307.c: 75: i2c_write(0xD1);
  5158  001350  0ED1               	movlw	209
  5159  001352  ECF5  F008         	call	_i2c_write
  5160                           
  5161                           ;ds1307.c: 76: data = i2c_read();
  5162  001356  ECEF  F008         	call	_i2c_read	;wreg free
  5163  00135A  6E03               	movwf	read_ds1307@data^0,c
  5164                           
  5165                           ;ds1307.c: 77: i2c_stop();
  5166  00135C  ECEB  F008         	call	_i2c_stop	;wreg free
  5167                           
  5168                           ;ds1307.c: 79: return data;
  5169  001360  5003               	movf	read_ds1307@data^0,w,c
  5170  001362  0012               	return		;funcret
  5171  001364                     __end_of_read_ds1307:
  5172                           	callstack 0
  5173                           
  5174 ;; *************** function _get_speed *****************
  5175 ;; Defined at:
  5176 ;;		line 132 in file "main.c"
  5177 ;; Parameters:    Size  Location     Type
  5178 ;;		None
  5179 ;; Auto vars:     Size  Location     Type
  5180 ;;  adc_reg_val     2   56[COMRAM] unsigned short 
  5181 ;; Return value:  Size  Location     Type
  5182 ;;                  1    wreg      void 
  5183 ;; Registers used:
  5184 ;;		wreg, status,2, status,0, cstack
  5185 ;; Tracked objects:
  5186 ;;		On entry : 0/0
  5187 ;;		On exit  : 0/0
  5188 ;;		Unchanged: 0/0
  5189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5190 ;;      Params:         0       0       0       0       0       0       0
  5191 ;;      Locals:         2       0       0       0       0       0       0
  5192 ;;      Temps:          0       0       0       0       0       0       0
  5193 ;;      Totals:         2       0       0       0       0       0       0
  5194 ;;Total ram usage:        2 bytes
  5195 ;; Hardware stack levels used: 1
  5196 ;; Hardware stack levels required when called: 2
  5197 ;; This function calls:
  5198 ;;		___ftdiv
  5199 ;;		___ftmul
  5200 ;;		___fttol
  5201 ;;		___lwdiv
  5202 ;;		___lwmod
  5203 ;;		___lwtoft
  5204 ;;		_read_adc
  5205 ;; This function is called by:
  5206 ;;		_main
  5207 ;; This function uses a non-reentrant model
  5208 ;;
  5209                           
  5210                           	psect	text23
  5211  001898                     __ptext23:
  5212                           	callstack 0
  5213  001898                     _get_speed:
  5214                           	callstack 28
  5215                           
  5216                           ;main.c: 134: unsigned short adc_reg_val = (float)read_adc(0x04) / 1023 * 99;
  5217                           
  5218                           ;incstack = 0
  5219  001898  0E00               	movlw	0
  5220  00189A  6E1E               	movwf	___ftmul@f2^0,c
  5221  00189C  0EC6               	movlw	198
  5222  00189E  6E1F               	movwf	(___ftmul@f2+1)^0,c
  5223  0018A0  0E42               	movlw	66
  5224  0018A2  6E20               	movwf	(___ftmul@f2+2)^0,c
  5225  0018A4  0EC0               	movlw	192
  5226  0018A6  6E0F               	movwf	___ftdiv@f2^0,c
  5227  0018A8  0E7F               	movlw	127
  5228  0018AA  6E10               	movwf	(___ftdiv@f2+1)^0,c
  5229  0018AC  0E44               	movlw	68
  5230  0018AE  6E11               	movwf	(___ftdiv@f2+2)^0,c
  5231  0018B0  0E04               	movlw	4
  5232  0018B2  EC05  F00A         	call	_read_adc
  5233  0018B6  C001  F009         	movff	?_read_adc,___lwtoft@c
  5234  0018BA  C002  F00A         	movff	?_read_adc+1,___lwtoft@c+1
  5235  0018BE  EC4D  F009         	call	___lwtoft	;wreg free
  5236  0018C2  C009  F00C         	movff	?___lwtoft,___ftdiv@f1
  5237  0018C6  C00A  F00D         	movff	?___lwtoft+1,___ftdiv@f1+1
  5238  0018CA  C00B  F00E         	movff	?___lwtoft+2,___ftdiv@f1+2
  5239  0018CE  ECB8  F00D         	call	___ftdiv	;wreg free
  5240  0018D2  C00C  F01B         	movff	?___ftdiv,___ftmul@f1
  5241  0018D6  C00D  F01C         	movff	?___ftdiv+1,___ftmul@f1+1
  5242  0018DA  C00E  F01D         	movff	?___ftdiv+2,___ftmul@f1+2
  5243  0018DE  ECA0  F00E         	call	___ftmul	;wreg free
  5244  0018E2  C01B  F02A         	movff	?___ftmul,___fttol@f1
  5245  0018E6  C01C  F02B         	movff	?___ftmul+1,___fttol@f1+1
  5246  0018EA  C01D  F02C         	movff	?___ftmul+2,___fttol@f1+2
  5247  0018EE  EC4F  F00D         	call	___fttol	;wreg free
  5248  0018F2  C02A  F039         	movff	?___fttol,get_speed@adc_reg_val
  5249  0018F6  C02B  F03A         	movff	?___fttol+1,get_speed@adc_reg_val+1
  5250                           
  5251                           ;main.c: 135: speed[0] = '0' + adc_reg_val / 10;
  5252  0018FA  C039  F001         	movff	get_speed@adc_reg_val,___lwdiv@dividend
  5253  0018FE  C03A  F002         	movff	get_speed@adc_reg_val+1,___lwdiv@dividend+1
  5254  001902  0E00               	movlw	0
  5255  001904  6E04               	movwf	(___lwdiv@divisor+1)^0,c
  5256  001906  0E0A               	movlw	10
  5257  001908  6E03               	movwf	___lwdiv@divisor^0,c
  5258  00190A  ECE5  F00A         	call	___lwdiv	;wreg free
  5259  00190E  5001               	movf	?___lwdiv^0,w,c
  5260  001910  0F30               	addlw	48
  5261  001912  6E5A               	movwf	_speed^0,c
  5262                           
  5263                           ;main.c: 136: speed[1] = '0' + adc_reg_val % 10;
  5264  001914  C039  F001         	movff	get_speed@adc_reg_val,___lwmod@dividend
  5265  001918  C03A  F002         	movff	get_speed@adc_reg_val+1,___lwmod@dividend+1
  5266  00191C  0E00               	movlw	0
  5267  00191E  6E04               	movwf	(___lwmod@divisor+1)^0,c
  5268  001920  0E0A               	movlw	10
  5269  001922  6E03               	movwf	___lwmod@divisor^0,c
  5270  001924  EC7F  F00A         	call	___lwmod	;wreg free
  5271  001928  5001               	movf	?___lwmod^0,w,c
  5272  00192A  0F30               	addlw	48
  5273  00192C  6E5B               	movwf	(_speed+1)^0,c
  5274                           
  5275                           ;main.c: 137: speed[2] = '\0';
  5276  00192E  0E00               	movlw	0
  5277  001930  6E5C               	movwf	(_speed+2)^0,c
  5278  001932  0012               	return		;funcret
  5279  001934                     __end_of_get_speed:
  5280                           	callstack 0
  5281                           
  5282 ;; *************** function _read_adc *****************
  5283 ;; Defined at:
  5284 ;;		line 52 in file "adc.c"
  5285 ;; Parameters:    Size  Location     Type
  5286 ;;  channel         1    wreg     unsigned char 
  5287 ;; Auto vars:     Size  Location     Type
  5288 ;;  channel         1    6[COMRAM] unsigned char 
  5289 ;;  reg_val         2    4[COMRAM] unsigned short 
  5290 ;; Return value:  Size  Location     Type
  5291 ;;                  2    0[COMRAM] unsigned short 
  5292 ;; Registers used:
  5293 ;;		wreg, status,2, status,0
  5294 ;; Tracked objects:
  5295 ;;		On entry : 0/0
  5296 ;;		On exit  : 0/0
  5297 ;;		Unchanged: 0/0
  5298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5299 ;;      Params:         2       0       0       0       0       0       0
  5300 ;;      Locals:         3       0       0       0       0       0       0
  5301 ;;      Temps:          2       0       0       0       0       0       0
  5302 ;;      Totals:         7       0       0       0       0       0       0
  5303 ;;Total ram usage:        7 bytes
  5304 ;; Hardware stack levels used: 1
  5305 ;; This function calls:
  5306 ;;		Nothing
  5307 ;; This function is called by:
  5308 ;;		_get_speed
  5309 ;; This function uses a non-reentrant model
  5310 ;;
  5311                           
  5312                           	psect	text24
  5313  00140A                     __ptext24:
  5314                           	callstack 0
  5315  00140A                     _read_adc:
  5316                           	callstack 29
  5317                           
  5318                           ;incstack = 0
  5319                           ;read_adc@channel stored from wreg
  5320  00140A  6E07               	movwf	read_adc@channel^0,c
  5321                           
  5322                           ;adc.c: 54: unsigned short reg_val;;adc.c: 58: ADCON0 = (ADCON0 & 0xC3) | (channel << 2)
      +                          ;
  5323  00140C  C007  F003         	movff	read_adc@channel,??_read_adc
  5324  001410  90D8               	bcf	status,0,c
  5325  001412  3603               	rlcf	??_read_adc^0,f,c
  5326  001414  90D8               	bcf	status,0,c
  5327  001416  3603               	rlcf	??_read_adc^0,f,c
  5328  001418  50C2               	movf	194,w,c	;volatile
  5329  00141A  0BC3               	andlw	195
  5330  00141C  1003               	iorwf	??_read_adc^0,w,c
  5331  00141E  6EC2               	movwf	194,c	;volatile
  5332                           
  5333                           ;adc.c: 61: GO = 1;
  5334  001420  82C2               	bsf	4034,1,c	;volatile
  5335  001422                     l36:
  5336  001422  B2C2               	btfsc	4034,1,c	;volatile
  5337  001424  D7FE               	goto	l36
  5338                           
  5339                           ;adc.c: 63: reg_val = (ADRESH << 8) | ADRESL;
  5340  001426  50C3               	movf	195,w,c	;volatile
  5341  001428  CFC4 F003          	movff	4036,??_read_adc	;volatile
  5342  00142C  6A04               	clrf	(??_read_adc+1)^0,c
  5343  00142E  C003  F004         	movff	??_read_adc,??_read_adc+1
  5344  001432  6A03               	clrf	??_read_adc^0,c
  5345  001434  1003               	iorwf	??_read_adc^0,w,c
  5346  001436  6E05               	movwf	read_adc@reg_val^0,c
  5347  001438  5004               	movf	(??_read_adc+1)^0,w,c
  5348  00143A  6E06               	movwf	(read_adc@reg_val+1)^0,c
  5349                           
  5350                           ;adc.c: 65: return reg_val;
  5351  00143C  C005  F001         	movff	read_adc@reg_val,?_read_adc
  5352  001440  C006  F002         	movff	read_adc@reg_val+1,?_read_adc+1
  5353  001444  0012               	return		;funcret
  5354  001446                     __end_of_read_adc:
  5355                           	callstack 0
  5356                           
  5357 ;; *************** function ___lwtoft *****************
  5358 ;; Defined at:
  5359 ;;		line 28 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\lwtoft.c"
  5360 ;; Parameters:    Size  Location     Type
  5361 ;;  c               2    8[COMRAM] unsigned int 
  5362 ;; Auto vars:     Size  Location     Type
  5363 ;;		None
  5364 ;; Return value:  Size  Location     Type
  5365 ;;                  3    8[COMRAM] float 
  5366 ;; Registers used:
  5367 ;;		wreg, status,2, status,0, cstack
  5368 ;; Tracked objects:
  5369 ;;		On entry : 0/0
  5370 ;;		On exit  : 0/0
  5371 ;;		Unchanged: 0/0
  5372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5373 ;;      Params:         3       0       0       0       0       0       0
  5374 ;;      Locals:         0       0       0       0       0       0       0
  5375 ;;      Temps:          0       0       0       0       0       0       0
  5376 ;;      Totals:         3       0       0       0       0       0       0
  5377 ;;Total ram usage:        3 bytes
  5378 ;; Hardware stack levels used: 1
  5379 ;; Hardware stack levels required when called: 1
  5380 ;; This function calls:
  5381 ;;		___ftpack
  5382 ;; This function is called by:
  5383 ;;		_get_speed
  5384 ;; This function uses a non-reentrant model
  5385 ;;
  5386                           
  5387                           	psect	text25
  5388  00129A                     __ptext25:
  5389                           	callstack 0
  5390  00129A                     ___lwtoft:
  5391                           	callstack 28
  5392                           
  5393                           ;incstack = 0
  5394  00129A  C009  F001         	movff	___lwtoft@c,___ftpack@arg
  5395  00129E  C00A  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
  5396  0012A2  6A03               	clrf	(___ftpack@arg+2)^0,c
  5397  0012A4  0E8E               	movlw	142
  5398  0012A6  6E04               	movwf	___ftpack@exp^0,c
  5399  0012A8  0E00               	movlw	0
  5400  0012AA  6E05               	movwf	___ftpack@sign^0,c
  5401  0012AC  EC9A  F00C         	call	___ftpack	;wreg free
  5402  0012B0  C001  F009         	movff	?___ftpack,?___lwtoft
  5403  0012B4  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
  5404  0012B8  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
  5405  0012BC  0012               	return		;funcret
  5406  0012BE                     __end_of___lwtoft:
  5407                           	callstack 0
  5408                           
  5409 ;; *************** function ___lwmod *****************
  5410 ;; Defined at:
  5411 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\lwmod.c"
  5412 ;; Parameters:    Size  Location     Type
  5413 ;;  dividend        2    0[COMRAM] unsigned int 
  5414 ;;  divisor         2    2[COMRAM] unsigned int 
  5415 ;; Auto vars:     Size  Location     Type
  5416 ;;  counter         1    4[COMRAM] unsigned char 
  5417 ;; Return value:  Size  Location     Type
  5418 ;;                  2    0[COMRAM] unsigned int 
  5419 ;; Registers used:
  5420 ;;		wreg, status,2, status,0
  5421 ;; Tracked objects:
  5422 ;;		On entry : 0/0
  5423 ;;		On exit  : 0/0
  5424 ;;		Unchanged: 0/0
  5425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5426 ;;      Params:         4       0       0       0       0       0       0
  5427 ;;      Locals:         1       0       0       0       0       0       0
  5428 ;;      Temps:          0       0       0       0       0       0       0
  5429 ;;      Totals:         5       0       0       0       0       0       0
  5430 ;;Total ram usage:        5 bytes
  5431 ;; Hardware stack levels used: 1
  5432 ;; This function calls:
  5433 ;;		Nothing
  5434 ;; This function is called by:
  5435 ;;		_get_speed
  5436 ;; This function uses a non-reentrant model
  5437 ;;
  5438                           
  5439                           	psect	text26
  5440  0014FE                     __ptext26:
  5441                           	callstack 0
  5442  0014FE                     ___lwmod:
  5443                           	callstack 29
  5444                           
  5445                           ;incstack = 0
  5446  0014FE  5003               	movf	___lwmod@divisor^0,w,c
  5447  001500  1004               	iorwf	(___lwmod@divisor+1)^0,w,c
  5448  001502  B4D8               	btfsc	status,2,c
  5449  001504  D018               	goto	l1132
  5450  001506  0E01               	movlw	1
  5451  001508  6E05               	movwf	___lwmod@counter^0,c
  5452  00150A  D004               	goto	l3654
  5453  00150C                     l3652:
  5454  00150C  90D8               	bcf	status,0,c
  5455  00150E  3603               	rlcf	___lwmod@divisor^0,f,c
  5456  001510  3604               	rlcf	(___lwmod@divisor+1)^0,f,c
  5457  001512  2A05               	incf	___lwmod@counter^0,f,c
  5458  001514                     l3654:
  5459  001514  AE04               	btfss	(___lwmod@divisor+1)^0,7,c
  5460  001516  D7FA               	goto	l3652
  5461  001518                     u2370:
  5462  001518  5003               	movf	___lwmod@divisor^0,w,c
  5463  00151A  5C01               	subwf	___lwmod@dividend^0,w,c
  5464  00151C  5004               	movf	(___lwmod@divisor+1)^0,w,c
  5465  00151E  5802               	subwfb	(___lwmod@dividend+1)^0,w,c
  5466  001520  A0D8               	btfss	status,0,c
  5467  001522  D004               	goto	l3660
  5468  001524  5003               	movf	___lwmod@divisor^0,w,c
  5469  001526  5E01               	subwf	___lwmod@dividend^0,f,c
  5470  001528  5004               	movf	(___lwmod@divisor+1)^0,w,c
  5471  00152A  5A02               	subwfb	(___lwmod@dividend+1)^0,f,c
  5472  00152C                     l3660:
  5473  00152C  90D8               	bcf	status,0,c
  5474  00152E  3204               	rrcf	(___lwmod@divisor+1)^0,f,c
  5475  001530  3203               	rrcf	___lwmod@divisor^0,f,c
  5476  001532  2E05               	decfsz	___lwmod@counter^0,f,c
  5477  001534  D7F1               	goto	u2370
  5478  001536                     l1132:
  5479  001536  C001  F001         	movff	___lwmod@dividend,?___lwmod
  5480  00153A  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
  5481  00153E  0012               	return		;funcret
  5482  001540                     __end_of___lwmod:
  5483                           	callstack 0
  5484                           
  5485 ;; *************** function ___lwdiv *****************
  5486 ;; Defined at:
  5487 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\lwdiv.c"
  5488 ;; Parameters:    Size  Location     Type
  5489 ;;  dividend        2    0[COMRAM] unsigned int 
  5490 ;;  divisor         2    2[COMRAM] unsigned int 
  5491 ;; Auto vars:     Size  Location     Type
  5492 ;;  quotient        2    4[COMRAM] unsigned int 
  5493 ;;  counter         1    6[COMRAM] unsigned char 
  5494 ;; Return value:  Size  Location     Type
  5495 ;;                  2    0[COMRAM] unsigned int 
  5496 ;; Registers used:
  5497 ;;		wreg, status,2, status,0
  5498 ;; Tracked objects:
  5499 ;;		On entry : 0/0
  5500 ;;		On exit  : 0/0
  5501 ;;		Unchanged: 0/0
  5502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5503 ;;      Params:         4       0       0       0       0       0       0
  5504 ;;      Locals:         3       0       0       0       0       0       0
  5505 ;;      Temps:          0       0       0       0       0       0       0
  5506 ;;      Totals:         7       0       0       0       0       0       0
  5507 ;;Total ram usage:        7 bytes
  5508 ;; Hardware stack levels used: 1
  5509 ;; This function calls:
  5510 ;;		Nothing
  5511 ;; This function is called by:
  5512 ;;		_get_speed
  5513 ;; This function uses a non-reentrant model
  5514 ;;
  5515                           
  5516                           	psect	text27
  5517  0015CA                     __ptext27:
  5518                           	callstack 0
  5519  0015CA                     ___lwdiv:
  5520                           	callstack 29
  5521                           
  5522                           ;incstack = 0
  5523  0015CA  0E00               	movlw	0
  5524  0015CC  6E06               	movwf	(___lwdiv@quotient+1)^0,c
  5525  0015CE  0E00               	movlw	0
  5526  0015D0  6E05               	movwf	___lwdiv@quotient^0,c
  5527  0015D2  5003               	movf	___lwdiv@divisor^0,w,c
  5528  0015D4  1004               	iorwf	(___lwdiv@divisor+1)^0,w,c
  5529  0015D6  B4D8               	btfsc	status,2,c
  5530  0015D8  D01C               	goto	l1122
  5531  0015DA  0E01               	movlw	1
  5532  0015DC  6E07               	movwf	___lwdiv@counter^0,c
  5533  0015DE  D004               	goto	l3634
  5534  0015E0                     l3632:
  5535  0015E0  90D8               	bcf	status,0,c
  5536  0015E2  3603               	rlcf	___lwdiv@divisor^0,f,c
  5537  0015E4  3604               	rlcf	(___lwdiv@divisor+1)^0,f,c
  5538  0015E6  2A07               	incf	___lwdiv@counter^0,f,c
  5539  0015E8                     l3634:
  5540  0015E8  AE04               	btfss	(___lwdiv@divisor+1)^0,7,c
  5541  0015EA  D7FA               	goto	l3632
  5542  0015EC                     u2340:
  5543  0015EC  90D8               	bcf	status,0,c
  5544  0015EE  3605               	rlcf	___lwdiv@quotient^0,f,c
  5545  0015F0  3606               	rlcf	(___lwdiv@quotient+1)^0,f,c
  5546  0015F2  5003               	movf	___lwdiv@divisor^0,w,c
  5547  0015F4  5C01               	subwf	___lwdiv@dividend^0,w,c
  5548  0015F6  5004               	movf	(___lwdiv@divisor+1)^0,w,c
  5549  0015F8  5802               	subwfb	(___lwdiv@dividend+1)^0,w,c
  5550  0015FA  A0D8               	btfss	status,0,c
  5551  0015FC  D005               	goto	l3644
  5552  0015FE  5003               	movf	___lwdiv@divisor^0,w,c
  5553  001600  5E01               	subwf	___lwdiv@dividend^0,f,c
  5554  001602  5004               	movf	(___lwdiv@divisor+1)^0,w,c
  5555  001604  5A02               	subwfb	(___lwdiv@dividend+1)^0,f,c
  5556  001606  8005               	bsf	___lwdiv@quotient^0,0,c
  5557  001608                     l3644:
  5558  001608  90D8               	bcf	status,0,c
  5559  00160A  3204               	rrcf	(___lwdiv@divisor+1)^0,f,c
  5560  00160C  3203               	rrcf	___lwdiv@divisor^0,f,c
  5561  00160E  2E07               	decfsz	___lwdiv@counter^0,f,c
  5562  001610  D7ED               	goto	u2340
  5563  001612                     l1122:
  5564  001612  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  5565  001616  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5566  00161A  0012               	return		;funcret
  5567  00161C                     __end_of___lwdiv:
  5568                           	callstack 0
  5569                           
  5570 ;; *************** function ___fttol *****************
  5571 ;; Defined at:
  5572 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\fttol.c"
  5573 ;; Parameters:    Size  Location     Type
  5574 ;;  f1              3   41[COMRAM] float 
  5575 ;; Auto vars:     Size  Location     Type
  5576 ;;  lval            4   51[COMRAM] unsigned long 
  5577 ;;  exp1            1   55[COMRAM] unsigned char 
  5578 ;;  sign1           1   50[COMRAM] unsigned char 
  5579 ;; Return value:  Size  Location     Type
  5580 ;;                  4   41[COMRAM] long 
  5581 ;; Registers used:
  5582 ;;		wreg, status,2, status,0
  5583 ;; Tracked objects:
  5584 ;;		On entry : 0/0
  5585 ;;		On exit  : 0/0
  5586 ;;		Unchanged: 0/0
  5587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5588 ;;      Params:         4       0       0       0       0       0       0
  5589 ;;      Locals:         6       0       0       0       0       0       0
  5590 ;;      Temps:          5       0       0       0       0       0       0
  5591 ;;      Totals:        15       0       0       0       0       0       0
  5592 ;;Total ram usage:       15 bytes
  5593 ;; Hardware stack levels used: 1
  5594 ;; This function calls:
  5595 ;;		Nothing
  5596 ;; This function is called by:
  5597 ;;		_get_speed
  5598 ;; This function uses a non-reentrant model
  5599 ;;
  5600                           
  5601                           	psect	text28
  5602  001A9E                     __ptext28:
  5603                           	callstack 0
  5604  001A9E                     ___fttol:
  5605                           	callstack 29
  5606                           
  5607                           ;incstack = 0
  5608  001A9E  C02C  F02E         	movff	___fttol@f1+2,??___fttol
  5609  001AA2  6A2F               	clrf	(??___fttol+1)^0,c
  5610  001AA4  6A30               	clrf	(??___fttol+2)^0,c
  5611  001AA6  342B               	rlcf	(___fttol@f1+1)^0,w,c
  5612  001AA8  362E               	rlcf	??___fttol^0,f,c
  5613  001AAA  E301               	bnc	u2211
  5614  001AAC  802F               	bsf	(??___fttol+1)^0,0,c
  5615  001AAE                     u2211:
  5616  001AAE  502E               	movf	??___fttol^0,w,c
  5617  001AB0  6E38               	movwf	___fttol@exp1^0,c
  5618  001AB2  5038               	movf	___fttol@exp1^0,w,c
  5619  001AB4  A4D8               	btfss	status,2,c
  5620  001AB6  D009               	goto	l3544
  5621  001AB8                     u2220:
  5622  001AB8  0E00               	movlw	0
  5623  001ABA  6E2A               	movwf	?___fttol^0,c
  5624  001ABC  0E00               	movlw	0
  5625  001ABE  6E2B               	movwf	(?___fttol+1)^0,c
  5626  001AC0  0E00               	movlw	0
  5627  001AC2  6E2C               	movwf	(?___fttol+2)^0,c
  5628  001AC4  0E00               	movlw	0
  5629  001AC6  6E2D               	movwf	(?___fttol+3)^0,c
  5630  001AC8  0012               	return	
  5631  001ACA                     l3544:
  5632  001ACA  0E17               	movlw	23
  5633  001ACC  6E2E               	movwf	??___fttol^0,c
  5634  001ACE  C02A  F02F         	movff	___fttol@f1,??___fttol+1
  5635  001AD2  C02B  F030         	movff	___fttol@f1+1,??___fttol+2
  5636  001AD6  C02C  F031         	movff	___fttol@f1+2,??___fttol+3
  5637  001ADA  282E               	incf	??___fttol^0,w,c
  5638  001ADC  6E32               	movwf	(??___fttol+4)^0,c
  5639  001ADE  D004               	goto	u2230
  5640  001AE0                     u2235:
  5641  001AE0  90D8               	bcf	status,0,c
  5642  001AE2  3231               	rrcf	(??___fttol+3)^0,f,c
  5643  001AE4  3230               	rrcf	(??___fttol+2)^0,f,c
  5644  001AE6  322F               	rrcf	(??___fttol+1)^0,f,c
  5645  001AE8                     u2230:
  5646  001AE8  2E32               	decfsz	(??___fttol+4)^0,f,c
  5647  001AEA  D7FA               	goto	u2235
  5648  001AEC  502F               	movf	(??___fttol+1)^0,w,c
  5649  001AEE  6E33               	movwf	___fttol@sign1^0,c
  5650  001AF0  8E2B               	bsf	(___fttol@f1+1)^0,7,c
  5651  001AF2  0EFF               	movlw	255
  5652  001AF4  162A               	andwf	___fttol@f1^0,f,c
  5653  001AF6  0EFF               	movlw	255
  5654  001AF8  162B               	andwf	(___fttol@f1+1)^0,f,c
  5655  001AFA  0E00               	movlw	0
  5656  001AFC  162C               	andwf	(___fttol@f1+2)^0,f,c
  5657  001AFE  502A               	movf	___fttol@f1^0,w,c
  5658  001B00  6E34               	movwf	___fttol@lval^0,c
  5659  001B02  502B               	movf	(___fttol@f1+1)^0,w,c
  5660  001B04  6E35               	movwf	(___fttol@lval+1)^0,c
  5661  001B06  502C               	movf	(___fttol@f1+2)^0,w,c
  5662  001B08  6E36               	movwf	(___fttol@lval+2)^0,c
  5663  001B0A  6A37               	clrf	(___fttol@lval+3)^0,c
  5664  001B0C  0E8E               	movlw	142
  5665  001B0E  5E38               	subwf	___fttol@exp1^0,f,c
  5666  001B10  AE38               	btfss	___fttol@exp1^0,7,c
  5667  001B12  D00D               	goto	l3566
  5668  001B14  5038               	movf	___fttol@exp1^0,w,c
  5669  001B16  0A80               	xorlw	128
  5670  001B18  0F8F               	addlw	143
  5671  001B1A  A0D8               	btfss	status,0,c
  5672  001B1C  D7CD               	goto	u2220
  5673  001B1E                     l3562:
  5674  001B1E  90D8               	bcf	status,0,c
  5675  001B20  3237               	rrcf	(___fttol@lval+3)^0,f,c
  5676  001B22  3236               	rrcf	(___fttol@lval+2)^0,f,c
  5677  001B24  3235               	rrcf	(___fttol@lval+1)^0,f,c
  5678  001B26  3234               	rrcf	___fttol@lval^0,f,c
  5679  001B28  3E38               	incfsz	___fttol@exp1^0,f,c
  5680  001B2A  D7F9               	goto	l3562
  5681  001B2C  D00D               	goto	u2270
  5682  001B2E                     l3566:
  5683  001B2E  0E17               	movlw	23
  5684  001B30  6438               	cpfsgt	___fttol@exp1^0,c
  5685  001B32  D007               	goto	l3574
  5686  001B34  D7C1               	goto	u2220
  5687  001B36                     l3572:
  5688  001B36  90D8               	bcf	status,0,c
  5689  001B38  3634               	rlcf	___fttol@lval^0,f,c
  5690  001B3A  3635               	rlcf	(___fttol@lval+1)^0,f,c
  5691  001B3C  3636               	rlcf	(___fttol@lval+2)^0,f,c
  5692  001B3E  3637               	rlcf	(___fttol@lval+3)^0,f,c
  5693  001B40  0638               	decf	___fttol@exp1^0,f,c
  5694  001B42                     l3574:
  5695  001B42  5038               	movf	___fttol@exp1^0,w,c
  5696  001B44  A4D8               	btfss	status,2,c
  5697  001B46  D7F7               	goto	l3572
  5698  001B48                     u2270:
  5699  001B48  5033               	movf	___fttol@sign1^0,w,c
  5700  001B4A  B4D8               	btfsc	status,2,c
  5701  001B4C  D008               	goto	l3580
  5702  001B4E  1E37               	comf	(___fttol@lval+3)^0,f,c
  5703  001B50  1E36               	comf	(___fttol@lval+2)^0,f,c
  5704  001B52  1E35               	comf	(___fttol@lval+1)^0,f,c
  5705  001B54  6C34               	negf	___fttol@lval^0,c
  5706  001B56  0E00               	movlw	0
  5707  001B58  2235               	addwfc	(___fttol@lval+1)^0,f,c
  5708  001B5A  2236               	addwfc	(___fttol@lval+2)^0,f,c
  5709  001B5C  2237               	addwfc	(___fttol@lval+3)^0,f,c
  5710  001B5E                     l3580:
  5711  001B5E  C034  F02A         	movff	___fttol@lval,?___fttol
  5712  001B62  C035  F02B         	movff	___fttol@lval+1,?___fttol+1
  5713  001B66  C036  F02C         	movff	___fttol@lval+2,?___fttol+2
  5714  001B6A  C037  F02D         	movff	___fttol@lval+3,?___fttol+3
  5715  001B6E  0012               	return		;funcret
  5716  001B70                     __end_of___fttol:
  5717                           	callstack 0
  5718                           
  5719 ;; *************** function ___ftmul *****************
  5720 ;; Defined at:
  5721 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\ftmul.c"
  5722 ;; Parameters:    Size  Location     Type
  5723 ;;  f1              3   26[COMRAM] float 
  5724 ;;  f2              3   29[COMRAM] float 
  5725 ;; Auto vars:     Size  Location     Type
  5726 ;;  f3_as_produc    3   36[COMRAM] unsigned um
  5727 ;;  sign            1   40[COMRAM] unsigned char 
  5728 ;;  cntr            1   39[COMRAM] unsigned char 
  5729 ;;  exp             1   35[COMRAM] unsigned char 
  5730 ;; Return value:  Size  Location     Type
  5731 ;;                  3   26[COMRAM] float 
  5732 ;; Registers used:
  5733 ;;		wreg, status,2, status,0, cstack
  5734 ;; Tracked objects:
  5735 ;;		On entry : 0/0
  5736 ;;		On exit  : 0/0
  5737 ;;		Unchanged: 0/0
  5738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5739 ;;      Params:         6       0       0       0       0       0       0
  5740 ;;      Locals:         6       0       0       0       0       0       0
  5741 ;;      Temps:          3       0       0       0       0       0       0
  5742 ;;      Totals:        15       0       0       0       0       0       0
  5743 ;;Total ram usage:       15 bytes
  5744 ;; Hardware stack levels used: 1
  5745 ;; Hardware stack levels required when called: 1
  5746 ;; This function calls:
  5747 ;;		___ftpack
  5748 ;; This function is called by:
  5749 ;;		_get_speed
  5750 ;; This function uses a non-reentrant model
  5751 ;;
  5752                           
  5753                           	psect	text29
  5754  001D40                     __ptext29:
  5755                           	callstack 0
  5756  001D40                     ___ftmul:
  5757                           	callstack 28
  5758                           
  5759                           ;incstack = 0
  5760  001D40  C01D  F021         	movff	___ftmul@f1+2,??___ftmul
  5761  001D44  6A22               	clrf	(??___ftmul+1)^0,c
  5762  001D46  6A23               	clrf	(??___ftmul+2)^0,c
  5763  001D48  341C               	rlcf	(___ftmul@f1+1)^0,w,c
  5764  001D4A  3621               	rlcf	??___ftmul^0,f,c
  5765  001D4C  E301               	bnc	u2151
  5766  001D4E  8022               	bsf	(??___ftmul+1)^0,0,c
  5767  001D50                     u2151:
  5768  001D50  5021               	movf	??___ftmul^0,w,c
  5769  001D52  6E24               	movwf	___ftmul@exp^0,c
  5770  001D54  5024               	movf	___ftmul@exp^0,w,c
  5771  001D56  A4D8               	btfss	status,2,c
  5772  001D58  D007               	goto	l3496
  5773  001D5A  0E00               	movlw	0
  5774  001D5C  6E1B               	movwf	?___ftmul^0,c
  5775  001D5E  0E00               	movlw	0
  5776  001D60  6E1C               	movwf	(?___ftmul+1)^0,c
  5777  001D62  0E00               	movlw	0
  5778  001D64  6E1D               	movwf	(?___ftmul+2)^0,c
  5779  001D66  0012               	return	
  5780  001D68                     l3496:
  5781  001D68  C020  F021         	movff	___ftmul@f2+2,??___ftmul
  5782  001D6C  6A22               	clrf	(??___ftmul+1)^0,c
  5783  001D6E  6A23               	clrf	(??___ftmul+2)^0,c
  5784  001D70  341F               	rlcf	(___ftmul@f2+1)^0,w,c
  5785  001D72  3621               	rlcf	??___ftmul^0,f,c
  5786  001D74  E301               	bnc	u2171
  5787  001D76  8022               	bsf	(??___ftmul+1)^0,0,c
  5788  001D78                     u2171:
  5789  001D78  5021               	movf	??___ftmul^0,w,c
  5790  001D7A  6E29               	movwf	___ftmul@sign^0,c
  5791  001D7C  5029               	movf	___ftmul@sign^0,w,c
  5792  001D7E  A4D8               	btfss	status,2,c
  5793  001D80  D007               	goto	l3502
  5794  001D82  0E00               	movlw	0
  5795  001D84  6E1B               	movwf	?___ftmul^0,c
  5796  001D86  0E00               	movlw	0
  5797  001D88  6E1C               	movwf	(?___ftmul+1)^0,c
  5798  001D8A  0E00               	movlw	0
  5799  001D8C  6E1D               	movwf	(?___ftmul+2)^0,c
  5800  001D8E  0012               	return	
  5801  001D90                     l3502:
  5802  001D90  5029               	movf	___ftmul@sign^0,w,c
  5803  001D92  0F7B               	addlw	123
  5804  001D94  2624               	addwf	___ftmul@exp^0,f,c
  5805  001D96  C01D  F029         	movff	___ftmul@f1+2,___ftmul@sign
  5806  001D9A  5020               	movf	(___ftmul@f2+2)^0,w,c
  5807  001D9C  1A29               	xorwf	___ftmul@sign^0,f,c
  5808  001D9E  0E80               	movlw	128
  5809  001DA0  1629               	andwf	___ftmul@sign^0,f,c
  5810  001DA2  8E1C               	bsf	(___ftmul@f1+1)^0,7,c
  5811  001DA4  8E1F               	bsf	(___ftmul@f2+1)^0,7,c
  5812  001DA6  0EFF               	movlw	255
  5813  001DA8  161E               	andwf	___ftmul@f2^0,f,c
  5814  001DAA  0EFF               	movlw	255
  5815  001DAC  161F               	andwf	(___ftmul@f2+1)^0,f,c
  5816  001DAE  0E00               	movlw	0
  5817  001DB0  1620               	andwf	(___ftmul@f2+2)^0,f,c
  5818  001DB2  0E00               	movlw	0
  5819  001DB4  6E25               	movwf	___ftmul@f3_as_product^0,c
  5820  001DB6  0E00               	movlw	0
  5821  001DB8  6E26               	movwf	(___ftmul@f3_as_product+1)^0,c
  5822  001DBA  0E00               	movlw	0
  5823  001DBC  6E27               	movwf	(___ftmul@f3_as_product+2)^0,c
  5824  001DBE  0E07               	movlw	7
  5825  001DC0  6E28               	movwf	___ftmul@cntr^0,c
  5826  001DC2                     l3516:
  5827  001DC2  A01B               	btfss	___ftmul@f1^0,0,c
  5828  001DC4  D006               	goto	l3520
  5829  001DC6  501E               	movf	___ftmul@f2^0,w,c
  5830  001DC8  2625               	addwf	___ftmul@f3_as_product^0,f,c
  5831  001DCA  501F               	movf	(___ftmul@f2+1)^0,w,c
  5832  001DCC  2226               	addwfc	(___ftmul@f3_as_product+1)^0,f,c
  5833  001DCE  5020               	movf	(___ftmul@f2+2)^0,w,c
  5834  001DD0  2227               	addwfc	(___ftmul@f3_as_product+2)^0,f,c
  5835  001DD2                     l3520:
  5836  001DD2  90D8               	bcf	status,0,c
  5837  001DD4  321D               	rrcf	(___ftmul@f1+2)^0,f,c
  5838  001DD6  321C               	rrcf	(___ftmul@f1+1)^0,f,c
  5839  001DD8  321B               	rrcf	___ftmul@f1^0,f,c
  5840  001DDA  90D8               	bcf	status,0,c
  5841  001DDC  361E               	rlcf	___ftmul@f2^0,f,c
  5842  001DDE  361F               	rlcf	(___ftmul@f2+1)^0,f,c
  5843  001DE0  3620               	rlcf	(___ftmul@f2+2)^0,f,c
  5844  001DE2  2E28               	decfsz	___ftmul@cntr^0,f,c
  5845  001DE4  D7EE               	goto	l3516
  5846  001DE6  0E09               	movlw	9
  5847  001DE8  6E28               	movwf	___ftmul@cntr^0,c
  5848  001DEA                     l3526:
  5849  001DEA  A01B               	btfss	___ftmul@f1^0,0,c
  5850  001DEC  D006               	goto	l3530
  5851  001DEE  501E               	movf	___ftmul@f2^0,w,c
  5852  001DF0  2625               	addwf	___ftmul@f3_as_product^0,f,c
  5853  001DF2  501F               	movf	(___ftmul@f2+1)^0,w,c
  5854  001DF4  2226               	addwfc	(___ftmul@f3_as_product+1)^0,f,c
  5855  001DF6  5020               	movf	(___ftmul@f2+2)^0,w,c
  5856  001DF8  2227               	addwfc	(___ftmul@f3_as_product+2)^0,f,c
  5857  001DFA                     l3530:
  5858  001DFA  90D8               	bcf	status,0,c
  5859  001DFC  321D               	rrcf	(___ftmul@f1+2)^0,f,c
  5860  001DFE  321C               	rrcf	(___ftmul@f1+1)^0,f,c
  5861  001E00  321B               	rrcf	___ftmul@f1^0,f,c
  5862  001E02  90D8               	bcf	status,0,c
  5863  001E04  3227               	rrcf	(___ftmul@f3_as_product+2)^0,f,c
  5864  001E06  3226               	rrcf	(___ftmul@f3_as_product+1)^0,f,c
  5865  001E08  3225               	rrcf	___ftmul@f3_as_product^0,f,c
  5866  001E0A  2E28               	decfsz	___ftmul@cntr^0,f,c
  5867  001E0C  D7EE               	goto	l3526
  5868  001E0E  C025  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  5869  001E12  C026  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  5870  001E16  C027  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  5871  001E1A  C024  F004         	movff	___ftmul@exp,___ftpack@exp
  5872  001E1E  C029  F005         	movff	___ftmul@sign,___ftpack@sign
  5873  001E22  EC9A  F00C         	call	___ftpack	;wreg free
  5874  001E26  C001  F01B         	movff	?___ftpack,?___ftmul
  5875  001E2A  C002  F01C         	movff	?___ftpack+1,?___ftmul+1
  5876  001E2E  C003  F01D         	movff	?___ftpack+2,?___ftmul+2
  5877  001E32  0012               	return		;funcret
  5878  001E34                     __end_of___ftmul:
  5879                           	callstack 0
  5880                           
  5881 ;; *************** function ___ftdiv *****************
  5882 ;; Defined at:
  5883 ;;		line 54 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\ftdiv.c"
  5884 ;; Parameters:    Size  Location     Type
  5885 ;;  f1              3   11[COMRAM] float 
  5886 ;;  f2              3   14[COMRAM] float 
  5887 ;; Auto vars:     Size  Location     Type
  5888 ;;  f3              3   21[COMRAM] float 
  5889 ;;  sign            1   25[COMRAM] unsigned char 
  5890 ;;  exp             1   24[COMRAM] unsigned char 
  5891 ;;  cntr            1   20[COMRAM] unsigned char 
  5892 ;; Return value:  Size  Location     Type
  5893 ;;                  3   11[COMRAM] float 
  5894 ;; Registers used:
  5895 ;;		wreg, status,2, status,0, cstack
  5896 ;; Tracked objects:
  5897 ;;		On entry : 0/0
  5898 ;;		On exit  : 0/0
  5899 ;;		Unchanged: 0/0
  5900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5901 ;;      Params:         6       0       0       0       0       0       0
  5902 ;;      Locals:         6       0       0       0       0       0       0
  5903 ;;      Temps:          3       0       0       0       0       0       0
  5904 ;;      Totals:        15       0       0       0       0       0       0
  5905 ;;Total ram usage:       15 bytes
  5906 ;; Hardware stack levels used: 1
  5907 ;; Hardware stack levels required when called: 1
  5908 ;; This function calls:
  5909 ;;		___ftpack
  5910 ;; This function is called by:
  5911 ;;		_get_speed
  5912 ;; This function uses a non-reentrant model
  5913 ;;
  5914                           
  5915                           	psect	text30
  5916  001B70                     __ptext30:
  5917                           	callstack 0
  5918  001B70                     ___ftdiv:
  5919                           	callstack 28
  5920                           
  5921                           ;incstack = 0
  5922  001B70  C00E  F012         	movff	___ftdiv@f1+2,??___ftdiv
  5923  001B74  6A13               	clrf	(??___ftdiv+1)^0,c
  5924  001B76  6A14               	clrf	(??___ftdiv+2)^0,c
  5925  001B78  340D               	rlcf	(___ftdiv@f1+1)^0,w,c
  5926  001B7A  3612               	rlcf	??___ftdiv^0,f,c
  5927  001B7C  E301               	bnc	u2101
  5928  001B7E  8013               	bsf	(??___ftdiv+1)^0,0,c
  5929  001B80                     u2101:
  5930  001B80  5012               	movf	??___ftdiv^0,w,c
  5931  001B82  6E19               	movwf	___ftdiv@exp^0,c
  5932  001B84  5019               	movf	___ftdiv@exp^0,w,c
  5933  001B86  A4D8               	btfss	status,2,c
  5934  001B88  D007               	goto	l3450
  5935  001B8A  0E00               	movlw	0
  5936  001B8C  6E0C               	movwf	?___ftdiv^0,c
  5937  001B8E  0E00               	movlw	0
  5938  001B90  6E0D               	movwf	(?___ftdiv+1)^0,c
  5939  001B92  0E00               	movlw	0
  5940  001B94  6E0E               	movwf	(?___ftdiv+2)^0,c
  5941  001B96  0012               	return	
  5942  001B98                     l3450:
  5943  001B98  C011  F012         	movff	___ftdiv@f2+2,??___ftdiv
  5944  001B9C  6A13               	clrf	(??___ftdiv+1)^0,c
  5945  001B9E  6A14               	clrf	(??___ftdiv+2)^0,c
  5946  001BA0  3410               	rlcf	(___ftdiv@f2+1)^0,w,c
  5947  001BA2  3612               	rlcf	??___ftdiv^0,f,c
  5948  001BA4  E301               	bnc	u2121
  5949  001BA6  8013               	bsf	(??___ftdiv+1)^0,0,c
  5950  001BA8                     u2121:
  5951  001BA8  5012               	movf	??___ftdiv^0,w,c
  5952  001BAA  6E1A               	movwf	___ftdiv@sign^0,c
  5953  001BAC  501A               	movf	___ftdiv@sign^0,w,c
  5954  001BAE  A4D8               	btfss	status,2,c
  5955  001BB0  D007               	goto	l3456
  5956  001BB2  0E00               	movlw	0
  5957  001BB4  6E0C               	movwf	?___ftdiv^0,c
  5958  001BB6  0E00               	movlw	0
  5959  001BB8  6E0D               	movwf	(?___ftdiv+1)^0,c
  5960  001BBA  0E00               	movlw	0
  5961  001BBC  6E0E               	movwf	(?___ftdiv+2)^0,c
  5962  001BBE  0012               	return	
  5963  001BC0                     l3456:
  5964  001BC0  0E00               	movlw	0
  5965  001BC2  6E16               	movwf	___ftdiv@f3^0,c
  5966  001BC4  0E00               	movlw	0
  5967  001BC6  6E17               	movwf	(___ftdiv@f3+1)^0,c
  5968  001BC8  0E00               	movlw	0
  5969  001BCA  6E18               	movwf	(___ftdiv@f3+2)^0,c
  5970  001BCC  501A               	movf	___ftdiv@sign^0,w,c
  5971  001BCE  0F89               	addlw	137
  5972  001BD0  5E19               	subwf	___ftdiv@exp^0,f,c
  5973  001BD2  C00E  F01A         	movff	___ftdiv@f1+2,___ftdiv@sign
  5974  001BD6  5011               	movf	(___ftdiv@f2+2)^0,w,c
  5975  001BD8  1A1A               	xorwf	___ftdiv@sign^0,f,c
  5976  001BDA  0E80               	movlw	128
  5977  001BDC  161A               	andwf	___ftdiv@sign^0,f,c
  5978  001BDE  8E0D               	bsf	(___ftdiv@f1+1)^0,7,c
  5979  001BE0  0EFF               	movlw	255
  5980  001BE2  160C               	andwf	___ftdiv@f1^0,f,c
  5981  001BE4  0EFF               	movlw	255
  5982  001BE6  160D               	andwf	(___ftdiv@f1+1)^0,f,c
  5983  001BE8  0E00               	movlw	0
  5984  001BEA  160E               	andwf	(___ftdiv@f1+2)^0,f,c
  5985  001BEC  8E10               	bsf	(___ftdiv@f2+1)^0,7,c
  5986  001BEE  0EFF               	movlw	255
  5987  001BF0  160F               	andwf	___ftdiv@f2^0,f,c
  5988  001BF2  0EFF               	movlw	255
  5989  001BF4  1610               	andwf	(___ftdiv@f2+1)^0,f,c
  5990  001BF6  0E00               	movlw	0
  5991  001BF8  1611               	andwf	(___ftdiv@f2+2)^0,f,c
  5992  001BFA  0E18               	movlw	24
  5993  001BFC  6E15               	movwf	___ftdiv@cntr^0,c
  5994  001BFE                     l3476:
  5995  001BFE  90D8               	bcf	status,0,c
  5996  001C00  3616               	rlcf	___ftdiv@f3^0,f,c
  5997  001C02  3617               	rlcf	(___ftdiv@f3+1)^0,f,c
  5998  001C04  3618               	rlcf	(___ftdiv@f3+2)^0,f,c
  5999  001C06  500F               	movf	___ftdiv@f2^0,w,c
  6000  001C08  5C0C               	subwf	___ftdiv@f1^0,w,c
  6001  001C0A  5010               	movf	(___ftdiv@f2+1)^0,w,c
  6002  001C0C  580D               	subwfb	(___ftdiv@f1+1)^0,w,c
  6003  001C0E  5011               	movf	(___ftdiv@f2+2)^0,w,c
  6004  001C10  580E               	subwfb	(___ftdiv@f1+2)^0,w,c
  6005  001C12  A0D8               	btfss	status,0,c
  6006  001C14  D007               	goto	l984
  6007  001C16  500F               	movf	___ftdiv@f2^0,w,c
  6008  001C18  5E0C               	subwf	___ftdiv@f1^0,f,c
  6009  001C1A  5010               	movf	(___ftdiv@f2+1)^0,w,c
  6010  001C1C  5A0D               	subwfb	(___ftdiv@f1+1)^0,f,c
  6011  001C1E  5011               	movf	(___ftdiv@f2+2)^0,w,c
  6012  001C20  5A0E               	subwfb	(___ftdiv@f1+2)^0,f,c
  6013  001C22  8016               	bsf	___ftdiv@f3^0,0,c
  6014  001C24                     l984:
  6015  001C24  90D8               	bcf	status,0,c
  6016  001C26  360C               	rlcf	___ftdiv@f1^0,f,c
  6017  001C28  360D               	rlcf	(___ftdiv@f1+1)^0,f,c
  6018  001C2A  360E               	rlcf	(___ftdiv@f1+2)^0,f,c
  6019  001C2C  2E15               	decfsz	___ftdiv@cntr^0,f,c
  6020  001C2E  D7E7               	goto	l3476
  6021  001C30  C016  F001         	movff	___ftdiv@f3,___ftpack@arg
  6022  001C34  C017  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  6023  001C38  C018  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  6024  001C3C  C019  F004         	movff	___ftdiv@exp,___ftpack@exp
  6025  001C40  C01A  F005         	movff	___ftdiv@sign,___ftpack@sign
  6026  001C44  EC9A  F00C         	call	___ftpack	;wreg free
  6027  001C48  C001  F00C         	movff	?___ftpack,?___ftdiv
  6028  001C4C  C002  F00D         	movff	?___ftpack+1,?___ftdiv+1
  6029  001C50  C003  F00E         	movff	?___ftpack+2,?___ftdiv+2
  6030  001C54  0012               	return		;funcret
  6031  001C56                     __end_of___ftdiv:
  6032                           	callstack 0
  6033                           
  6034 ;; *************** function ___ftpack *****************
  6035 ;; Defined at:
  6036 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\float.c"
  6037 ;; Parameters:    Size  Location     Type
  6038 ;;  arg             3    0[COMRAM] unsigned um
  6039 ;;  exp             1    3[COMRAM] unsigned char 
  6040 ;;  sign            1    4[COMRAM] unsigned char 
  6041 ;; Auto vars:     Size  Location     Type
  6042 ;;		None
  6043 ;; Return value:  Size  Location     Type
  6044 ;;                  3    0[COMRAM] float 
  6045 ;; Registers used:
  6046 ;;		wreg, status,2, status,0
  6047 ;; Tracked objects:
  6048 ;;		On entry : 0/0
  6049 ;;		On exit  : 0/0
  6050 ;;		Unchanged: 0/0
  6051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6052 ;;      Params:         5       0       0       0       0       0       0
  6053 ;;      Locals:         0       0       0       0       0       0       0
  6054 ;;      Temps:          3       0       0       0       0       0       0
  6055 ;;      Totals:         8       0       0       0       0       0       0
  6056 ;;Total ram usage:        8 bytes
  6057 ;; Hardware stack levels used: 1
  6058 ;; This function calls:
  6059 ;;		Nothing
  6060 ;; This function is called by:
  6061 ;;		___ftdiv
  6062 ;;		___ftmul
  6063 ;;		___lwtoft
  6064 ;; This function uses a non-reentrant model
  6065 ;;
  6066                           
  6067                           	psect	text31
  6068  001934                     __ptext31:
  6069                           	callstack 0
  6070  001934                     ___ftpack:
  6071                           	callstack 28
  6072                           
  6073                           ;incstack = 0
  6074  001934  5004               	movf	___ftpack@exp^0,w,c
  6075  001936  B4D8               	btfsc	status,2,c
  6076  001938  D005               	goto	u1630
  6077  00193A  5001               	movf	___ftpack@arg^0,w,c
  6078  00193C  1002               	iorwf	(___ftpack@arg+1)^0,w,c
  6079  00193E  1003               	iorwf	(___ftpack@arg+2)^0,w,c
  6080  001940  A4D8               	btfss	status,2,c
  6081  001942  D00C               	goto	l2968
  6082  001944                     u1630:
  6083  001944  0E00               	movlw	0
  6084  001946  6E01               	movwf	?___ftpack^0,c
  6085  001948  0E00               	movlw	0
  6086  00194A  6E02               	movwf	(?___ftpack+1)^0,c
  6087  00194C  0E00               	movlw	0
  6088  00194E  6E03               	movwf	(?___ftpack+2)^0,c
  6089  001950  0012               	return	
  6090  001952                     l2966:
  6091  001952  2A04               	incf	___ftpack@exp^0,f,c
  6092  001954  90D8               	bcf	status,0,c
  6093  001956  3203               	rrcf	(___ftpack@arg+2)^0,f,c
  6094  001958  3202               	rrcf	(___ftpack@arg+1)^0,f,c
  6095  00195A  3201               	rrcf	___ftpack@arg^0,f,c
  6096  00195C                     l2968:
  6097  00195C  0E00               	movlw	0
  6098  00195E  1401               	andwf	___ftpack@arg^0,w,c
  6099  001960  6E06               	movwf	??___ftpack^0,c
  6100  001962  0E00               	movlw	0
  6101  001964  1402               	andwf	(___ftpack@arg+1)^0,w,c
  6102  001966  6E07               	movwf	(??___ftpack+1)^0,c
  6103  001968  0EFE               	movlw	254
  6104  00196A  1403               	andwf	(___ftpack@arg+2)^0,w,c
  6105  00196C  6E08               	movwf	(??___ftpack+2)^0,c
  6106  00196E  5006               	movf	??___ftpack^0,w,c
  6107  001970  1007               	iorwf	(??___ftpack+1)^0,w,c
  6108  001972  1008               	iorwf	(??___ftpack+2)^0,w,c
  6109  001974  B4D8               	btfsc	status,2,c
  6110  001976  D00C               	goto	l2974
  6111  001978  D7EC               	goto	l2966
  6112  00197A                     l2970:
  6113  00197A  2A04               	incf	___ftpack@exp^0,f,c
  6114  00197C  0E01               	movlw	1
  6115  00197E  2601               	addwf	___ftpack@arg^0,f,c
  6116  001980  0E00               	movlw	0
  6117  001982  2202               	addwfc	(___ftpack@arg+1)^0,f,c
  6118  001984  0E00               	movlw	0
  6119  001986  2203               	addwfc	(___ftpack@arg+2)^0,f,c
  6120  001988  90D8               	bcf	status,0,c
  6121  00198A  3203               	rrcf	(___ftpack@arg+2)^0,f,c
  6122  00198C  3202               	rrcf	(___ftpack@arg+1)^0,f,c
  6123  00198E  3201               	rrcf	___ftpack@arg^0,f,c
  6124  001990                     l2974:
  6125  001990  0E00               	movlw	0
  6126  001992  1401               	andwf	___ftpack@arg^0,w,c
  6127  001994  6E06               	movwf	??___ftpack^0,c
  6128  001996  0E00               	movlw	0
  6129  001998  1402               	andwf	(___ftpack@arg+1)^0,w,c
  6130  00199A  6E07               	movwf	(??___ftpack+1)^0,c
  6131  00199C  0EFF               	movlw	255
  6132  00199E  1403               	andwf	(___ftpack@arg+2)^0,w,c
  6133  0019A0  6E08               	movwf	(??___ftpack+2)^0,c
  6134  0019A2  5006               	movf	??___ftpack^0,w,c
  6135  0019A4  1007               	iorwf	(??___ftpack+1)^0,w,c
  6136  0019A6  1008               	iorwf	(??___ftpack+2)^0,w,c
  6137  0019A8  B4D8               	btfsc	status,2,c
  6138  0019AA  D006               	goto	l2978
  6139  0019AC  D7E6               	goto	l2970
  6140  0019AE                     l2976:
  6141  0019AE  0604               	decf	___ftpack@exp^0,f,c
  6142  0019B0  90D8               	bcf	status,0,c
  6143  0019B2  3601               	rlcf	___ftpack@arg^0,f,c
  6144  0019B4  3602               	rlcf	(___ftpack@arg+1)^0,f,c
  6145  0019B6  3603               	rlcf	(___ftpack@arg+2)^0,f,c
  6146  0019B8                     l2978:
  6147  0019B8  BE02               	btfsc	(___ftpack@arg+1)^0,7,c
  6148  0019BA  D003               	goto	u1670
  6149  0019BC  0E02               	movlw	2
  6150  0019BE  6004               	cpfslt	___ftpack@exp^0,c
  6151  0019C0  D7F6               	goto	l2976
  6152  0019C2                     u1670:
  6153  0019C2  A004               	btfss	___ftpack@exp^0,0,c
  6154  0019C4  9E02               	bcf	(___ftpack@arg+1)^0,7,c
  6155  0019C6  90D8               	bcf	status,0,c
  6156  0019C8  3204               	rrcf	___ftpack@exp^0,f,c
  6157  0019CA  5004               	movf	___ftpack@exp^0,w,c
  6158  0019CC  1203               	iorwf	(___ftpack@arg+2)^0,f,c
  6159  0019CE  5005               	movf	___ftpack@sign^0,w,c
  6160  0019D0  A4D8               	btfss	status,2,c
  6161  0019D2  8E03               	bsf	(___ftpack@arg+2)^0,7,c
  6162  0019D4  C001  F001         	movff	___ftpack@arg,?___ftpack
  6163  0019D8  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  6164  0019DC  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  6165  0019E0  0012               	return		;funcret
  6166  0019E2                     __end_of___ftpack:
  6167                           	callstack 0
  6168                           
  6169 ;; *************** function _get_password *****************
  6170 ;; Defined at:
  6171 ;;		line 16 in file "password.c"
  6172 ;; Parameters:    Size  Location     Type
  6173 ;;		None
  6174 ;; Auto vars:     Size  Location     Type
  6175 ;;  wait            2   20[COMRAM] unsigned int 
  6176 ;;  c               4   25[COMRAM] unsigned long 
  6177 ;;  p               2   31[COMRAM] int 
  6178 ;;  j               2   33[COMRAM] int 
  6179 ;;  k               1   35[COMRAM] unsigned char 
  6180 ;;  count           2   22[COMRAM] int 
  6181 ;;  wait            2   18[COMRAM] unsigned int 
  6182 ;;  entered_pass    4   12[COMRAM] unsigned char [4]
  6183 ;;  i               2   36[COMRAM] int 
  6184 ;;  total_attemp    2   29[COMRAM] int 
  6185 ;;  delay           2   16[COMRAM] int 
  6186 ;;  key_pressed     1   24[COMRAM] unsigned char 
  6187 ;; Return value:  Size  Location     Type
  6188 ;;                  1    wreg      unsigned char 
  6189 ;; Registers used:
  6190 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6191 ;; Tracked objects:
  6192 ;;		On entry : 0/0
  6193 ;;		On exit  : 0/0
  6194 ;;		Unchanged: 0/0
  6195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6196 ;;      Params:         0       0       0       0       0       0       0
  6197 ;;      Locals:        26       0       0       0       0       0       0
  6198 ;;      Temps:          2       0       0       0       0       0       0
  6199 ;;      Totals:        28       0       0       0       0       0       0
  6200 ;;Total ram usage:       28 bytes
  6201 ;; Hardware stack levels used: 1
  6202 ;; Hardware stack levels required when called: 4
  6203 ;; This function calls:
  6204 ;;		___lbdiv
  6205 ;;		___lbmod
  6206 ;;		_clcd_print
  6207 ;;		_clcd_putch
  6208 ;;		_clcd_write
  6209 ;;		_read_external_eeprom
  6210 ;;		_read_switches
  6211 ;; This function is called by:
  6212 ;;		_main
  6213 ;; This function uses a non-reentrant model
  6214 ;;
  6215                           
  6216                           	psect	text32
  6217  0024A8                     __ptext32:
  6218                           	callstack 0
  6219  0024A8                     _get_password:
  6220                           	callstack 26
  6221                           
  6222                           ;password.c: 18: clcd_write(0x01, 0);
  6223                           
  6224                           ;incstack = 0
  6225  0024A8  0E00               	movlw	0
  6226  0024AA  6E01               	movwf	clcd_write@control_bit^0,c
  6227  0024AC  0E01               	movlw	1
  6228  0024AE  EC5F  F009         	call	_clcd_write
  6229                           
  6230                           ;password.c: 19: clcd_print("ENTER PASSWORD", (0x80 + (1)));
  6231  0024B2  0E58               	movlw	low STR_2
  6232  0024B4  6E03               	movwf	clcd_print@data^0,c
  6233  0024B6  0E2F               	movlw	high STR_2
  6234  0024B8  6E04               	movwf	(clcd_print@data+1)^0,c
  6235  0024BA  0E81               	movlw	129
  6236  0024BC  6E05               	movwf	clcd_print@addr^0,c
  6237  0024BE  EC66  F00B         	call	_clcd_print	;wreg free
  6238                           
  6239                           ;password.c: 20: char entered_password[4] = {0};
  6240  0024C2  0E00               	movlw	0
  6241  0024C4  6E0D               	movwf	get_password@entered_password^0,c
  6242  0024C6  0E00               	movlw	0
  6243  0024C8  6E0E               	movwf	(get_password@entered_password+1)^0,c
  6244  0024CA  0E00               	movlw	0
  6245  0024CC  6E0F               	movwf	(get_password@entered_password+2)^0,c
  6246  0024CE  0E00               	movlw	0
  6247  0024D0  6E10               	movwf	(get_password@entered_password+3)^0,c
  6248                           
  6249                           ;password.c: 21: int total_attempts = 3;
  6250  0024D2  0E00               	movlw	0
  6251  0024D4  6E1F               	movwf	(get_password@total_attempts+1)^0,c
  6252  0024D6  0E03               	movlw	3
  6253  0024D8  6E1E               	movwf	get_password@total_attempts^0,c
  6254                           
  6255                           ;password.c: 22: int i = 0;
  6256  0024DA  0E00               	movlw	0
  6257  0024DC  6E26               	movwf	(get_password@i+1)^0,c
  6258  0024DE  0E00               	movlw	0
  6259  0024E0  6E25               	movwf	get_password@i^0,c
  6260                           
  6261                           ;password.c: 23: int delay = 0;
  6262  0024E2  0E00               	movlw	0
  6263  0024E4  6E12               	movwf	(get_password@delay+1)^0,c
  6264  0024E6  0E00               	movlw	0
  6265  0024E8  6E11               	movwf	get_password@delay^0,c
  6266                           
  6267                           ;password.c: 24: static char flag=0;;password.c: 25: unsigned char key_pressed;;password
      +                          .c: 26: while (flag !=1)
  6268  0024EA  D144               	goto	l3790
  6269  0024EC                     l3680:
  6270                           
  6271                           ;password.c: 27: {;password.c: 28: key_pressed = read_switches(1);
  6272  0024EC  0E01               	movlw	1
  6273  0024EE  EC41  F00A         	call	_read_switches
  6274  0024F2  6E19               	movwf	get_password@key_pressed^0,c
  6275                           
  6276                           ;password.c: 30: for (unsigned int wait = 5000; wait--;)
  6277  0024F4  0E13               	movlw	19
  6278  0024F6  6E14               	movwf	(get_password@wait+1)^0,c
  6279  0024F8  0E88               	movlw	136
  6280  0024FA  6E13               	movwf	get_password@wait^0,c
  6281  0024FC                     l3684:
  6282  0024FC  0613               	decf	get_password@wait^0,f,c
  6283  0024FE  A0D8               	btfss	status,0,c
  6284  002500  0614               	decf	(get_password@wait+1)^0,f,c
  6285  002502  2813               	incf	get_password@wait^0,w,c
  6286  002504  E1FB               	bnz	l3684
  6287  002506  2814               	incf	(get_password@wait+1)^0,w,c
  6288  002508  A4D8               	btfss	status,2,c
  6289  00250A  D7F8               	goto	l3684
  6290                           
  6291                           ;password.c: 33: if (i < 4)
  6292  00250C  BE26               	btfsc	(get_password@i+1)^0,7,c
  6293  00250E  D006               	goto	u2400
  6294  002510  5026               	movf	(get_password@i+1)^0,w,c
  6295  002512  E149               	bnz	l3708
  6296  002514  0E04               	movlw	4
  6297  002516  5C25               	subwf	get_password@i^0,w,c
  6298  002518  B0D8               	btfsc	status,0,c
  6299  00251A  D045               	goto	l3708
  6300  00251C                     u2400:
  6301                           
  6302                           ;password.c: 34: {;password.c: 35: if (delay++ < 15000)
  6303  00251C  5011               	movf	get_password@delay^0,w,c
  6304  00251E  6E0B               	movwf	??_get_password^0,c
  6305  002520  5012               	movf	(get_password@delay+1)^0,w,c
  6306  002522  6E0C               	movwf	(??_get_password+1)^0,c
  6307  002524  4A11               	infsnz	get_password@delay^0,f,c
  6308  002526  2A12               	incf	(get_password@delay+1)^0,f,c
  6309  002528  BE0C               	btfsc	(??_get_password+1)^0,7,c
  6310  00252A  D006               	goto	u2410
  6311  00252C  0E98               	movlw	152
  6312  00252E  5C0B               	subwf	??_get_password^0,w,c
  6313  002530  0E3A               	movlw	58
  6314  002532  580C               	subwfb	(??_get_password+1)^0,w,c
  6315  002534  B0D8               	btfsc	status,0,c
  6316  002536  D007               	goto	l3692
  6317  002538                     u2410:
  6318                           
  6319                           ;password.c: 36: {;password.c: 37: clcd_putch('_', (0xC0 + (i)));
  6320  002538  5025               	movf	get_password@i^0,w,c
  6321  00253A  0FC0               	addlw	192
  6322  00253C  6E09               	movwf	clcd_putch@addr^0,c
  6323  00253E  0E5F               	movlw	95
  6324  002540  EC15  F009         	call	_clcd_putch
  6325                           
  6326                           ;password.c: 38: }
  6327  002544  D028               	goto	l3706
  6328  002546                     l3692:
  6329                           
  6330                           ;password.c: 39: else;password.c: 40: {;password.c: 41: clcd_putch(' ', (0xC0 + (i)));
  6331  002546  5025               	movf	get_password@i^0,w,c
  6332  002548  0FC0               	addlw	192
  6333  00254A  6E09               	movwf	clcd_putch@addr^0,c
  6334  00254C  0E20               	movlw	32
  6335  00254E  EC15  F009         	call	_clcd_putch
  6336  002552  D021               	goto	l3706
  6337  002554                     l3694:
  6338                           
  6339                           ;password.c: 47: {;password.c: 48: clcd_print("*", (0xC0 + (i)));
  6340  002554  0EFD               	movlw	low STR_3
  6341  002556  6E03               	movwf	clcd_print@data^0,c
  6342  002558  0E2F               	movlw	high STR_3
  6343  00255A  6E04               	movwf	(clcd_print@data+1)^0,c
  6344  00255C  5025               	movf	get_password@i^0,w,c
  6345  00255E  0FC0               	addlw	192
  6346  002560  6E05               	movwf	clcd_print@addr^0,c
  6347  002562  EC66  F00B         	call	_clcd_print	;wreg free
  6348                           
  6349                           ;password.c: 49: entered_password[i++] = 1;
  6350  002566  5025               	movf	get_password@i^0,w,c
  6351  002568  0F0D               	addlw	low get_password@entered_password
  6352  00256A  6ED9               	movwf	fsr2l,c
  6353  00256C  6ADA               	clrf	fsr2h,c
  6354  00256E  0E01               	movlw	1
  6355  002570  6EDF               	movwf	indf2,c
  6356  002572  4A25               	infsnz	get_password@i^0,f,c
  6357  002574  2A26               	incf	(get_password@i+1)^0,f,c
  6358                           
  6359                           ;password.c: 50: };password.c: 51: break;
  6360  002576  D085               	goto	l3756
  6361  002578                     l3700:
  6362                           
  6363                           ;password.c: 53: {;password.c: 54: clcd_print("*", (0xC0 + (i)));
  6364  002578  0EFD               	movlw	low STR_3
  6365  00257A  6E03               	movwf	clcd_print@data^0,c
  6366  00257C  0E2F               	movlw	high STR_3
  6367  00257E  6E04               	movwf	(clcd_print@data+1)^0,c
  6368  002580  5025               	movf	get_password@i^0,w,c
  6369  002582  0FC0               	addlw	192
  6370  002584  6E05               	movwf	clcd_print@addr^0,c
  6371  002586  EC66  F00B         	call	_clcd_print	;wreg free
  6372                           
  6373                           ;password.c: 55: entered_password[i++] = 0;
  6374  00258A  5025               	movf	get_password@i^0,w,c
  6375  00258C  0F0D               	addlw	low get_password@entered_password
  6376  00258E  6ED9               	movwf	fsr2l,c
  6377  002590  6ADA               	clrf	fsr2h,c
  6378  002592  0E00               	movlw	0
  6379  002594  D7ED               	goto	L7
  6380  002596                     l3706:
  6381  002596  5019               	movf	get_password@key_pressed^0,w,c
  6382                           
  6383                           ; Switch size 1, requested type "simple"
  6384                           ; Number of cases is 2, Range of values is 4 to 5
  6385                           ; switch strategies available:
  6386                           ; Name         Instructions Cycles
  6387                           ; simple_byte            7     4 (average)
  6388                           ;	Chosen strategy is simple_byte
  6389  002598  0A04               	xorlw	4	; case 4
  6390  00259A  B4D8               	btfsc	status,2,c
  6391  00259C  D7ED               	goto	l3700
  6392  00259E  0A01               	xorlw	1	; case 5
  6393  0025A0  B4D8               	btfsc	status,2,c
  6394  0025A2  D7D8               	goto	l3694
  6395  0025A4  D06E               	goto	l3756
  6396  0025A6                     l3708:
  6397                           
  6398                           ;password.c: 59: else;password.c: 60: {;password.c: 61: int count = 0;
  6399  0025A6  0E00               	movlw	0
  6400  0025A8  6E18               	movwf	(get_password@count+1)^0,c
  6401  0025AA  0E00               	movlw	0
  6402  0025AC  6E17               	movwf	get_password@count^0,c
  6403                           
  6404                           ;password.c: 64: for (int j = 0; j < 4; j++)
  6405  0025AE  0E00               	movlw	0
  6406  0025B0  6E23               	movwf	(get_password@j+1)^0,c
  6407  0025B2  0E00               	movlw	0
  6408  0025B4  6E22               	movwf	get_password@j^0,c
  6409  0025B6                     l3714:
  6410                           
  6411                           ;password.c: 65: {;password.c: 67: if (read_external_eeprom(100 + j) == entered_password
      +                          [j])
  6412  0025B6  5022               	movf	get_password@j^0,w,c
  6413  0025B8  0F0D               	addlw	low get_password@entered_password
  6414  0025BA  6ED9               	movwf	fsr2l,c
  6415  0025BC  6ADA               	clrf	fsr2h,c
  6416  0025BE  5022               	movf	get_password@j^0,w,c
  6417  0025C0  0F64               	addlw	100
  6418  0025C2  EC88  F009         	call	_read_external_eeprom
  6419  0025C6  6E0C               	movwf	(??_get_password+1)^0,c
  6420  0025C8  50DE               	movf	postinc2,w,c
  6421  0025CA  180C               	xorwf	(??_get_password+1)^0,w,c
  6422  0025CC  A4D8               	btfss	status,2,c
  6423  0025CE  D002               	goto	l230
  6424                           
  6425                           ;password.c: 68: count++;
  6426  0025D0  4A17               	infsnz	get_password@count^0,f,c
  6427  0025D2  2A18               	incf	(get_password@count+1)^0,f,c
  6428  0025D4                     l230:
  6429  0025D4  4A22               	infsnz	get_password@j^0,f,c
  6430  0025D6  2A23               	incf	(get_password@j+1)^0,f,c
  6431  0025D8  BE23               	btfsc	(get_password@j+1)^0,7,c
  6432  0025DA  D7ED               	goto	l3714
  6433  0025DC  5023               	movf	(get_password@j+1)^0,w,c
  6434  0025DE  E104               	bnz	u2430
  6435  0025E0  0E04               	movlw	4
  6436  0025E2  5C22               	subwf	get_password@j^0,w,c
  6437  0025E4  A0D8               	btfss	status,0,c
  6438  0025E6  D7E7               	goto	l3714
  6439  0025E8                     u2430:
  6440                           
  6441                           ;password.c: 69: };password.c: 71: if (count == 4)
  6442  0025E8  0E04               	movlw	4
  6443  0025EA  1817               	xorwf	get_password@count^0,w,c
  6444  0025EC  1018               	iorwf	(get_password@count+1)^0,w,c
  6445  0025EE  A4D8               	btfss	status,2,c
  6446  0025F0  D007               	goto	l3730
  6447                           
  6448                           ;password.c: 72: {;password.c: 73: clcd_write(0x01, 0);
  6449  0025F2  0E00               	movlw	0
  6450  0025F4  6E01               	movwf	clcd_write@control_bit^0,c
  6451  0025F6  0E01               	movlw	1
  6452  0025F8  EC5F  F009         	call	_clcd_write
  6453                           
  6454                           ;password.c: 74: return 0;
  6455  0025FC  0E00               	movlw	0
  6456  0025FE  0012               	return	
  6457  002600                     l3730:
  6458                           
  6459                           ;password.c: 76: else;password.c: 77: {;password.c: 78: i = 0;
  6460  002600  0E00               	movlw	0
  6461  002602  6E26               	movwf	(get_password@i+1)^0,c
  6462  002604  0E00               	movlw	0
  6463  002606  6E25               	movwf	get_password@i^0,c
  6464                           
  6465                           ;password.c: 79: clcd_write(0x01, 0);
  6466  002608  0E00               	movlw	0
  6467  00260A  6E01               	movwf	clcd_write@control_bit^0,c
  6468  00260C  0E01               	movlw	1
  6469  00260E  EC5F  F009         	call	_clcd_write
  6470                           
  6471                           ;password.c: 80: clcd_print("FAILED!", (0xC0 + (4)));
  6472  002612  0EE2               	movlw	low STR_5
  6473  002614  6E03               	movwf	clcd_print@data^0,c
  6474  002616  0E2F               	movlw	high STR_5
  6475  002618  6E04               	movwf	(clcd_print@data+1)^0,c
  6476  00261A  0EC4               	movlw	196
  6477  00261C  6E05               	movwf	clcd_print@addr^0,c
  6478  00261E  EC66  F00B         	call	_clcd_print	;wreg free
  6479                           
  6480                           ;password.c: 81: for (int p = 0; p < 10; p++)
  6481  002622  0E00               	movlw	0
  6482  002624  6E21               	movwf	(get_password@p+1)^0,c
  6483  002626  0E00               	movlw	0
  6484  002628  6E20               	movwf	get_password@p^0,c
  6485  00262A                     l3742:
  6486                           
  6487                           ;password.c: 82: for (unsigned int wait = 50000; wait--;);
  6488  00262A  0EC3               	movlw	195
  6489  00262C  6E16               	movwf	(get_password@wait_187+1)^0,c
  6490  00262E  0E50               	movlw	80
  6491  002630  6E15               	movwf	get_password@wait_187^0,c
  6492  002632                     l3744:
  6493  002632  0615               	decf	get_password@wait_187^0,f,c
  6494  002634  A0D8               	btfss	status,0,c
  6495  002636  0616               	decf	(get_password@wait_187+1)^0,f,c
  6496  002638  2815               	incf	get_password@wait_187^0,w,c
  6497  00263A  E1FB               	bnz	l3744
  6498  00263C  2816               	incf	(get_password@wait_187+1)^0,w,c
  6499  00263E  A4D8               	btfss	status,2,c
  6500  002640  D7F8               	goto	l3744
  6501  002642  4A20               	infsnz	get_password@p^0,f,c
  6502  002644  2A21               	incf	(get_password@p+1)^0,f,c
  6503  002646  BE21               	btfsc	(get_password@p+1)^0,7,c
  6504  002648  D7F0               	goto	l3742
  6505  00264A  5021               	movf	(get_password@p+1)^0,w,c
  6506  00264C  E104               	bnz	u2460
  6507  00264E  0E0A               	movlw	10
  6508  002650  5C20               	subwf	get_password@p^0,w,c
  6509  002652  A0D8               	btfss	status,0,c
  6510  002654  D7EA               	goto	l3742
  6511  002656                     u2460:
  6512                           
  6513                           ;password.c: 83: clcd_write(0x01, 0);
  6514  002656  0E00               	movlw	0
  6515  002658  6E01               	movwf	clcd_write@control_bit^0,c
  6516  00265A  0E01               	movlw	1
  6517  00265C  EC5F  F009         	call	_clcd_write
  6518                           
  6519                           ;password.c: 84: clcd_print("ATTEMPTS LEFT:", (0x80 + (0)));
  6520  002660  0E49               	movlw	low STR_6
  6521  002662  6E03               	movwf	clcd_print@data^0,c
  6522  002664  0E2F               	movlw	high STR_6
  6523  002666  6E04               	movwf	(clcd_print@data+1)^0,c
  6524  002668  0E80               	movlw	128
  6525  00266A  6E05               	movwf	clcd_print@addr^0,c
  6526  00266C  EC66  F00B         	call	_clcd_print	;wreg free
  6527                           
  6528                           ;password.c: 85: clcd_putch('0' + --total_attempts, (0x80 + (15)));
  6529  002670  0E8F               	movlw	143
  6530  002672  6E09               	movwf	clcd_putch@addr^0,c
  6531  002674  061E               	decf	get_password@total_attempts^0,f,c
  6532  002676  A0D8               	btfss	status,0,c
  6533  002678  061F               	decf	(get_password@total_attempts+1)^0,f,c
  6534  00267A  501E               	movf	get_password@total_attempts^0,w,c
  6535  00267C  0F30               	addlw	48
  6536  00267E  EC15  F009         	call	_clcd_putch
  6537  002682                     l3756:
  6538                           
  6539                           ;password.c: 86: };password.c: 87: };password.c: 89: if(total_attempts==0)
  6540  002682  501E               	movf	get_password@total_attempts^0,w,c
  6541  002684  101F               	iorwf	(get_password@total_attempts+1)^0,w,c
  6542  002686  A4D8               	btfss	status,2,c
  6543  002688  D075               	goto	l3790
  6544                           
  6545                           ;password.c: 90: {;password.c: 91: flag=1;
  6546  00268A  0E01               	movlw	1
  6547  00268C  6E50               	movwf	get_password@flag^0,c
  6548                           
  6549                           ;password.c: 92: clcd_print("YOU ARE BLOCKED ",(0x80 + (0)));
  6550  00268E  0E0A               	movlw	low STR_7
  6551  002690  6E03               	movwf	clcd_print@data^0,c
  6552  002692  0E2F               	movlw	high STR_7
  6553  002694  6E04               	movwf	(clcd_print@data+1)^0,c
  6554  002696  0E80               	movlw	128
  6555  002698  6E05               	movwf	clcd_print@addr^0,c
  6556  00269A  EC66  F00B         	call	_clcd_print	;wreg free
  6557                           
  6558                           ;password.c: 93: unsigned char k=120;
  6559  00269E  0E78               	movlw	120
  6560  0026A0  6E24               	movwf	get_password@k^0,c
  6561                           
  6562                           ;password.c: 94: while(k!=0)
  6563  0026A2  D047               	goto	l3778
  6564  0026A4                     l3764:
  6565                           
  6566                           ;password.c: 95: {;password.c: 96: clcd_putch((k%10) + '0',(0xC0 + (10)));
  6567  0026A4  0ECA               	movlw	202
  6568  0026A6  6E09               	movwf	clcd_putch@addr^0,c
  6569  0026A8  0E0A               	movlw	10
  6570  0026AA  6E05               	movwf	___lbmod@divisor^0,c
  6571  0026AC  5024               	movf	get_password@k^0,w,c
  6572  0026AE  EC73  F009         	call	___lbmod
  6573  0026B2  0F30               	addlw	48
  6574  0026B4  EC15  F009         	call	_clcd_putch
  6575                           
  6576                           ;password.c: 97: clcd_putch(((k/10)%10) + '0',(0xC0 + (9)));
  6577  0026B8  0EC9               	movlw	201
  6578  0026BA  6E09               	movwf	clcd_putch@addr^0,c
  6579  0026BC  0E0A               	movlw	10
  6580  0026BE  6E05               	movwf	___lbmod@divisor^0,c
  6581  0026C0  0E0A               	movlw	10
  6582  0026C2  6E01               	movwf	___lbdiv@divisor^0,c
  6583  0026C4  5024               	movf	get_password@k^0,w,c
  6584  0026C6  ECE8  F009         	call	___lbdiv
  6585  0026CA  EC73  F009         	call	___lbmod
  6586  0026CE  0F30               	addlw	48
  6587  0026D0  EC15  F009         	call	_clcd_putch
  6588                           
  6589                           ;password.c: 98: clcd_putch(((k/100)%10) + '0',(0xC0 + (8)));
  6590  0026D4  0EC8               	movlw	200
  6591  0026D6  6E09               	movwf	clcd_putch@addr^0,c
  6592  0026D8  0E0A               	movlw	10
  6593  0026DA  6E05               	movwf	___lbmod@divisor^0,c
  6594  0026DC  0E64               	movlw	100
  6595  0026DE  6E01               	movwf	___lbdiv@divisor^0,c
  6596  0026E0  5024               	movf	get_password@k^0,w,c
  6597  0026E2  ECE8  F009         	call	___lbdiv
  6598  0026E6  EC73  F009         	call	___lbmod
  6599  0026EA  0F30               	addlw	48
  6600  0026EC  EC15  F009         	call	_clcd_putch
  6601                           
  6602                           ;password.c: 99: clcd_print("WAIT..",(0xC0 + (0)));
  6603  0026F0  0EEA               	movlw	low STR_8
  6604  0026F2  6E03               	movwf	clcd_print@data^0,c
  6605  0026F4  0E2F               	movlw	high STR_8
  6606  0026F6  6E04               	movwf	(clcd_print@data+1)^0,c
  6607  0026F8  0EC0               	movlw	192
  6608  0026FA  6E05               	movwf	clcd_print@addr^0,c
  6609  0026FC  EC66  F00B         	call	_clcd_print	;wreg free
  6610                           
  6611                           ;password.c: 100: for(unsigned long int c =0;c<200000;c++);
  6612  002700  0E00               	movlw	0
  6613  002702  6E1A               	movwf	get_password@c^0,c
  6614  002704  0E00               	movlw	0
  6615  002706  6E1B               	movwf	(get_password@c+1)^0,c
  6616  002708  0E00               	movlw	0
  6617  00270A  6E1C               	movwf	(get_password@c+2)^0,c
  6618  00270C  0E00               	movlw	0
  6619  00270E  6E1D               	movwf	(get_password@c+3)^0,c
  6620  002710                     l3774:
  6621  002710  0E01               	movlw	1
  6622  002712  261A               	addwf	get_password@c^0,f,c
  6623  002714  0E00               	movlw	0
  6624  002716  221B               	addwfc	(get_password@c+1)^0,f,c
  6625  002718  221C               	addwfc	(get_password@c+2)^0,f,c
  6626  00271A  221D               	addwfc	(get_password@c+3)^0,f,c
  6627  00271C  501D               	movf	(get_password@c+3)^0,w,c
  6628  00271E  E108               	bnz	u2480
  6629  002720  0E40               	movlw	64
  6630  002722  5C1A               	subwf	get_password@c^0,w,c
  6631  002724  0E0D               	movlw	13
  6632  002726  581B               	subwfb	(get_password@c+1)^0,w,c
  6633  002728  0E03               	movlw	3
  6634  00272A  581C               	subwfb	(get_password@c+2)^0,w,c
  6635  00272C  A0D8               	btfss	status,0,c
  6636  00272E  D7F0               	goto	l3774
  6637  002730                     u2480:
  6638                           
  6639                           ;password.c: 101: k--;
  6640  002730  0624               	decf	get_password@k^0,f,c
  6641  002732                     l3778:
  6642  002732  5024               	movf	get_password@k^0,w,c
  6643  002734  A4D8               	btfss	status,2,c
  6644  002736  D7B6               	goto	l3764
  6645                           
  6646                           ;password.c: 102: };password.c: 103: if(flag==1)
  6647  002738  0450               	decf	get_password@flag^0,w,c
  6648  00273A  A4D8               	btfss	status,2,c
  6649  00273C  D01B               	goto	l3790
  6650                           
  6651                           ;password.c: 104: {;password.c: 105: flag=0;
  6652  00273E  0E00               	movlw	0
  6653  002740  6E50               	movwf	get_password@flag^0,c
  6654                           
  6655                           ;password.c: 106: total_attempts=3;
  6656  002742  0E00               	movlw	0
  6657  002744  6E1F               	movwf	(get_password@total_attempts+1)^0,c
  6658  002746  0E03               	movlw	3
  6659  002748  6E1E               	movwf	get_password@total_attempts^0,c
  6660                           
  6661                           ;password.c: 107: clcd_write(0x01, 0);
  6662  00274A  0E00               	movlw	0
  6663  00274C  6E01               	movwf	clcd_write@control_bit^0,c
  6664  00274E  0E01               	movlw	1
  6665  002750  EC5F  F009         	call	_clcd_write
  6666                           
  6667                           ;password.c: 108: clcd_print("ENTER PASSWORD", (0x80 + (1)));
  6668  002754  0E58               	movlw	low STR_2
  6669  002756  6E03               	movwf	clcd_print@data^0,c
  6670  002758  0E2F               	movlw	high STR_2
  6671  00275A  6E04               	movwf	(clcd_print@data+1)^0,c
  6672  00275C  0E81               	movlw	129
  6673  00275E  6E05               	movwf	clcd_print@addr^0,c
  6674  002760  EC66  F00B         	call	_clcd_print	;wreg free
  6675                           
  6676                           ;password.c: 109: clcd_print("                ",(0xC0 + (0)));
  6677  002764  0EF9               	movlw	low STR_10
  6678  002766  6E03               	movwf	clcd_print@data^0,c
  6679  002768  0E2E               	movlw	high STR_10
  6680  00276A  6E04               	movwf	(clcd_print@data+1)^0,c
  6681  00276C  0EC0               	movlw	192
  6682  00276E  6E05               	movwf	clcd_print@addr^0,c
  6683  002770  EC66  F00B         	call	_clcd_print	;wreg free
  6684  002774                     l3790:
  6685  002774  0450               	decf	get_password@flag^0,w,c
  6686  002776  B4D8               	btfsc	status,2,c
  6687  002778  0012               	return	
  6688  00277A  D6B8               	goto	l3680
  6689  00277C                     __end_of_get_password:
  6690                           	callstack 0
  6691                           
  6692 ;; *************** function _read_switches *****************
  6693 ;; Defined at:
  6694 ;;		line 96 in file "matrix_keypad.c"
  6695 ;; Parameters:    Size  Location     Type
  6696 ;;  detection_ty    1    wreg     unsigned char 
  6697 ;; Auto vars:     Size  Location     Type
  6698 ;;  detection_ty    1    0[COMRAM] unsigned char 
  6699 ;; Return value:  Size  Location     Type
  6700 ;;                  1    wreg      unsigned char 
  6701 ;; Registers used:
  6702 ;;		wreg, status,2, status,0, cstack
  6703 ;; Tracked objects:
  6704 ;;		On entry : 0/0
  6705 ;;		On exit  : 0/0
  6706 ;;		Unchanged: 0/0
  6707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6708 ;;      Params:         0       0       0       0       0       0       0
  6709 ;;      Locals:         1       0       0       0       0       0       0
  6710 ;;      Temps:          0       0       0       0       0       0       0
  6711 ;;      Totals:         1       0       0       0       0       0       0
  6712 ;;Total ram usage:        1 bytes
  6713 ;; Hardware stack levels used: 1
  6714 ;; Hardware stack levels required when called: 1
  6715 ;; This function calls:
  6716 ;;		_scan_key
  6717 ;; This function is called by:
  6718 ;;		_view_log
  6719 ;;		_get_password
  6720 ;;		_change_password
  6721 ;;		_go_to_menu
  6722 ;;		_main
  6723 ;;		_set_time
  6724 ;; This function uses a non-reentrant model
  6725 ;;
  6726                           
  6727                           	psect	text33
  6728  001482                     __ptext33:
  6729                           	callstack 0
  6730  001482                     _read_switches:
  6731                           	callstack 29
  6732                           
  6733                           ;incstack = 0
  6734                           ;read_switches@detection_type stored from wreg
  6735  001482  6E01               	movwf	read_switches@detection_type^0,c
  6736                           
  6737                           ;matrix_keypad.c: 98: static unsigned char once = 1, key;;matrix_keypad.c: 100: if (dete
      +                          ction_type == 1)
  6738  001484  0401               	decf	read_switches@detection_type^0,w,c
  6739  001486  A4D8               	btfss	status,2,c
  6740  001488  D013               	goto	l2948
  6741                           
  6742                           ;matrix_keypad.c: 101: {;matrix_keypad.c: 102: key = scan_key();
  6743  00148A  ECCE  F00B         	call	_scan_key	;wreg free
  6744  00148E  6E4F               	movwf	read_switches@key^0,c
  6745                           
  6746                           ;matrix_keypad.c: 103: if(key != 0xFF && once )
  6747  001490  284F               	incf	read_switches@key^0,w,c
  6748  001492  B4D8               	btfsc	status,2,c
  6749  001494  D007               	goto	l2944
  6750  001496  505D               	movf	read_switches@once^0,w,c
  6751  001498  B4D8               	btfsc	status,2,c
  6752  00149A  D004               	goto	l2944
  6753                           
  6754                           ;matrix_keypad.c: 104: {;matrix_keypad.c: 105: once = 0;
  6755  00149C  0E00               	movlw	0
  6756  00149E  6E5D               	movwf	read_switches@once^0,c
  6757                           
  6758                           ;matrix_keypad.c: 106: return key;
  6759  0014A0  504F               	movf	read_switches@key^0,w,c
  6760  0014A2  0012               	return	
  6761  0014A4                     l2944:
  6762                           
  6763                           ;matrix_keypad.c: 108: else if(key == 0xFF)
  6764  0014A4  284F               	incf	read_switches@key^0,w,c
  6765  0014A6  A4D8               	btfss	status,2,c
  6766  0014A8  D009               	goto	l2954
  6767                           
  6768                           ;matrix_keypad.c: 109: {;matrix_keypad.c: 110: once = 1;
  6769  0014AA  0E01               	movlw	1
  6770  0014AC  6E5D               	movwf	read_switches@once^0,c
  6771  0014AE  D006               	goto	l2954
  6772  0014B0                     l2948:
  6773                           
  6774                           ;matrix_keypad.c: 113: else if (detection_type == 0)
  6775  0014B0  5001               	movf	read_switches@detection_type^0,w,c
  6776  0014B2  A4D8               	btfss	status,2,c
  6777  0014B4  D003               	goto	l2954
  6778                           
  6779                           ;matrix_keypad.c: 114: {;matrix_keypad.c: 115: return scan_key();
  6780  0014B6  ECCE  F00B         	call	_scan_key	;wreg free
  6781  0014BA  0012               	return	
  6782  0014BC                     l2954:
  6783                           
  6784                           ;matrix_keypad.c: 116: };matrix_keypad.c: 118: return 0xFF;
  6785  0014BC  0EFF               	movlw	255
  6786  0014BE  0012               	return		;funcret
  6787  0014C0                     __end_of_read_switches:
  6788                           	callstack 0
  6789                           
  6790 ;; *************** function _scan_key *****************
  6791 ;; Defined at:
  6792 ;;		line 26 in file "matrix_keypad.c"
  6793 ;; Parameters:    Size  Location     Type
  6794 ;;		None
  6795 ;; Auto vars:     Size  Location     Type
  6796 ;;		None
  6797 ;; Return value:  Size  Location     Type
  6798 ;;                  1    wreg      unsigned char 
  6799 ;; Registers used:
  6800 ;;		wreg
  6801 ;; Tracked objects:
  6802 ;;		On entry : 0/0
  6803 ;;		On exit  : 0/0
  6804 ;;		Unchanged: 0/0
  6805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6806 ;;      Params:         0       0       0       0       0       0       0
  6807 ;;      Locals:         0       0       0       0       0       0       0
  6808 ;;      Temps:          0       0       0       0       0       0       0
  6809 ;;      Totals:         0       0       0       0       0       0       0
  6810 ;;Total ram usage:        0 bytes
  6811 ;; Hardware stack levels used: 1
  6812 ;; This function calls:
  6813 ;;		Nothing
  6814 ;; This function is called by:
  6815 ;;		_read_switches
  6816 ;; This function uses a non-reentrant model
  6817 ;;
  6818                           
  6819                           	psect	text34
  6820  00179C                     __ptext34:
  6821                           	callstack 0
  6822  00179C                     _scan_key:
  6823                           	callstack 29
  6824                           
  6825                           ;matrix_keypad.c: 28: PORTBbits.RB5 = 0;
  6826                           
  6827                           ;incstack = 0
  6828  00179C  9A81               	bcf	129,5,c	;volatile
  6829                           
  6830                           ;matrix_keypad.c: 29: PORTBbits.RB6 = 1;
  6831  00179E  8C81               	bsf	129,6,c	;volatile
  6832                           
  6833                           ;matrix_keypad.c: 30: PORTBbits.RB7 = 1;
  6834  0017A0  8E81               	bsf	129,7,c	;volatile
  6835                           
  6836                           ;matrix_keypad.c: 32: if (PORTBbits.RB1 == 0)
  6837  0017A2  B281               	btfsc	129,1,c	;volatile
  6838  0017A4  D002               	goto	l379
  6839                           
  6840                           ;matrix_keypad.c: 33: {;matrix_keypad.c: 34: return 1;
  6841  0017A6  0E01               	movlw	1
  6842  0017A8  0012               	return	
  6843  0017AA                     l379:
  6844                           
  6845                           ;matrix_keypad.c: 36: else if (PORTBbits.RB2 == 0)
  6846  0017AA  B481               	btfsc	129,2,c	;volatile
  6847  0017AC  D002               	goto	l382
  6848                           
  6849                           ;matrix_keypad.c: 37: {;matrix_keypad.c: 38: return 4;
  6850  0017AE  0E04               	movlw	4
  6851  0017B0  0012               	return	
  6852  0017B2                     l382:
  6853                           
  6854                           ;matrix_keypad.c: 40: else if (PORTBbits.RB3 == 0)
  6855  0017B2  B681               	btfsc	129,3,c	;volatile
  6856  0017B4  D002               	goto	l384
  6857                           
  6858                           ;matrix_keypad.c: 41: {;matrix_keypad.c: 42: return 7;
  6859  0017B6  0E07               	movlw	7
  6860  0017B8  0012               	return	
  6861  0017BA                     l384:
  6862                           
  6863                           ;matrix_keypad.c: 44: else if (PORTBbits.RB4 == 0)
  6864  0017BA  B881               	btfsc	129,4,c	;volatile
  6865  0017BC  D002               	goto	l381
  6866                           
  6867                           ;matrix_keypad.c: 45: {;matrix_keypad.c: 46: return 10;
  6868  0017BE  0E0A               	movlw	10
  6869  0017C0  0012               	return	
  6870  0017C2                     l381:
  6871                           
  6872                           ;matrix_keypad.c: 47: };matrix_keypad.c: 49: PORTBbits.RB5 = 1;
  6873  0017C2  8A81               	bsf	129,5,c	;volatile
  6874                           
  6875                           ;matrix_keypad.c: 50: PORTBbits.RB6 = 0;
  6876  0017C4  9C81               	bcf	129,6,c	;volatile
  6877                           
  6878                           ;matrix_keypad.c: 51: PORTBbits.RB7 = 1;
  6879  0017C6  8E81               	bsf	129,7,c	;volatile
  6880                           
  6881                           ;matrix_keypad.c: 53: if (PORTBbits.RB1 == 0)
  6882  0017C8  B281               	btfsc	129,1,c	;volatile
  6883  0017CA  D002               	goto	l387
  6884                           
  6885                           ;matrix_keypad.c: 54: {;matrix_keypad.c: 55: return 2;
  6886  0017CC  0E02               	movlw	2
  6887  0017CE  0012               	return	
  6888  0017D0                     l387:
  6889                           
  6890                           ;matrix_keypad.c: 57: else if (PORTBbits.RB2 == 0)
  6891  0017D0  B481               	btfsc	129,2,c	;volatile
  6892  0017D2  D002               	goto	l389
  6893                           
  6894                           ;matrix_keypad.c: 58: {;matrix_keypad.c: 59: return 5;
  6895  0017D4  0E05               	movlw	5
  6896  0017D6  0012               	return	
  6897  0017D8                     l389:
  6898                           
  6899                           ;matrix_keypad.c: 61: else if (PORTBbits.RB3 == 0)
  6900  0017D8  B681               	btfsc	129,3,c	;volatile
  6901  0017DA  D002               	goto	l391
  6902                           
  6903                           ;matrix_keypad.c: 62: {;matrix_keypad.c: 63: return 8;
  6904  0017DC  0E08               	movlw	8
  6905  0017DE  0012               	return	
  6906  0017E0                     l391:
  6907                           
  6908                           ;matrix_keypad.c: 65: else if (PORTBbits.RB4 == 0)
  6909  0017E0  B881               	btfsc	129,4,c	;volatile
  6910  0017E2  D002               	goto	l388
  6911                           
  6912                           ;matrix_keypad.c: 66: {;matrix_keypad.c: 67: return 11;
  6913  0017E4  0E0B               	movlw	11
  6914  0017E6  0012               	return	
  6915  0017E8                     l388:
  6916                           
  6917                           ;matrix_keypad.c: 68: };matrix_keypad.c: 70: PORTBbits.RB5 = 1;
  6918  0017E8  8A81               	bsf	129,5,c	;volatile
  6919                           
  6920                           ;matrix_keypad.c: 71: PORTBbits.RB6 = 1;
  6921  0017EA  8C81               	bsf	129,6,c	;volatile
  6922                           
  6923                           ;matrix_keypad.c: 72: PORTBbits.RB7 = 0;
  6924  0017EC  9E81               	bcf	129,7,c	;volatile
  6925                           
  6926                           ;matrix_keypad.c: 74: PORTBbits.RB7 = 0;
  6927  0017EE  9E81               	bcf	129,7,c	;volatile
  6928                           
  6929                           ;matrix_keypad.c: 76: if (PORTBbits.RB1 == 0)
  6930  0017F0  B281               	btfsc	129,1,c	;volatile
  6931  0017F2  D002               	goto	l394
  6932                           
  6933                           ;matrix_keypad.c: 77: {;matrix_keypad.c: 78: return 3;
  6934  0017F4  0E03               	movlw	3
  6935  0017F6  0012               	return	
  6936  0017F8                     l394:
  6937                           
  6938                           ;matrix_keypad.c: 80: else if (PORTBbits.RB2 == 0)
  6939  0017F8  B481               	btfsc	129,2,c	;volatile
  6940  0017FA  D002               	goto	l396
  6941                           
  6942                           ;matrix_keypad.c: 81: {;matrix_keypad.c: 82: return 6;
  6943  0017FC  0E06               	movlw	6
  6944  0017FE  0012               	return	
  6945  001800                     l396:
  6946                           
  6947                           ;matrix_keypad.c: 84: else if (PORTBbits.RB3 == 0)
  6948  001800  B681               	btfsc	129,3,c	;volatile
  6949  001802  D002               	goto	l398
  6950                           
  6951                           ;matrix_keypad.c: 85: {;matrix_keypad.c: 86: return 9;
  6952  001804  0E09               	movlw	9
  6953  001806  0012               	return	
  6954  001808                     l398:
  6955                           
  6956                           ;matrix_keypad.c: 88: else if (PORTBbits.RB4 == 0)
  6957  001808  B881               	btfsc	129,4,c	;volatile
  6958  00180A  D002               	goto	l397
  6959                           
  6960                           ;matrix_keypad.c: 89: {;matrix_keypad.c: 90: return 12;
  6961  00180C  0E0C               	movlw	12
  6962  00180E  0012               	return	
  6963  001810                     l397:
  6964                           
  6965                           ;matrix_keypad.c: 91: };matrix_keypad.c: 93: return 0xFF;
  6966  001810  0EFF               	movlw	255
  6967  001812  0012               	return		;funcret
  6968  001814                     __end_of_scan_key:
  6969                           	callstack 0
  6970                           
  6971 ;; *************** function _read_external_eeprom *****************
  6972 ;; Defined at:
  6973 ;;		line 23 in file "eeprom.c"
  6974 ;; Parameters:    Size  Location     Type
  6975 ;;  address         1    wreg     unsigned char 
  6976 ;; Auto vars:     Size  Location     Type
  6977 ;;  address         1    1[COMRAM] unsigned char 
  6978 ;;  data            1    2[COMRAM] unsigned char 
  6979 ;; Return value:  Size  Location     Type
  6980 ;;                  1    wreg      unsigned char 
  6981 ;; Registers used:
  6982 ;;		wreg, status,2, cstack
  6983 ;; Tracked objects:
  6984 ;;		On entry : 0/0
  6985 ;;		On exit  : 0/0
  6986 ;;		Unchanged: 0/0
  6987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6988 ;;      Params:         0       0       0       0       0       0       0
  6989 ;;      Locals:         2       0       0       0       0       0       0
  6990 ;;      Temps:          0       0       0       0       0       0       0
  6991 ;;      Totals:         2       0       0       0       0       0       0
  6992 ;;Total ram usage:        2 bytes
  6993 ;; Hardware stack levels used: 1
  6994 ;; Hardware stack levels required when called: 3
  6995 ;; This function calls:
  6996 ;;		_i2c_read
  6997 ;;		_i2c_rep_start
  6998 ;;		_i2c_start
  6999 ;;		_i2c_stop
  7000 ;;		_i2c_write
  7001 ;; This function is called by:
  7002 ;;		_print_to_console
  7003 ;;		_print_log_to_clcd
  7004 ;;		_get_password
  7005 ;; This function uses a non-reentrant model
  7006 ;;
  7007                           
  7008                           	psect	text35
  7009  001310                     __ptext35:
  7010                           	callstack 0
  7011  001310                     _read_external_eeprom:
  7012                           	callstack 24
  7013                           
  7014                           ;incstack = 0
  7015                           ;read_external_eeprom@address stored from wreg
  7016  001310  6E02               	movwf	read_external_eeprom@address^0,c
  7017                           
  7018                           ;eeprom.c: 25: unsigned char data;;eeprom.c: 27: i2c_start();
  7019  001312  ECE7  F008         	call	_i2c_start	;wreg free
  7020                           
  7021                           ;eeprom.c: 28: i2c_write(0xA0);
  7022  001316  0EA0               	movlw	160
  7023  001318  ECF5  F008         	call	_i2c_write
  7024                           
  7025                           ;eeprom.c: 29: i2c_write(address);
  7026  00131C  5002               	movf	read_external_eeprom@address^0,w,c
  7027  00131E  ECF5  F008         	call	_i2c_write
  7028                           
  7029                           ;eeprom.c: 30: i2c_rep_start();
  7030  001322  ECE3  F008         	call	_i2c_rep_start	;wreg free
  7031                           
  7032                           ;eeprom.c: 31: i2c_write(0xA1);
  7033  001326  0EA1               	movlw	161
  7034  001328  ECF5  F008         	call	_i2c_write
  7035                           
  7036                           ;eeprom.c: 32: data = i2c_read();
  7037  00132C  ECEF  F008         	call	_i2c_read	;wreg free
  7038  001330  6E03               	movwf	read_external_eeprom@data^0,c
  7039                           
  7040                           ;eeprom.c: 33: i2c_stop();
  7041  001332  ECEB  F008         	call	_i2c_stop	;wreg free
  7042                           
  7043                           ;eeprom.c: 35: return data;
  7044  001336  5003               	movf	read_external_eeprom@data^0,w,c
  7045  001338  0012               	return		;funcret
  7046  00133A                     __end_of_read_external_eeprom:
  7047                           	callstack 0
  7048                           
  7049 ;; *************** function _i2c_write *****************
  7050 ;; Defined at:
  7051 ;;		line 62 in file "i2c.c"
  7052 ;; Parameters:    Size  Location     Type
  7053 ;;  data            1    wreg     unsigned char 
  7054 ;; Auto vars:     Size  Location     Type
  7055 ;;  data            1    0[COMRAM] unsigned char 
  7056 ;; Return value:  Size  Location     Type
  7057 ;;                  1    wreg      void 
  7058 ;; Registers used:
  7059 ;;		wreg, cstack
  7060 ;; Tracked objects:
  7061 ;;		On entry : 0/0
  7062 ;;		On exit  : 0/0
  7063 ;;		Unchanged: 0/0
  7064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7065 ;;      Params:         0       0       0       0       0       0       0
  7066 ;;      Locals:         1       0       0       0       0       0       0
  7067 ;;      Temps:          0       0       0       0       0       0       0
  7068 ;;      Totals:         1       0       0       0       0       0       0
  7069 ;;Total ram usage:        1 bytes
  7070 ;; Hardware stack levels used: 1
  7071 ;; Hardware stack levels required when called: 1
  7072 ;; This function calls:
  7073 ;;		_i2c_idle
  7074 ;; This function is called by:
  7075 ;;		_write_ds1307
  7076 ;;		_read_ds1307
  7077 ;;		_write_external_eeprom
  7078 ;;		_read_external_eeprom
  7079 ;; This function uses a non-reentrant model
  7080 ;;
  7081                           
  7082                           	psect	text36
  7083  0011EA                     __ptext36:
  7084                           	callstack 0
  7085  0011EA                     _i2c_write:
  7086                           	callstack 27
  7087                           
  7088                           ;incstack = 0
  7089                           ;i2c_write@data stored from wreg
  7090  0011EA  6E01               	movwf	i2c_write@data^0,c
  7091                           
  7092                           ;i2c.c: 64: SSPBUF = data;
  7093  0011EC  C001  FFC9         	movff	i2c_write@data,4041	;volatile
  7094                           
  7095                           ;i2c.c: 65: i2c_idle();
  7096  0011F0  ECDB  F008         	call	_i2c_idle	;wreg free
  7097  0011F4  0012               	return		;funcret
  7098  0011F6                     __end_of_i2c_write:
  7099                           	callstack 0
  7100                           
  7101 ;; *************** function _i2c_stop *****************
  7102 ;; Defined at:
  7103 ;;		line 50 in file "i2c.c"
  7104 ;; Parameters:    Size  Location     Type
  7105 ;;		None
  7106 ;; Auto vars:     Size  Location     Type
  7107 ;;		None
  7108 ;; Return value:  Size  Location     Type
  7109 ;;                  1    wreg      void 
  7110 ;; Registers used:
  7111 ;;		cstack
  7112 ;; Tracked objects:
  7113 ;;		On entry : 0/0
  7114 ;;		On exit  : 0/0
  7115 ;;		Unchanged: 0/0
  7116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7117 ;;      Params:         0       0       0       0       0       0       0
  7118 ;;      Locals:         0       0       0       0       0       0       0
  7119 ;;      Temps:          0       0       0       0       0       0       0
  7120 ;;      Totals:         0       0       0       0       0       0       0
  7121 ;;Total ram usage:        0 bytes
  7122 ;; Hardware stack levels used: 1
  7123 ;; Hardware stack levels required when called: 1
  7124 ;; This function calls:
  7125 ;;		_i2c_idle
  7126 ;; This function is called by:
  7127 ;;		_write_ds1307
  7128 ;;		_read_ds1307
  7129 ;;		_write_external_eeprom
  7130 ;;		_read_external_eeprom
  7131 ;; This function uses a non-reentrant model
  7132 ;;
  7133                           
  7134                           	psect	text37
  7135  0011D6                     __ptext37:
  7136                           	callstack 0
  7137  0011D6                     _i2c_stop:
  7138                           	callstack 27
  7139                           
  7140                           ;i2c.c: 52: PEN = 1;
  7141                           
  7142                           ;incstack = 0
  7143  0011D6  84C5               	bsf	4037,2,c	;volatile
  7144                           
  7145                           ;i2c.c: 53: i2c_idle();
  7146  0011D8  ECDB  F008         	call	_i2c_idle	;wreg free
  7147  0011DC  0012               	return		;funcret
  7148  0011DE                     __end_of_i2c_stop:
  7149                           	callstack 0
  7150                           
  7151 ;; *************** function _i2c_start *****************
  7152 ;; Defined at:
  7153 ;;		line 44 in file "i2c.c"
  7154 ;; Parameters:    Size  Location     Type
  7155 ;;		None
  7156 ;; Auto vars:     Size  Location     Type
  7157 ;;		None
  7158 ;; Return value:  Size  Location     Type
  7159 ;;                  1    wreg      void 
  7160 ;; Registers used:
  7161 ;;		cstack
  7162 ;; Tracked objects:
  7163 ;;		On entry : 0/0
  7164 ;;		On exit  : 0/0
  7165 ;;		Unchanged: 0/0
  7166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7167 ;;      Params:         0       0       0       0       0       0       0
  7168 ;;      Locals:         0       0       0       0       0       0       0
  7169 ;;      Temps:          0       0       0       0       0       0       0
  7170 ;;      Totals:         0       0       0       0       0       0       0
  7171 ;;Total ram usage:        0 bytes
  7172 ;; Hardware stack levels used: 1
  7173 ;; Hardware stack levels required when called: 1
  7174 ;; This function calls:
  7175 ;;		_i2c_idle
  7176 ;; This function is called by:
  7177 ;;		_write_ds1307
  7178 ;;		_read_ds1307
  7179 ;;		_write_external_eeprom
  7180 ;;		_read_external_eeprom
  7181 ;; This function uses a non-reentrant model
  7182 ;;
  7183                           
  7184                           	psect	text38
  7185  0011CE                     __ptext38:
  7186                           	callstack 0
  7187  0011CE                     _i2c_start:
  7188                           	callstack 27
  7189                           
  7190                           ;i2c.c: 46: SEN = 1;
  7191                           
  7192                           ;incstack = 0
  7193  0011CE  80C5               	bsf	4037,0,c	;volatile
  7194                           
  7195                           ;i2c.c: 47: i2c_idle();
  7196  0011D0  ECDB  F008         	call	_i2c_idle	;wreg free
  7197  0011D4  0012               	return		;funcret
  7198  0011D6                     __end_of_i2c_start:
  7199                           	callstack 0
  7200                           
  7201 ;; *************** function _i2c_rep_start *****************
  7202 ;; Defined at:
  7203 ;;		line 56 in file "i2c.c"
  7204 ;; Parameters:    Size  Location     Type
  7205 ;;		None
  7206 ;; Auto vars:     Size  Location     Type
  7207 ;;		None
  7208 ;; Return value:  Size  Location     Type
  7209 ;;                  1    wreg      void 
  7210 ;; Registers used:
  7211 ;;		cstack
  7212 ;; Tracked objects:
  7213 ;;		On entry : 0/0
  7214 ;;		On exit  : 0/0
  7215 ;;		Unchanged: 0/0
  7216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7217 ;;      Params:         0       0       0       0       0       0       0
  7218 ;;      Locals:         0       0       0       0       0       0       0
  7219 ;;      Temps:          0       0       0       0       0       0       0
  7220 ;;      Totals:         0       0       0       0       0       0       0
  7221 ;;Total ram usage:        0 bytes
  7222 ;; Hardware stack levels used: 1
  7223 ;; Hardware stack levels required when called: 1
  7224 ;; This function calls:
  7225 ;;		_i2c_idle
  7226 ;; This function is called by:
  7227 ;;		_read_ds1307
  7228 ;;		_read_external_eeprom
  7229 ;; This function uses a non-reentrant model
  7230 ;;
  7231                           
  7232                           	psect	text39
  7233  0011C6                     __ptext39:
  7234                           	callstack 0
  7235  0011C6                     _i2c_rep_start:
  7236                           	callstack 26
  7237                           
  7238                           ;i2c.c: 58: RSEN = 1;
  7239                           
  7240                           ;incstack = 0
  7241  0011C6  82C5               	bsf	4037,1,c	;volatile
  7242                           
  7243                           ;i2c.c: 59: i2c_idle();
  7244  0011C8  ECDB  F008         	call	_i2c_idle	;wreg free
  7245  0011CC  0012               	return		;funcret
  7246  0011CE                     __end_of_i2c_rep_start:
  7247                           	callstack 0
  7248                           
  7249 ;; *************** function _i2c_read *****************
  7250 ;; Defined at:
  7251 ;;		line 80 in file "i2c.c"
  7252 ;; Parameters:    Size  Location     Type
  7253 ;;		None
  7254 ;; Auto vars:     Size  Location     Type
  7255 ;;		None
  7256 ;; Return value:  Size  Location     Type
  7257 ;;                  1    wreg      unsigned char 
  7258 ;; Registers used:
  7259 ;;		wreg, status,2, cstack
  7260 ;; Tracked objects:
  7261 ;;		On entry : 0/0
  7262 ;;		On exit  : 0/0
  7263 ;;		Unchanged: 0/0
  7264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7265 ;;      Params:         0       0       0       0       0       0       0
  7266 ;;      Locals:         0       0       0       0       0       0       0
  7267 ;;      Temps:          0       0       0       0       0       0       0
  7268 ;;      Totals:         0       0       0       0       0       0       0
  7269 ;;Total ram usage:        0 bytes
  7270 ;; Hardware stack levels used: 1
  7271 ;; Hardware stack levels required when called: 2
  7272 ;; This function calls:
  7273 ;;		_i2c_no_ack
  7274 ;;		_i2c_rx_mode
  7275 ;; This function is called by:
  7276 ;;		_read_ds1307
  7277 ;;		_read_external_eeprom
  7278 ;; This function uses a non-reentrant model
  7279 ;;
  7280                           
  7281                           	psect	text40
  7282  0011DE                     __ptext40:
  7283                           	callstack 0
  7284  0011DE                     _i2c_read:
  7285                           	callstack 25
  7286                           
  7287                           ;i2c.c: 82: i2c_rx_mode();
  7288                           
  7289                           ;incstack = 0
  7290  0011DE  ECDF  F008         	call	_i2c_rx_mode	;wreg free
  7291                           
  7292                           ;i2c.c: 83: i2c_no_ack();
  7293  0011E2  ECD8  F008         	call	_i2c_no_ack	;wreg free
  7294                           
  7295                           ;i2c.c: 85: return SSPBUF;
  7296  0011E6  50C9               	movf	201,w,c	;volatile
  7297  0011E8  0012               	return		;funcret
  7298  0011EA                     __end_of_i2c_read:
  7299                           	callstack 0
  7300                           
  7301 ;; *************** function _i2c_rx_mode *****************
  7302 ;; Defined at:
  7303 ;;		line 68 in file "i2c.c"
  7304 ;; Parameters:    Size  Location     Type
  7305 ;;		None
  7306 ;; Auto vars:     Size  Location     Type
  7307 ;;		None
  7308 ;; Return value:  Size  Location     Type
  7309 ;;                  1    wreg      void 
  7310 ;; Registers used:
  7311 ;;		cstack
  7312 ;; Tracked objects:
  7313 ;;		On entry : 0/0
  7314 ;;		On exit  : 0/0
  7315 ;;		Unchanged: 0/0
  7316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7317 ;;      Params:         0       0       0       0       0       0       0
  7318 ;;      Locals:         0       0       0       0       0       0       0
  7319 ;;      Temps:          0       0       0       0       0       0       0
  7320 ;;      Totals:         0       0       0       0       0       0       0
  7321 ;;Total ram usage:        0 bytes
  7322 ;; Hardware stack levels used: 1
  7323 ;; Hardware stack levels required when called: 1
  7324 ;; This function calls:
  7325 ;;		_i2c_idle
  7326 ;; This function is called by:
  7327 ;;		_i2c_read
  7328 ;; This function uses a non-reentrant model
  7329 ;;
  7330                           
  7331                           	psect	text41
  7332  0011BE                     __ptext41:
  7333                           	callstack 0
  7334  0011BE                     _i2c_rx_mode:
  7335                           	callstack 25
  7336                           
  7337                           ;i2c.c: 70: RCEN = 1;
  7338                           
  7339                           ;incstack = 0
  7340  0011BE  86C5               	bsf	4037,3,c	;volatile
  7341                           
  7342                           ;i2c.c: 71: i2c_idle();
  7343  0011C0  ECDB  F008         	call	_i2c_idle	;wreg free
  7344  0011C4  0012               	return		;funcret
  7345  0011C6                     __end_of_i2c_rx_mode:
  7346                           	callstack 0
  7347                           
  7348 ;; *************** function _i2c_idle *****************
  7349 ;; Defined at:
  7350 ;;		line 30 in file "i2c.c"
  7351 ;; Parameters:    Size  Location     Type
  7352 ;;		None
  7353 ;; Auto vars:     Size  Location     Type
  7354 ;;		None
  7355 ;; Return value:  Size  Location     Type
  7356 ;;                  1    wreg      void 
  7357 ;; Registers used:
  7358 ;;		None
  7359 ;; Tracked objects:
  7360 ;;		On entry : 0/0
  7361 ;;		On exit  : 0/0
  7362 ;;		Unchanged: 0/0
  7363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7364 ;;      Params:         0       0       0       0       0       0       0
  7365 ;;      Locals:         0       0       0       0       0       0       0
  7366 ;;      Temps:          0       0       0       0       0       0       0
  7367 ;;      Totals:         0       0       0       0       0       0       0
  7368 ;;Total ram usage:        0 bytes
  7369 ;; Hardware stack levels used: 1
  7370 ;; This function calls:
  7371 ;;		Nothing
  7372 ;; This function is called by:
  7373 ;;		_i2c_start
  7374 ;;		_i2c_stop
  7375 ;;		_i2c_rep_start
  7376 ;;		_i2c_write
  7377 ;;		_i2c_rx_mode
  7378 ;; This function uses a non-reentrant model
  7379 ;;
  7380                           
  7381                           	psect	text42
  7382  0011B6                     __ptext42:
  7383                           	callstack 0
  7384  0011B6                     _i2c_idle:
  7385                           	callstack 27
  7386                           
  7387                           ;i2c.c: 32: while (!SSPIF);
  7388                           
  7389                           ;incstack = 0
  7390  0011B6  A69E               	btfss	3998,3,c	;volatile
  7391  0011B8  D7FE               	goto	__ptext42
  7392                           
  7393                           ;i2c.c: 33: SSPIF = 0;
  7394  0011BA  969E               	bcf	3998,3,c	;volatile
  7395  0011BC  0012               	return		;funcret
  7396  0011BE                     __end_of_i2c_idle:
  7397                           	callstack 0
  7398                           
  7399 ;; *************** function _i2c_no_ack *****************
  7400 ;; Defined at:
  7401 ;;		line 74 in file "i2c.c"
  7402 ;; Parameters:    Size  Location     Type
  7403 ;;		None
  7404 ;; Auto vars:     Size  Location     Type
  7405 ;;		None
  7406 ;; Return value:  Size  Location     Type
  7407 ;;                  1    wreg      void 
  7408 ;; Registers used:
  7409 ;;		None
  7410 ;; Tracked objects:
  7411 ;;		On entry : 0/0
  7412 ;;		On exit  : 0/0
  7413 ;;		Unchanged: 0/0
  7414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7415 ;;      Params:         0       0       0       0       0       0       0
  7416 ;;      Locals:         0       0       0       0       0       0       0
  7417 ;;      Temps:          0       0       0       0       0       0       0
  7418 ;;      Totals:         0       0       0       0       0       0       0
  7419 ;;Total ram usage:        0 bytes
  7420 ;; Hardware stack levels used: 1
  7421 ;; This function calls:
  7422 ;;		Nothing
  7423 ;; This function is called by:
  7424 ;;		_i2c_read
  7425 ;; This function uses a non-reentrant model
  7426 ;;
  7427                           
  7428                           	psect	text43
  7429  0011B0                     __ptext43:
  7430                           	callstack 0
  7431  0011B0                     _i2c_no_ack:
  7432                           	callstack 26
  7433                           
  7434                           ;i2c.c: 76: ACKDT = 1;
  7435                           
  7436                           ;incstack = 0
  7437  0011B0  8AC5               	bsf	4037,5,c	;volatile
  7438                           
  7439                           ;i2c.c: 77: ACKEN = 1;
  7440  0011B2  88C5               	bsf	4037,4,c	;volatile
  7441  0011B4  0012               	return		;funcret
  7442  0011B6                     __end_of_i2c_no_ack:
  7443                           	callstack 0
  7444                           
  7445 ;; *************** function _clcd_putch *****************
  7446 ;; Defined at:
  7447 ;;		line 59 in file "clcd.c"
  7448 ;; Parameters:    Size  Location     Type
  7449 ;;  data            1    wreg     const unsigned char 
  7450 ;;  addr            1    8[COMRAM] unsigned char 
  7451 ;; Auto vars:     Size  Location     Type
  7452 ;;  data            1    9[COMRAM] const unsigned char 
  7453 ;; Return value:  Size  Location     Type
  7454 ;;                  1    wreg      void 
  7455 ;; Registers used:
  7456 ;;		wreg, status,2, cstack
  7457 ;; Tracked objects:
  7458 ;;		On entry : 0/0
  7459 ;;		On exit  : 0/0
  7460 ;;		Unchanged: 0/0
  7461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7462 ;;      Params:         1       0       0       0       0       0       0
  7463 ;;      Locals:         1       0       0       0       0       0       0
  7464 ;;      Temps:          0       0       0       0       0       0       0
  7465 ;;      Totals:         2       0       0       0       0       0       0
  7466 ;;Total ram usage:        2 bytes
  7467 ;; Hardware stack levels used: 1
  7468 ;; Hardware stack levels required when called: 1
  7469 ;; This function calls:
  7470 ;;		_clcd_write
  7471 ;; This function is called by:
  7472 ;;		_print_log_to_clcd
  7473 ;;		_view_log
  7474 ;;		_get_password
  7475 ;;		_change_password
  7476 ;;		_go_to_menu
  7477 ;;		_main
  7478 ;;		_set_time
  7479 ;; This function uses a non-reentrant model
  7480 ;;
  7481                           
  7482                           	psect	text44
  7483  00122A                     __ptext44:
  7484                           	callstack 0
  7485  00122A                     _clcd_putch:
  7486                           	callstack 26
  7487                           
  7488                           ;incstack = 0
  7489                           ;clcd_putch@data stored from wreg
  7490  00122A  6E0A               	movwf	clcd_putch@data^0,c
  7491                           
  7492                           ;clcd.c: 61: clcd_write(addr, 0);
  7493  00122C  0E00               	movlw	0
  7494  00122E  6E01               	movwf	clcd_write@control_bit^0,c
  7495  001230  5009               	movf	clcd_putch@addr^0,w,c
  7496  001232  EC5F  F009         	call	_clcd_write
  7497                           
  7498                           ;clcd.c: 62: clcd_write(data, 1);
  7499  001236  0E01               	movlw	1
  7500  001238  6E01               	movwf	clcd_write@control_bit^0,c
  7501  00123A  500A               	movf	clcd_putch@data^0,w,c
  7502  00123C  EC5F  F009         	call	_clcd_write
  7503  001240  0012               	return		;funcret
  7504  001242                     __end_of_clcd_putch:
  7505                           	callstack 0
  7506                           
  7507 ;; *************** function _clcd_print *****************
  7508 ;; Defined at:
  7509 ;;		line 50 in file "clcd.c"
  7510 ;; Parameters:    Size  Location     Type
  7511 ;;  data            2    2[COMRAM] PTR const unsigned char 
  7512 ;;		 -> STR_30(14), STR_29(15), STR_28(3), STR_27(17), 
  7513 ;;		 -> STR_26(3), STR_25(14), STR_24(10), STR_23(12), 
  7514 ;;		 -> STR_22(17), STR_21(9), STR_20(15), STR_19(11), 
  7515 ;;		 -> STR_18(14), STR_17(10), STR_16(15), STR_15(22), 
  7516 ;;		 -> STR_14(14), STR_13(16), STR_12(19), STR_11(19), 
  7517 ;;		 -> STR_10(17), STR_9(15), STR_8(7), STR_7(17), 
  7518 ;;		 -> STR_6(15), STR_5(8), STR_4(2), STR_3(2), 
  7519 ;;		 -> STR_2(15), STR_1(6), speed(3), time(9), 
  7520 ;;  addr            1    4[COMRAM] unsigned char 
  7521 ;; Auto vars:     Size  Location     Type
  7522 ;;		None
  7523 ;; Return value:  Size  Location     Type
  7524 ;;                  1    wreg      void 
  7525 ;; Registers used:
  7526 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7527 ;; Tracked objects:
  7528 ;;		On entry : 0/0
  7529 ;;		On exit  : 0/0
  7530 ;;		Unchanged: 0/0
  7531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7532 ;;      Params:         3       0       0       0       0       0       0
  7533 ;;      Locals:         0       0       0       0       0       0       0
  7534 ;;      Temps:          0       0       0       0       0       0       0
  7535 ;;      Totals:         3       0       0       0       0       0       0
  7536 ;;Total ram usage:        3 bytes
  7537 ;; Hardware stack levels used: 1
  7538 ;; Hardware stack levels required when called: 1
  7539 ;; This function calls:
  7540 ;;		_clcd_write
  7541 ;; This function is called by:
  7542 ;;		_view_log
  7543 ;;		_get_password
  7544 ;;		_change_password
  7545 ;;		_go_to_menu
  7546 ;;		_main
  7547 ;;		_set_time
  7548 ;; This function uses a non-reentrant model
  7549 ;;
  7550                           
  7551                           	psect	text45
  7552  0016CC                     __ptext45:
  7553                           	callstack 0
  7554  0016CC                     _clcd_print:
  7555                           	callstack 27
  7556                           
  7557                           ;clcd.c: 52: clcd_write(addr, 0);
  7558                           
  7559                           ;incstack = 0
  7560  0016CC  0E00               	movlw	0
  7561  0016CE  6E01               	movwf	clcd_write@control_bit^0,c
  7562  0016D0  5005               	movf	clcd_print@addr^0,w,c
  7563  0016D2  EC5F  F009         	call	_clcd_write
  7564                           
  7565                           ;clcd.c: 53: while (*data != '\0')
  7566  0016D6  D016               	goto	l2918
  7567  0016D8                     l2914:
  7568                           
  7569                           ;clcd.c: 54: {;clcd.c: 55: clcd_write(*data++, 1);
  7570  0016D8  0E01               	movlw	1
  7571  0016DA  6E01               	movwf	clcd_write@control_bit^0,c
  7572  0016DC  C003  FFF6         	movff	clcd_print@data,tblptrl
  7573  0016E0  C004  FFF7         	movff	clcd_print@data+1,tblptrh
  7574  0016E4  6AF8               	clrf	tblptru,c
  7575  0016E6  0E05               	movlw	(high __ramtop+-1)
  7576  0016E8  64F7               	cpfsgt	tblptrh,c
  7577  0016EA  D003               	bra	u1527
  7578  0016EC  0008               	tblrd		*
  7579  0016EE  50F5               	movf	tablat,w,c
  7580  0016F0  D005               	bra	u1520
  7581  0016F2                     u1527:
  7582  0016F2  CFF6 FFE9          	movff	tblptrl,fsr0l
  7583  0016F6  CFF7 FFEA          	movff	tblptrh,fsr0h
  7584  0016FA  50EF               	movf	indf0,w,c
  7585  0016FC                     u1520:
  7586  0016FC  EC5F  F009         	call	_clcd_write
  7587  001700  4A03               	infsnz	clcd_print@data^0,f,c
  7588  001702  2A04               	incf	(clcd_print@data+1)^0,f,c
  7589  001704                     l2918:
  7590  001704  C003  FFF6         	movff	clcd_print@data,tblptrl
  7591  001708  C004  FFF7         	movff	clcd_print@data+1,tblptrh
  7592  00170C  6AF8               	clrf	tblptru,c
  7593  00170E  0E05               	movlw	(high __ramtop+-1)
  7594  001710  64F7               	cpfsgt	tblptrh,c
  7595  001712  D003               	bra	u1537
  7596  001714  0008               	tblrd		*
  7597  001716  50F5               	movf	tablat,w,c
  7598  001718  D005               	bra	u1530
  7599  00171A                     u1537:
  7600  00171A  CFF6 FFE9          	movff	tblptrl,fsr0l
  7601  00171E  CFF7 FFEA          	movff	tblptrh,fsr0h
  7602  001722  50EF               	movf	indf0,w,c
  7603  001724                     u1530:
  7604  001724  0900               	iorlw	0
  7605  001726  B4D8               	btfsc	status,2,c
  7606  001728  0012               	return	
  7607  00172A  D7D6               	goto	l2914
  7608  00172C                     __end_of_clcd_print:
  7609                           	callstack 0
  7610                           
  7611 ;; *************** function _clcd_write *****************
  7612 ;; Defined at:
  7613 ;;		line 12 in file "clcd.c"
  7614 ;; Parameters:    Size  Location     Type
  7615 ;;  byte            1    wreg     unsigned char 
  7616 ;;  control_bit     1    0[COMRAM] unsigned char 
  7617 ;; Auto vars:     Size  Location     Type
  7618 ;;  byte            1    1[COMRAM] unsigned char 
  7619 ;; Return value:  Size  Location     Type
  7620 ;;                  1    wreg      void 
  7621 ;; Registers used:
  7622 ;;		wreg
  7623 ;; Tracked objects:
  7624 ;;		On entry : 0/0
  7625 ;;		On exit  : 0/0
  7626 ;;		Unchanged: 0/0
  7627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7628 ;;      Params:         1       0       0       0       0       0       0
  7629 ;;      Locals:         1       0       0       0       0       0       0
  7630 ;;      Temps:          0       0       0       0       0       0       0
  7631 ;;      Totals:         2       0       0       0       0       0       0
  7632 ;;Total ram usage:        2 bytes
  7633 ;; Hardware stack levels used: 1
  7634 ;; This function calls:
  7635 ;;		Nothing
  7636 ;; This function is called by:
  7637 ;;		_view_log
  7638 ;;		_get_password
  7639 ;;		_change_password
  7640 ;;		_go_to_menu
  7641 ;;		_set_time
  7642 ;;		_init_clcd
  7643 ;;		_clcd_print
  7644 ;;		_clcd_putch
  7645 ;; This function uses a non-reentrant model
  7646 ;;
  7647                           
  7648                           	psect	text46
  7649  0012BE                     __ptext46:
  7650                           	callstack 0
  7651  0012BE                     _clcd_write:
  7652                           	callstack 28
  7653                           
  7654                           ;incstack = 0
  7655                           ;clcd_write@byte stored from wreg
  7656  0012BE  6E02               	movwf	clcd_write@byte^0,c
  7657                           
  7658                           ;clcd.c: 14: PORTCbits.RC1 = control_bit;
  7659  0012C0  B001               	btfsc	clcd_write@control_bit^0,0,c
  7660  0012C2  D002               	bra	u1365
  7661  0012C4  9282               	bcf	130,1,c	;volatile
  7662  0012C6  D001               	bra	u1366
  7663  0012C8                     u1365:
  7664  0012C8  8282               	bsf	130,1,c	;volatile
  7665  0012CA                     u1366:
  7666                           
  7667                           ;clcd.c: 15: PORTD = byte;
  7668  0012CA  C002  FF83         	movff	clcd_write@byte,3971	;volatile
  7669                           
  7670                           ;clcd.c: 18: PORTCbits.RC2 = 1;
  7671  0012CE  8482               	bsf	130,2,c	;volatile
  7672                           
  7673                           ;clcd.c: 19: PORTCbits.RC2 = 0;
  7674  0012D0  9482               	bcf	130,2,c	;volatile
  7675                           
  7676                           ;clcd.c: 21: TRISD7 = 0xFF;
  7677  0012D2  8E95               	bsf	3989,7,c	;volatile
  7678                           
  7679                           ;clcd.c: 22: PORTCbits.RC0 = 1;
  7680  0012D4  8082               	bsf	130,0,c	;volatile
  7681                           
  7682                           ;clcd.c: 23: PORTCbits.RC1 = 0;
  7683  0012D6  9282               	bcf	130,1,c	;volatile
  7684  0012D8                     l2758:
  7685                           
  7686                           ;clcd.c: 26: {;clcd.c: 27: PORTCbits.RC2 = 1;
  7687  0012D8  8482               	bsf	130,2,c	;volatile
  7688                           
  7689                           ;clcd.c: 28: PORTCbits.RC2 = 0;
  7690  0012DA  9482               	bcf	130,2,c	;volatile
  7691                           
  7692                           ;clcd.c: 29: } while (PORTDbits.RD7);
  7693  0012DC  BE83               	btfsc	131,7,c	;volatile
  7694  0012DE  D7FC               	goto	l2758
  7695                           
  7696                           ;clcd.c: 31: PORTCbits.RC0 = 0;
  7697  0012E0  9082               	bcf	130,0,c	;volatile
  7698                           
  7699                           ;clcd.c: 32: TRISD7 = 0x00;
  7700  0012E2  9E95               	bcf	3989,7,c	;volatile
  7701  0012E4  0012               	return		;funcret
  7702  0012E6                     __end_of_clcd_write:
  7703                           	callstack 0
  7704                           
  7705 ;; *************** function ___lbmod *****************
  7706 ;; Defined at:
  7707 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\lbmod.c"
  7708 ;; Parameters:    Size  Location     Type
  7709 ;;  dividend        1    wreg     unsigned char 
  7710 ;;  divisor         1    4[COMRAM] unsigned char 
  7711 ;; Auto vars:     Size  Location     Type
  7712 ;;  dividend        1    5[COMRAM] unsigned char 
  7713 ;;  rem             1    7[COMRAM] unsigned char 
  7714 ;;  counter         1    6[COMRAM] unsigned char 
  7715 ;; Return value:  Size  Location     Type
  7716 ;;                  1    wreg      unsigned char 
  7717 ;; Registers used:
  7718 ;;		wreg, status,2, status,0
  7719 ;; Tracked objects:
  7720 ;;		On entry : 0/0
  7721 ;;		On exit  : 0/0
  7722 ;;		Unchanged: 0/0
  7723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7724 ;;      Params:         1       0       0       0       0       0       0
  7725 ;;      Locals:         3       0       0       0       0       0       0
  7726 ;;      Temps:          0       0       0       0       0       0       0
  7727 ;;      Totals:         4       0       0       0       0       0       0
  7728 ;;Total ram usage:        4 bytes
  7729 ;; Hardware stack levels used: 1
  7730 ;; This function calls:
  7731 ;;		Nothing
  7732 ;; This function is called by:
  7733 ;;		_get_password
  7734 ;; This function uses a non-reentrant model
  7735 ;;
  7736                           
  7737                           	psect	text47
  7738  0012E6                     __ptext47:
  7739                           	callstack 0
  7740  0012E6                     ___lbmod:
  7741                           	callstack 29
  7742                           
  7743                           ;incstack = 0
  7744                           ;___lbmod@dividend stored from wreg
  7745  0012E6  6E06               	movwf	___lbmod@dividend^0,c
  7746  0012E8  0E08               	movlw	8
  7747  0012EA  6E07               	movwf	___lbmod@counter^0,c
  7748  0012EC  0E00               	movlw	0
  7749  0012EE  6E08               	movwf	___lbmod@rem^0,c
  7750  0012F0                     l3612:
  7751  0012F0  90D8               	bcf	status,0,c
  7752  0012F2  3406               	rlcf	___lbmod@dividend^0,w,c
  7753  0012F4  3408               	rlcf	___lbmod@rem^0,w,c
  7754  0012F6  6E08               	movwf	___lbmod@rem^0,c
  7755  0012F8  90D8               	bcf	status,0,c
  7756  0012FA  3606               	rlcf	___lbmod@dividend^0,f,c
  7757  0012FC  5005               	movf	___lbmod@divisor^0,w,c
  7758  0012FE  5C08               	subwf	___lbmod@rem^0,w,c
  7759  001300  A0D8               	btfss	status,0,c
  7760  001302  D002               	goto	l3620
  7761  001304  5005               	movf	___lbmod@divisor^0,w,c
  7762  001306  5E08               	subwf	___lbmod@rem^0,f,c
  7763  001308                     l3620:
  7764  001308  2E07               	decfsz	___lbmod@counter^0,f,c
  7765  00130A  D7F2               	goto	l3612
  7766  00130C  5008               	movf	___lbmod@rem^0,w,c
  7767  00130E  0012               	return		;funcret
  7768  001310                     __end_of___lbmod:
  7769                           	callstack 0
  7770                           
  7771 ;; *************** function ___lbdiv *****************
  7772 ;; Defined at:
  7773 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\lbdiv.c"
  7774 ;; Parameters:    Size  Location     Type
  7775 ;;  dividend        1    wreg     unsigned char 
  7776 ;;  divisor         1    0[COMRAM] unsigned char 
  7777 ;; Auto vars:     Size  Location     Type
  7778 ;;  dividend        1    1[COMRAM] unsigned char 
  7779 ;;  quotient        1    3[COMRAM] unsigned char 
  7780 ;;  counter         1    2[COMRAM] unsigned char 
  7781 ;; Return value:  Size  Location     Type
  7782 ;;                  1    wreg      unsigned char 
  7783 ;; Registers used:
  7784 ;;		wreg, status,2, status,0
  7785 ;; Tracked objects:
  7786 ;;		On entry : 0/0
  7787 ;;		On exit  : 0/0
  7788 ;;		Unchanged: 0/0
  7789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7790 ;;      Params:         1       0       0       0       0       0       0
  7791 ;;      Locals:         3       0       0       0       0       0       0
  7792 ;;      Temps:          0       0       0       0       0       0       0
  7793 ;;      Totals:         4       0       0       0       0       0       0
  7794 ;;Total ram usage:        4 bytes
  7795 ;; Hardware stack levels used: 1
  7796 ;; This function calls:
  7797 ;;		Nothing
  7798 ;; This function is called by:
  7799 ;;		_get_password
  7800 ;; This function uses a non-reentrant model
  7801 ;;
  7802                           
  7803                           	psect	text48
  7804  0013D0                     __ptext48:
  7805                           	callstack 0
  7806  0013D0                     ___lbdiv:
  7807                           	callstack 29
  7808                           
  7809                           ;incstack = 0
  7810                           ;___lbdiv@dividend stored from wreg
  7811  0013D0  6E02               	movwf	___lbdiv@dividend^0,c
  7812  0013D2  0E00               	movlw	0
  7813  0013D4  6E04               	movwf	___lbdiv@quotient^0,c
  7814  0013D6  5001               	movf	___lbdiv@divisor^0,w,c
  7815  0013D8  B4D8               	btfsc	status,2,c
  7816  0013DA  D015               	goto	l3606
  7817  0013DC  0E01               	movlw	1
  7818  0013DE  6E03               	movwf	___lbdiv@counter^0,c
  7819  0013E0  D003               	goto	l3594
  7820  0013E2                     l3590:
  7821  0013E2  90D8               	bcf	status,0,c
  7822  0013E4  3601               	rlcf	___lbdiv@divisor^0,f,c
  7823  0013E6  2A03               	incf	___lbdiv@counter^0,f,c
  7824  0013E8                     l3594:
  7825  0013E8  AE01               	btfss	___lbdiv@divisor^0,7,c
  7826  0013EA  D7FB               	goto	l3590
  7827  0013EC                     u2300:
  7828  0013EC  90D8               	bcf	status,0,c
  7829  0013EE  3604               	rlcf	___lbdiv@quotient^0,f,c
  7830  0013F0  5001               	movf	___lbdiv@divisor^0,w,c
  7831  0013F2  5C02               	subwf	___lbdiv@dividend^0,w,c
  7832  0013F4  A0D8               	btfss	status,0,c
  7833  0013F6  D003               	goto	l3602
  7834  0013F8  5001               	movf	___lbdiv@divisor^0,w,c
  7835  0013FA  5E02               	subwf	___lbdiv@dividend^0,f,c
  7836  0013FC  8004               	bsf	___lbdiv@quotient^0,0,c
  7837  0013FE                     l3602:
  7838  0013FE  90D8               	bcf	status,0,c
  7839  001400  3201               	rrcf	___lbdiv@divisor^0,f,c
  7840  001402  2E03               	decfsz	___lbdiv@counter^0,f,c
  7841  001404  D7F3               	goto	u2300
  7842  001406                     l3606:
  7843  001406  5004               	movf	___lbdiv@quotient^0,w,c
  7844  001408  0012               	return		;funcret
  7845  00140A                     __end_of___lbdiv:
  7846                           	callstack 0
  7847                           
  7848                           	psect	rparam
  7849  0000                     tosu	equ	0xFFF
  7850                           tosh	equ	0xFFE
  7851                           tosl	equ	0xFFD
  7852                           stkptr	equ	0xFFC
  7853                           pclatu	equ	0xFFB
  7854                           pclath	equ	0xFFA
  7855                           pcl	equ	0xFF9
  7856                           tblptru	equ	0xFF8
  7857                           tblptrh	equ	0xFF7
  7858                           tblptrl	equ	0xFF6
  7859                           tablat	equ	0xFF5
  7860                           prodh	equ	0xFF4
  7861                           prodl	equ	0xFF3
  7862                           indf0	equ	0xFEF
  7863                           postinc0	equ	0xFEE
  7864                           postdec0	equ	0xFED
  7865                           preinc0	equ	0xFEC
  7866                           plusw0	equ	0xFEB
  7867                           fsr0h	equ	0xFEA
  7868                           fsr0l	equ	0xFE9
  7869                           wreg	equ	0xFE8
  7870                           indf1	equ	0xFE7
  7871                           postinc1	equ	0xFE6
  7872                           postdec1	equ	0xFE5
  7873                           preinc1	equ	0xFE4
  7874                           plusw1	equ	0xFE3
  7875                           fsr1h	equ	0xFE2
  7876                           fsr1l	equ	0xFE1
  7877                           bsr	equ	0xFE0
  7878                           indf2	equ	0xFDF
  7879                           postinc2	equ	0xFDE
  7880                           postdec2	equ	0xFDD
  7881                           preinc2	equ	0xFDC
  7882                           plusw2	equ	0xFDB
  7883                           fsr2h	equ	0xFDA
  7884                           fsr2l	equ	0xFD9
  7885                           status	equ	0xFD8

Data Sizes:
    Strings     356
    Constant    0
    Data        27
    BSS         52
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     68      93
    BANK0           160      0      54
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    clcd_print@data	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_30(CODE[14]), STR_29(CODE[15]), STR_28(CODE[3]), STR_27(CODE[17]), 
		 -> STR_26(CODE[3]), STR_25(CODE[14]), STR_24(CODE[10]), STR_23(CODE[12]), 
		 -> STR_22(CODE[17]), STR_21(CODE[9]), STR_20(CODE[15]), STR_19(CODE[11]), 
		 -> STR_18(CODE[14]), STR_17(CODE[10]), STR_16(CODE[15]), STR_15(CODE[22]), 
		 -> STR_14(CODE[14]), STR_13(CODE[16]), STR_12(CODE[19]), STR_11(CODE[19]), 
		 -> STR_10(CODE[17]), STR_9(CODE[15]), STR_8(CODE[7]), STR_7(CODE[17]), 
		 -> STR_6(CODE[15]), STR_5(CODE[8]), STR_4(CODE[2]), STR_3(CODE[2]), 
		 -> STR_2(CODE[15]), STR_1(CODE[6]), speed(COMRAM[3]), time(COMRAM[9]), 

    go_to_menu@menu	PTR const unsigned char [5] size(2) Largest target is 15
		 -> STR_21(CODE[9]), STR_20(CODE[15]), STR_19(CODE[11]), STR_18(CODE[14]), 
		 -> STR_17(CODE[10]), 

    go_to_menu@F10376	PTR const unsigned char [5] size(2) Largest target is 15
		 -> STR_21(CODE[9]), STR_20(CODE[15]), STR_19(CODE[11]), STR_18(CODE[14]), 
		 -> STR_17(CODE[10]), 


Critical Paths under _main in COMRAM

    _main->_go_to_menu
    _init_config->_init_ds1307
    _init_ds1307->_write_ds1307
    _init_clcd->_clcd_write
    _go_to_menu->_set_time
    _view_log->_print_log_to_clcd
    _print_log_to_clcd->_clcd_putch
    _store_key_log->___awmod
    _set_time->_write_ds1307
    _write_ds1307->___awmod
    ___awmod->___awdiv
    _print_to_console->_read_external_eeprom
    _change_password->_clcd_putch
    _write_external_eeprom->_i2c_write
    _get_time->_read_ds1307
    _read_ds1307->_i2c_write
    _get_speed->___fttol
    ___lwtoft->___ftpack
    ___fttol->___ftmul
    ___ftmul->___ftdiv
    ___ftdiv->___lwtoft
    _get_password->_clcd_putch
    _read_external_eeprom->_i2c_write
    _clcd_putch->___lbmod
    _clcd_print->_clcd_write
    ___lbmod->___lbdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0  141261
                                             59 COMRAM     9     9      0
                         _clcd_print
                         _clcd_putch
                              _delay
                       _get_password
                          _get_speed
                           _get_time
                         _go_to_menu
                        _init_config
                      _read_switches
                      _store_key_log
 ---------------------------------------------------------------------------------
 (1) _init_config                                          0     0      0    5959
                           _init_adc
                          _init_clcd
                        _init_ds1307
                           _init_i2c
                 _init_matrix_keypad
                          _init_uart
              _write_external_eeprom
 ---------------------------------------------------------------------------------
 (2) _init_uart                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_matrix_keypad                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_i2c                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_ds1307                                          1     1      0    1114
                                             16 COMRAM     1     1      0
                        _read_ds1307
                       _write_ds1307
 ---------------------------------------------------------------------------------
 (2) _init_clcd                                            0     0      0    2552
                         _clcd_write
 ---------------------------------------------------------------------------------
 (2) _init_adc                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _go_to_menu                                          26    26      0   87949
                                             39 COMRAM    20    20      0
                    _change_password
                         _clcd_print
                         _clcd_putch
                         _clcd_write
                              _delay
                   _print_to_console
                              _putch
                      _read_switches
                           _set_time
                      _store_key_log
                           _view_log
 ---------------------------------------------------------------------------------
 (2) _view_log                                            21    21      0   23750
                                             12 COMRAM    21    21      0
                         _clcd_print
                         _clcd_putch
                         _clcd_write
                              _delay
                  _print_log_to_clcd
                      _read_switches
 ---------------------------------------------------------------------------------
 (3) _print_log_to_clcd                                    2     1      1    6915
                                             10 COMRAM     2     1      1
                         _clcd_putch
               _read_external_eeprom
 ---------------------------------------------------------------------------------
 (1) _store_key_log                                        1     1      0    4893
                                             14 COMRAM     1     1      0
                            ___awmod
              _write_external_eeprom
 ---------------------------------------------------------------------------------
 (2) _set_time                                            23    23      0   22179
                                             16 COMRAM    23    23      0
                            ___awdiv
                            ___awmod
                         _clcd_print
                         _clcd_putch
                         _clcd_write
                              _delay
                        _read_ds1307
                      _read_switches
                       _write_ds1307
 ---------------------------------------------------------------------------------
 (3) _write_ds1307                                         2     1      1     978
                                             14 COMRAM     2     1      1
                            ___awdiv (ARG)
                            ___awmod (ARG)
                          _i2c_start
                           _i2c_stop
                          _i2c_write
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    2424
                                              8 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1212
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _print_to_console                                     2     0      2     385
                                              3 COMRAM     2     0      2
                              _putch
               _read_external_eeprom
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _change_password                                     20    20      0   19679
                                             10 COMRAM    20    20      0
                         _clcd_print
                         _clcd_putch
                         _clcd_write
                              _delay
                      _read_switches
              _write_external_eeprom
 ---------------------------------------------------------------------------------
 (2) _write_external_eeprom                                4     3      1    2293
                                              1 COMRAM     4     3      1
                          _i2c_start
                           _i2c_stop
                          _i2c_write
 ---------------------------------------------------------------------------------
 (3) _delay                                                7     5      2     829
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (1) _get_time                                             0     0      0      67
                        _read_ds1307
 ---------------------------------------------------------------------------------
 (3) _read_ds1307                                          2     2      0      67
                                              1 COMRAM     2     2      0
                           _i2c_read
                      _i2c_rep_start
                          _i2c_start
                           _i2c_stop
                          _i2c_write
 ---------------------------------------------------------------------------------
 (1) _get_speed                                            2     2      0   10722
                                             56 COMRAM     2     2      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
                            ___lwdiv
                            ___lwmod
                           ___lwtoft
                           _read_adc
 ---------------------------------------------------------------------------------
 (2) _read_adc                                             7     5      2      45
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    2903
                                              8 COMRAM     3     0      3
                           ___ftpack
                           _read_adc (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     328
                                             41 COMRAM    15    11      4
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
                           _read_adc (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    3411
                                             26 COMRAM    15     9      6
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                           _read_adc (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    3365
                                             11 COMRAM    15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
                           _read_adc (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2805
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _get_password                                        28    28      0   17299
                                             10 COMRAM    28    28      0
                            ___lbdiv
                            ___lbmod
                         _clcd_print
                         _clcd_putch
                         _clcd_write
               _read_external_eeprom
                      _read_switches
 ---------------------------------------------------------------------------------
 (1) _read_switches                                        1     1      0      44
                                              0 COMRAM     1     1      0
                           _scan_key
 ---------------------------------------------------------------------------------
 (2) _scan_key                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _read_external_eeprom                                 2     2      0      67
                                              1 COMRAM     2     2      0
                           _i2c_read
                      _i2c_rep_start
                          _i2c_start
                           _i2c_stop
                          _i2c_write
 ---------------------------------------------------------------------------------
 (3) _i2c_write                                            1     1      0      22
                                              0 COMRAM     1     1      0
                           _i2c_idle
 ---------------------------------------------------------------------------------
 (3) _i2c_stop                                             0     0      0       0
                           _i2c_idle
 ---------------------------------------------------------------------------------
 (3) _i2c_start                                            0     0      0       0
                           _i2c_idle
 ---------------------------------------------------------------------------------
 (4) _i2c_rep_start                                        0     0      0       0
                           _i2c_idle
 ---------------------------------------------------------------------------------
 (4) _i2c_read                                             0     0      0       0
                         _i2c_no_ack
                        _i2c_rx_mode
 ---------------------------------------------------------------------------------
 (5) _i2c_rx_mode                                          0     0      0       0
                           _i2c_idle
 ---------------------------------------------------------------------------------
 (4) _i2c_idle                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _i2c_no_ack                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _clcd_putch                                           2     1      1    6244
                                              8 COMRAM     2     1      1
                            ___lbdiv (ARG)
                            ___lbmod (ARG)
                         _clcd_write
               _read_external_eeprom (ARG)
 ---------------------------------------------------------------------------------
 (3) _clcd_print                                           3     0      3    7027
                                              2 COMRAM     3     0      3
                         _clcd_write
 ---------------------------------------------------------------------------------
 (3) _clcd_write                                           2     1      1    2552
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) ___lbmod                                              4     3      1     387
                                              4 COMRAM     4     3      1
                            ___lbdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              4     3      1     314
                                              0 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _clcd_print
     _clcd_write
   _clcd_putch
     ___lbdiv (ARG)
     ___lbmod (ARG)
       ___lbdiv (ARG)
     _clcd_write (ARG)
     _read_external_eeprom (ARG)
       _i2c_read
         _i2c_no_ack
         _i2c_rx_mode
           _i2c_idle
       _i2c_rep_start
         _i2c_idle
       _i2c_start
         _i2c_idle
       _i2c_stop
         _i2c_idle
       _i2c_write
         _i2c_idle
   _delay
   _get_password
     ___lbdiv
     ___lbmod
     _clcd_print
     _clcd_putch
     _clcd_write
     _read_external_eeprom
     _read_switches
       _scan_key
   _get_speed
     ___ftdiv
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
         _read_adc (ARG)
       _read_adc (ARG)
     ___ftmul
       ___ftdiv (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
       _read_adc (ARG)
     ___fttol
       ___ftdiv (ARG)
       ___ftmul (ARG)
       ___lwtoft (ARG)
       _read_adc (ARG)
     ___lwdiv
     ___lwmod
     ___lwtoft
     _read_adc
   _get_time
     _read_ds1307
       _i2c_read
       _i2c_rep_start
       _i2c_start
       _i2c_stop
       _i2c_write
   _go_to_menu
     _change_password
       _clcd_print
       _clcd_putch
       _clcd_write
       _delay
       _read_switches
       _write_external_eeprom
         _i2c_start
         _i2c_stop
         _i2c_write
     _clcd_print
     _clcd_putch
     _clcd_write
     _delay
     _print_to_console
       _putch
       _read_external_eeprom
     _putch
     _read_switches
     _set_time
       ___awdiv
       ___awmod
         ___awdiv (ARG)
       _clcd_print
       _clcd_putch
       _clcd_write
       _delay
       _read_ds1307
       _read_switches
       _write_ds1307
         ___awdiv (ARG)
         ___awmod (ARG)
         _i2c_start (ARG)
         _i2c_stop (ARG)
         _i2c_write (ARG)
     _store_key_log
       ___awmod
       _write_external_eeprom
     _view_log
       _clcd_print
       _clcd_putch
       _clcd_write
       _delay
       _print_log_to_clcd
         _clcd_putch
         _read_external_eeprom
       _read_switches
   _init_config
     _init_adc
     _init_clcd
       _clcd_write
     _init_ds1307
       _read_ds1307
       _write_ds1307
     _init_i2c
     _init_matrix_keypad
     _init_uart
     _write_external_eeprom
   _read_switches
   _store_key_log

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      26        0.0%
BITBIGSFRlll       281      0       0      24        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      36       5       33.8%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     44      5D       1       97.9%
BITBIGSFRhhhhhl     27      0       0      17        0.0%
BITBIGSFRllh         F      0       0      23        0.0%
BITBIGSFRhhhhhh      E      0       0      16        0.0%
BITBIGSFRlhhhl       9      0       0      20        0.0%
BITBIGSFRlhhhhl      8      0       0      19        0.0%
BITBIGSFRlhhhhh      7      0       0      18        0.0%
BITBIGSFRlhl         7      0       0      22        0.0%
BITBIGSFRlhhl        2      0       0      21        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      93      25        0.0%
DATA                 0      0      93       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Thu Jun 15 15:06:38 2023

                ?_get_password 0001          _write_external_eeprom 1364                 clcd_print@addr 0005  
               clcd_print@data 0003                             l36 1422                             _GO 007E11  
                 ___awdiv@sign 0006             _init_matrix_keypad 1202                            l230 25D4  
                          l156 2244                            l504 2D58                            l337 2A5A  
                          l381 17C2                            l382 17B2                            l391 17E0  
                          l384 17BA                            l394 17F8                            l387 17D0  
                          l379 17AA                            l396 1800                            l388 17E8  
                          l397 1810                            l389 17D8                            l398 1808  
                          _CKE 007E3E                            l984 1C24                            _PEN 007E2A  
                          _SEN 007E28                            _RX9 007D5E                            _SMP 007E3F  
                          _TX9 007D66                            _WUE 007DC1                 clcd_putch@addr 0009  
               clcd_putch@data 000A                   ___awmod@sign 000E      __end_of_print_log_to_clcd 1F40  
                          wreg 000FE8            ?_init_matrix_keypad 0001                   ___ftdiv@cntr 0015  
                 ___ftdiv@sign 001A                           l1122 1612                           l1132 1536  
                         l3002 1828                           l3014 184E                           l3030 1880  
                         l3016 1856                           l3008 1838                           l3200 1D2C  
                         l3034 188E                           l3026 1876                           l3050 174C  
                         l3130 21A6                           l3122 2152                           l4020 2070  
                         l4012 204E                           l3302 2474                           l3222 22EE  
                         l3214 22C0                           l3230 2318                           l3206 2290  
                         l3070 1792                           l3062 177A                           l3054 175A  
                         l3046 1740                           l3142 2224                           l3134 21D0  
                         l3126 217C                           l3118 2128                           l3304 247C  
                         l3216 22D2                           l3056 1762                           l4008 2036  
                         l3250 2374                           l3066 1784                           l3138 21FA  
                         l4026 2080                           l3260 2398                           l3244 235C  
                         l3236 232E                           l3252 2386                           l3228 2306  
                         l3180 1CA6                           l3172 1C74                           l3502 1D90  
                         l3238 2340                           l3350 2C28                           l3334 2AD0  
                         l3520 1DD2                           l3360 2C9C                           l3352 2C3E  
                         l3184 1CBC                           l3602 13FE                           l3450 1B98  
                         l3530 1DFA                           l3194 1D04                           l3620 1308  
                         l3612 12F0                           l3700 2578                           l3516 1DC2  
                         l3276 23DE                           l3364 2CBA                           l3372 2D20  
                         l3348 2C12                           l3356 2C54                           l3188 1CDE  
                         l3606 1406                           l3526 1DEA                           l3294 244C  
                         l3366 2CDC                           l3358 2C7A                           l3198 1D1A  
                         l3456 1BC0                           l3544 1ACA                           l3632 15E0  
                         l3296 246C                           l3368 2CFE                           l3376 2D46  
                         l2914 16D8                           l3730 2600                           l3714 25B6  
                         l3706 2596                           l3562 1B1E                           l3634 15E8  
                         l2922 1450                           l3810 27C4                           l3708 25A6  
                         l3476 1BFE                           l3580 1B5E                           l3572 1B36  
                         l3644 1608                           l3660 152C                           l3652 150C  
                         l2924 1458                           l3900 29EA                           l3804 27A6  
                         l3590 13E2                           l2758 12D8                           l2918 1704  
                         l3742 262A                           l3574 1B42                           l3566 1B2E  
                         l3654 1514                           l3814 2806                           l2944 14A4  
                         l3744 2632                           l3680 24EC                           l3496 1D68  
                         l2928 146C                           l3904 2A0C                           l3832 286C  
                         l3808 27BA                           l3594 13E8                           l2954 14BC  
                         l2970 197A                           l2890 11F8                           l3850 28C8  
                         l3826 2844                           l3818 2820                           l2948 14B0  
                         l3764 26A4                           l3756 2682                           l3692 2546  
                         l3684 24FC                           l3844 28B2                           l3828 2854  
                         l3916 2A48                           l3774 2710                           l3694 2554  
                         l3790 2774                           l2974 1990                           l2966 1952  
                         l3870 2940                           l3918 2A5A                           l2976 19AE  
                         l2968 195C                           l2888 1388                           l3856 28F8  
                         l3778 2732                           l2978 19B8                           l3874 294C  
                         l3890 29BA                           l3888 2984                           _ADFM 007E07  
                         l3978 1F7C                           l3988 1FB2                           l3998 1FF8  
                         _ADON 007E10                           STR_1 2FF1                           STR_2 2F58  
                         STR_3 2FFD                           STR_4 2FFD                           STR_5 2FE2  
                         STR_6 2F49                           STR_7 2F0A                           STR_8 2FEA  
                         STR_9 2F58                           _BRGH 007D62                           _CREN 007D5C  
                         _FERR 007D5A                           u2000 23C4                           u2020 2406  
                         u2101 1B80                           u2040 24A0                           u2121 1BA8  
                         u2211 1AAE                           _CSRC 007D67                           u2300 13EC  
                         u2220 1AB8                           u2061 2AC4                           u2230 1AE8  
                         u2151 1D50                           u1520 16FC                           u2400 251C  
                         u1530 1724                           u2410 2538                           u2171 1D78  
                         u2235 1AE0                           u2340 15EC                           u1365 12C8  
                         u1366 12CA                           u2430 25E8                           u1630 1944  
                         u2270 1B48                           u1527 16F2                           u1537 171A  
                         u2521 2786              ?_print_to_console 0004                           u2370 1518  
                         u1730 185A                           u2610 2A1C                           u2460 2656  
                         u2620 2A3A                           u1901 1C6C                           u1670 19C2  
                         u1910 1CB4                           u2550 283E                           u2480 2730  
                         u2641 1F4A                           u1930 1CEE                           u2570 28EC  
                         u2650 1FF0          ?_read_external_eeprom 0001                           u1940 1CFE  
                         u2580 29C8                           u1790 1766                           _RCIE 007CED  
                         _RCEN 007E2B                           _RCIF 007CF5                           _OERR 007D59  
                         _SCKP 007DC4                           _RBPU 007F8F                           _RX9D 007D58  
                         _SPEN 007D5F                           _RSEN 007E29                           _TX9D 007D60  
                         _SREN 007D5D                           _TRMT 007D61                           _TXIE 007CEC  
                         _TXEN 007D65                           _TXIF 007CF4                           _SYNC 007D64  
                         _main 1F40             ??_print_to_console 0006                   ___ftpack@arg 0001  
                 ___ftpack@exp 0004                           _time 0051                           fsr0h 000FEA  
                         fsr1h 000FE2                           indf0 000FEF                           fsr2h 000FDA  
                         fsr0l 000FE9                           indf2 000FDF                           fsr1l 000FE1  
                         fsr2l 000FD9                           prodl 000FF3                           start 0000  
                 ___ftmul@cntr 0028           ??_init_matrix_keypad 0001                   ___param_bank 000000  
                 ___ftmul@sign 0029                 ??_get_password 000B                 clcd_write@byte 0002  
                _i2c_rep_start 11C6                  ??_i2c_rx_mode 0001                   ___fttol@exp1 0038  
                 ___fttol@lval 0034                   ?_init_ds1307 0001                          _ABDEN 007DC0  
                        _ADCS0 007E00                          _ADCS1 007E01                          _ADCS2 007E02  
                        _ADDEN 007D5B                          ?_main 0001                   ?_read_ds1307 0001  
                        _ACKEN 007E2C                          _ACKDT 007E2D                          _BCLIF 007D0B  
                        _ACQT0 007E03                          _ACQT1 007E04                          _ACQT2 007E05  
              __end_of___awdiv 1898                __end_of___lbdiv 140A                          STR_10 2EF9  
                        STR_11 2EB1                          STR_12 2EC4                          STR_20 2F3A  
                        STR_13 2F1B                          STR_21 2FD9                          STR_14 2FA0  
                        STR_30 2F76                          STR_22 2EE8                          STR_23 2FAE  
                        STR_15 2E9B                          STR_24 2FC5                          STR_16 2F67  
                        _BRG16 007DC3                          STR_25 2F84                          STR_17 2FCF  
                        STR_26 2FFA                          STR_18 2F92                          STR_27 2ED7  
                        STR_19 2FBA                          STR_28 2FF7                __end_of___awmod 179C  
                        STR_29 2F2B                __end_of___lbmod 1310                __end_of___ftdiv 1C56  
              __end_of___ftmul 1E34                ___awdiv@divisor 0003                __end_of___fttol 1B70  
              __end_of___lwdiv 161C                __end_of___lwmod 1540                   ?_init_config 0001  
                        _RCIDL 007DC6                ___awdiv@counter 0005                          _VCFG0 007E0C  
                        _VCFG1 007E0D                          _RCREG 000FAE                          _SENDB 007D63  
                        _SPBRG 000FAF                          _PORTB 000F81                          _PORTD 000F83  
                        _TRISB 000F93                          _TRISC 000F94                          _TRISD 000F95  
                        _SSPIF 007CF3                          _TXREG 000FAD      write_external_eeprom@data 0002  
    write_external_eeprom@wait 0003                          _delay 1446                    go_to_menu@i 003A  
                ___ftpack@sign 0005                          _speed 005A                          _putch 11F6  
              _change_password 228A                          tablat 000FF5                          plusw1 000FE3  
                        plusw2 000FDB                          status 000FD8                ___lbdiv@divisor 0001  
              ___lbdiv@counter 0003               init_ds1307@dummy 0011                     _i2c_no_ack 11B0  
              __initialization 161C                 ?_i2c_rep_start 0001         ?_write_external_eeprom 0002  
                 __end_of_main 20A0               __end_of_i2c_idle 11BE               __end_of_i2c_read 11EA  
             __end_of_i2c_stop 11DE                         ??_main 003C                  ___fttol@sign1 0033  
                main@gear_iter 0043                  __activetblptr 000002            __end_of_i2c_rx_mode 11C6  
            store_key_log@gear 000F                  get_password@c 001A                  get_password@i 0025  
                get_password@j 0022                  get_password@k 0024                  get_password@p 0020  
                       ?_delay 0001                         _ADCON0 000FC2                         _ADCON1 000FC1  
                       _ABDOVF 007DC7               read_switches@key 004F         ??_read_external_eeprom 0002  
                       _ADRESH 000FC4                         _ADRESL 000FC3          change_password@F10384 0074  
        change_password@F10386 0070               ___awdiv@dividend 0001                         ?_putch 0001  
             __end_of___ftpack 19E2                         _GODONE 007E11               __end_of___lwtoft 12BE  
                 _write_ds1307 125C                         _SSPADD 000FC8                         _TRISC3 007CA3  
                       _TRISC4 007CA4                         _TRISC6 007CA6                         _TRISC7 007CA7  
                       _TRISD7 007CAF                         _SSPBUF 000FC9           get_password@wait_187 0015  
              set_time@blinker 0013               __end_of_get_time 16CC          print_log_to_clcd@LINE 000C  
                    ??___awdiv 0005                      ??___lbdiv 0002                      ??___awmod 000D  
                    ??___lbmod 0006                      ??___ftdiv 0012                      ??___ftmul 0021  
                    ??___fttol 002E                      ??___lwdiv 0005                set_time@seconds 0026  
                    ??___lwmod 0005               __end_of_init_i2c 122A          print_log_to_clcd@iter 000B  
             __end_of_init_adc 129A               __end_of_read_adc 1446                         delay@i 0006  
                       clear_0 1654                         clear_1 1660               ___awdiv@quotient 0007  
              ___awmod@divisor 000B                         isa$std 000001               __end_of_scan_key 1814  
              ___awmod@counter 000D          ___ftmul@f3_as_product 0025                   __pdataCOMRAM 005D  
      __end_of_change_password 24A8               __end_of_set_time 2E9A                   __mediumconst 2E9A  
                       tblptrh 000FF7                         tblptrl 000FF6                         tblptru 000FF8  
             __end_of_view_log 1D40           __end_of_get_password 277C               ___lbdiv@dividend 0002  
           get_password@F10367 0078                ___lbmod@divisor 0005                     __accesstop 0060  
      __end_of__initialization 1666                ___lbmod@counter 0007                  ___rparam_used 000001  
                   ___ftdiv@f1 000C                     ___ftdiv@f2 000F                     ___ftdiv@f3 0016  
              ??_i2c_rep_start 0001                    ?_i2c_no_ack 0001                     ___ftmul@f1 001B  
                   ___ftmul@f2 001E                     ___fttol@f1 002A                 __pcstackCOMRAM 0001  
                 __pidataBANK0 1242                  __end_of_delay 1482                    _i2c_rx_mode 11BE  
                _store_key_log 20A0                  __end_of_putch 1202               ___lbdiv@quotient 0004  
                   ___lwtoft@c 0009              __end_of_i2c_start 11D6              __end_of_i2c_write 11F6  
                      ??_delay 0003                        ??_putch 0001                     __pbssBANK0 0060  
                    ?_i2c_idle 0001                      ?_i2c_read 0001                      ?_i2c_stop 0001  
         set_time@field_select 0020               get_password@flag 0050               get_password@wait 0013  
                   _clcd_print 16CC                     _clcd_putch 122A                     _clcd_write 12BE  
 write_external_eeprom@address 0005                read_ds1307@data 0003                 ?_store_key_log 0001  
            read_switches@once 005D                        _ACKSTAT 007E2E                      ?___ftpack 0001  
                    ?___lwtoft 0009               ?_change_password 0001                        _SSPCON1 000FC6  
                    ?_get_time 0001                  _read_switches 1482                     ??_i2c_idle 0001  
                   ??_i2c_read 0001                     ??_i2c_stop 0001                      ?_init_i2c 0001  
                   _go_to_menu 277C                      ?_init_adc 0001                      ?_read_adc 0001  
               view_log@F10401 0060                      ?_scan_key 0001        ??_write_external_eeprom 0003  
                      __Hparam 0000                        __Lparam 0000                      ?_set_time 0001  
            __end_of_get_speed 1934                        ___awdiv 1814                        ___lbdiv 13D0  
                      ___awmod 172C                        ___lbmod 12E6                      ?_view_log 0001  
                      ___ftdiv 1B70                        ___ftmul 1D40                        ___fttol 1A9E  
                      ___lwdiv 15CA                        ___lwmod 14FE            set_time@time_buffer 0015  
                      __pcinit 161C                     ??___ftpack 0006                        __ramtop 0600  
                      __ptext0 1F40                        __ptext1 1540                        __ptext2 14C0  
                      __ptext3 1202                        __ptext4 1214                        __ptext5 1582  
                      __ptext6 139A                        __ptext7 127A                        __ptext8 277C  
                      __ptext9 1C56                     ??___lwtoft 000C              __end_of_init_clcd 13D0  
            __end_of_init_uart 14FE                        delay@ms 0001               ___awmod@dividend 0009  
             go_to_menu@F10376 007C                  go_to_menu@pos 0038        get_password@key_pressed 0019  
               ?_read_switches 0001         change_password@confirm 000D                     ??_get_time 0004  
         end_of_initialization 1666                 view_log@string 000E                    set_time@min 0024  
                   ??_init_i2c 0001                     ??_init_adc 0001                  __Lmediumconst 2E9A  
                   ??_read_adc 0003                     ??_scan_key 0001                    ?_clcd_print 0003  
                  ?_clcd_putch 0009                    ?_clcd_write 0001                ??_store_key_log 000F  
                   ??_set_time 0011                        postdec1 000FE5                        postdec2 000FDD  
                      postinc0 000FEE                        postinc1 000FE6                        postinc2 000FDE  
                   ??_view_log 000D                   _get_password 24A8                     main@F10408 008F  
                    _PORTBbits 000F81                      _PORTCbits 000F82                      _PORTDbits 000F83  
              read_adc@channel 0007              view_log@exit_flag 001E                  i2c_write@data 0001  
             ___lbmod@dividend 0006                read_adc@reg_val 0005                    ___lbmod@rem 0008  
                  ?_go_to_menu 0001                    ___ftdiv@exp 0019       read_external_eeprom@data 0003  
                 ??_i2c_no_ack 0001                    ___ftmul@exp 0024                   ?_i2c_rx_mode 0001  
             _print_to_console 19E2                  __pidataCOMRAM 3000                 set_time@F10423 0086  
          start_initialization 161C                ??_read_switches 0001                      _i2c_start 11CE  
                    _i2c_write 11EA             __end_of_i2c_no_ack 11B6               change_password@i 001E  
             change_password@j 001A          __end_of_i2c_rep_start 11CE           change_password@j_210 0018  
         change_password@j_205 001C                  ??_init_ds1307 0011                    __pdataBANK0 007C  
                ??_read_ds1307 0002    read_switches@detection_type 0001                  ??_init_config 0012  
                  __pbssCOMRAM 0045                     ?_i2c_start 0001                     ?_i2c_write 0001  
            get_password@delay 0011              get_password@count 0017               ___lwdiv@dividend 0001  
__end_of_write_external_eeprom 139A                  __pmediumconst 2E9A                       ?___awdiv 0001  
                     ?___lbdiv 0001                       ?___awmod 0009                       ?___lbmod 0005  
                     ?___ftdiv 000C                       ?___ftmul 001B             read_ds1307@address 0002  
                     ?___fttol 002A                       ?___lwdiv 0001                       ?___lwmod 0001  
                    _get_speed 1898            __end_of_init_ds1307 15CA            __end_of_read_ds1307 1364  
             ___lwdiv@quotient 0005                      _init_clcd 139A            __end_of_init_config 1582  
                    _init_uart 14C0                  ?_write_ds1307 000F                      delay@wait 0004  
  read_external_eeprom@address 0002                   ??_clcd_print 0006                   ??_clcd_putch 000A  
   __end_of_init_matrix_keypad 1214                   ??_clcd_write 0002                go_to_menu@i_247 0036  
 get_password@entered_password 000D          clcd_write@control_bit 0001                     ?_get_speed 0001  
              _log_total_saved 004B                    ??_i2c_start 0001             __end_of_clcd_print 172C  
                  ??_i2c_write 0001             __end_of_clcd_putch 1242             __end_of_clcd_write 12E6  
                   ?_init_clcd 0001                     ?_init_uart 0001       __end_of_print_to_console 1A9E  
                    copy_data0 1630                 ??_write_ds1307 0010                       _i2c_idle 11B6  
                     _i2c_read 11DE                   ??_go_to_menu 0028                       _i2c_stop 11D6  
     change_password@exit_flag 0017              get_time@clock_reg 0048              set_time@clock_reg 0045  
                     __Hrparam 0000                       __Lrparam 0000                  set_time@dummy 001F  
        __end_of_store_key_log 228A            change_password@wait 0011   __end_of_read_external_eeprom 133A  
                  _init_ds1307 1582                       ___ftpack 1934                    _read_ds1307 133A  
                     ___lwtoft 129A                    _init_config 1540              set_time@exit_flag 001E  
          go_to_menu@exit_flag 0034             __end_of_go_to_menu 2A64           get_speed@adc_reg_val 0039  
          write_ds1307@address 0010                ___lwdiv@divisor 0003                ___lwdiv@counter 0007  
                     __ptext10 1E34                       __ptext11 20A0                       __ptext20 1446  
                     __ptext12 2A64                       __ptext21 1670                       __ptext13 125C  
                     __ptext30 1B70                       __ptext22 133A                       __ptext14 172C  
                     __ptext31 1934                       __ptext23 1898                       __ptext15 1814  
                     __ptext40 11DE                       __ptext32 24A8                       __ptext24 140A  
                     __ptext16 19E2                       __ptext41 11BE                       __ptext33 1482  
                     __ptext25 129A                       __ptext17 11F6                       __ptext42 11B6  
                     __ptext34 179C                       __ptext26 14FE                       __ptext18 228A  
                     __ptext43 11B0                       __ptext35 1310                       __ptext27 15CA  
                     __ptext19 1364                       __ptext44 122A                       __ptext36 11EA  
                     __ptext28 1A9E                       __ptext45 16CC                       __ptext37 11D6  
                     __ptext29 1D40                       __ptext46 12BE                       __ptext38 11CE  
                     __ptext47 12E6                       __ptext39 11C6                       __ptext48 13D0  
                     _get_time 1670                       _init_i2c 1214                       _init_adc 127A  
                     _read_adc 140A                       _log_iter 004D                       _scan_key 179C  
            ??_change_password 000B                       _set_time 2A64                 go_to_menu@menu 002A  
                     isa$xinst 000000                       _view_log 1C56                       main@gear 003C  
         print_to_console@iter 0004                    ??_get_speed 0039                      view_log@i 0020  
                    putch@byte 0001                   set_time@hour 0022        change_password@password 0013  
                  ??_init_clcd 0003          __end_of_read_switches 14C0     get_password@total_attempts 001E  
                  ??_init_uart 0001               ___lwmod@dividend 0001           __end_of_write_ds1307 127A  
              ___lwmod@divisor 0003                ___lwmod@counter 0005              _print_log_to_clcd 1E34  
           ?_print_log_to_clcd 000B               write_ds1307@data 000F           _read_external_eeprom 1310  
          ??_print_log_to_clcd 000C  
